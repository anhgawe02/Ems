' Generated by VB.NET Class Generator

Imports System
Imports System.Configuration
Imports System.Data
Imports System.Data.SqlClient

Namespace EMS
#Region "Ly_Do_Vao_Kho_HQ_Chi_Tiet"
    Public Class Ly_Do_Vao_Kho_HQ_Chi_Tiet
        Public Id_Ly_Do As Integer
        Public Ten_Ly_Do As String
        Public Id_Phan_Loai As Integer
        Public Ghi_Chu As String
    End Class
#End Region
#Region "Ly_Do_Vao_Kho_HQ"
    Public Class Ly_Do_Vao_Kho_HQ
        Private ConnectionString As String
        Public Sub New(ByVal _ConnectionString As String)
            ConnectionString = _ConnectionString
        End Sub

#Region "Cac store co ban"
#Region "Ly_Do_Vao_Kho_HQ_Lay"
        Public Function Ly_Do_Vao_Kho_HQ_Lay(ByVal Id_Ly_Do As String) As Ly_Do_Vao_Kho_HQ_Chi_Tiet
            Try
                ' T?o d?i tu?ng connection và command
                Dim myConnection As SqlConnection = New SqlConnection(ConnectionString)
                Dim myCommand As SqlCommand = New SqlCommand("Ly_Do_Vao_Kho_HQ_Lay", myConnection)

                ' S? d?ng Store Procedure
                myCommand.CommandType = CommandType.StoredProcedure
                ' Thêm các Parameters vào th? t?c            
                Dim pId_Ly_Do As SqlParameter = New SqlParameter("@Id_Ly_Do", SqlDbType.Int, 4)
                pId_Ly_Do.Value = Id_Ly_Do
                myCommand.Parameters.Add(pId_Ly_Do)

                Dim pTen_Ly_Do As SqlParameter = New SqlParameter("@Ten_Ly_Do", SqlDbType.NVarChar, 200)
                pTen_Ly_Do.Direction = ParameterDirection.Output
                myCommand.Parameters.Add(pTen_Ly_Do)

                Dim pId_Phan_Loai As SqlParameter = New SqlParameter("@Id_Phan_Loai", SqlDbType.Int, 4)
                pId_Phan_Loai.Direction = ParameterDirection.Output
                myCommand.Parameters.Add(pId_Phan_Loai)

                Dim pGhi_Chu As SqlParameter = New SqlParameter("@Ghi_Chu", SqlDbType.NVarChar, 200)
                pGhi_Chu.Direction = ParameterDirection.Output
                myCommand.Parameters.Add(pGhi_Chu)

                
                myConnection.Open()
                myCommand.ExecuteNonQuery()
                myConnection.Close()
                myConnection.Dispose()

                Dim myLy_Do_Vao_Kho_HQ_Chi_Tiet As Ly_Do_Vao_Kho_HQ_Chi_Tiet = New Ly_Do_Vao_Kho_HQ_Chi_Tiet
                myLy_Do_Vao_Kho_HQ_Chi_Tiet.Id_Ly_Do = Id_Ly_Do
                myLy_Do_Vao_Kho_HQ_Chi_Tiet.Ten_Ly_Do = pTen_Ly_Do.Value
                myLy_Do_Vao_Kho_HQ_Chi_Tiet.Id_Phan_Loai = pId_Phan_Loai.Value
                myLy_Do_Vao_Kho_HQ_Chi_Tiet.Ghi_Chu = pGhi_Chu.Value

                Return myLy_Do_Vao_Kho_HQ_Chi_Tiet
            Catch ex As Exception
                Console.Write(ex.ToString)

            End Try
        End Function
#End Region

#Region "Ly_Do_Vao_Kho_HQ_Cap_Nhat"
        Public Function Ly_Do_Vao_Kho_HQ_Cap_Nhat(ByVal id_Ly_Do As Integer, ByVal ten_Ly_Do As String, ByVal id_Phan_Loai As Integer, ByVal ghi_Chu As String) As Integer
            Dim MyCommand As SqlCommand = New SqlCommand
            MyCommand.CommandText = "Ly_Do_Vao_Kho_HQ_Cap_Nhat"
            MyCommand.CommandType = CommandType.StoredProcedure
            Dim MyConnection As New SqlConnection(ConnectionString)
            MyCommand.Connection = MyConnection

            Dim numRows As Integer = -1

            Try

                'Define the parameters

                MyCommand.Parameters.Add(New SqlParameter("@Id_Ly_Do", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Current, id_Ly_Do))
                MyCommand.Parameters.Add(New SqlParameter("@Ten_Ly_Do", SqlDbType.NVarChar, 200, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Current, ten_Ly_Do))
                MyCommand.Parameters.Add(New SqlParameter("@Id_Phan_Loai", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Current, id_Phan_Loai))
                MyCommand.Parameters.Add(New SqlParameter("@Ghi_Chu", SqlDbType.NVarChar, 200, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Current, ghi_Chu))

                'Execute the command using the connection string from the db base class 
                'and get the number of rows affected by the operation
                MyConnection.Open()

                numRows = MyCommand.ExecuteNonQuery()
                Return numRows
                'return the number of rows affected
            Catch ex As Exception

                ' Call the exception handler
                Console.Write(ex.ToString)

            Finally
                'Close the connection and Dispose.
                MyConnection.Close()
                MyCommand.Dispose()

            End Try
        End Function

#End Region
#Region "Ly_Do_Vao_Kho_HQ_Cap_Nhat_Them"
        Public Function Ly_Do_Vao_Kho_HQ_Cap_Nhat_Them(ByVal id_Ly_Do As Integer, ByVal ten_Ly_Do As String, ByVal id_Phan_Loai As Integer, ByVal ghi_Chu As String) As Integer
            Dim MyCommand As SqlCommand = New SqlCommand
            MyCommand.CommandText = "Ly_Do_Vao_Kho_HQ_Cap_Nhat_Them"
            MyCommand.CommandType = CommandType.StoredProcedure
            Dim MyConnection As New SqlConnection(ConnectionString)
            MyCommand.Connection = MyConnection

            Dim numRows As Integer = -1

            Try

                'Define the parameters

                MyCommand.Parameters.Add(New SqlParameter("@Id_Ly_Do", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Current, id_Ly_Do))
                MyCommand.Parameters.Add(New SqlParameter("@Ten_Ly_Do", SqlDbType.NVarChar, 200, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Current, ten_Ly_Do))
                MyCommand.Parameters.Add(New SqlParameter("@Id_Phan_Loai", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Current, id_Phan_Loai))
                MyCommand.Parameters.Add(New SqlParameter("@Ghi_Chu", SqlDbType.NVarChar, 200, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Current, ghi_Chu))

                'Execute the command using the connection string from the db base class 
                'and get the number of rows affected by the operation
                MyConnection.Open()

                numRows = MyCommand.ExecuteNonQuery()
                Return numRows
                'return the number of rows affected
            Catch ex As Exception

                ' Call the exception handler
                Console.Write(ex.ToString)

            Finally
                'Close the connection and Dispose.
                MyConnection.Close()
                MyCommand.Dispose()

            End Try
        End Function

#End Region
#Region "Ly_Do_Vao_Kho_HQ_Danh_Sach"

        Public Function Ly_Do_Vao_Kho_HQ_Danh_Sach() As DataSet

            ' The procedure returns these columns:
            ' Id_Ly_Do
            ' Ten_Ly_Do
            ' Id_Phan_Loai
            ' Ghi_Chu


            Dim MyCommand As SqlCommand = New SqlCommand
            MyCommand.CommandText = "Ly_Do_Vao_Kho_HQ_Danh_Sach"
            MyCommand.CommandType = CommandType.StoredProcedure
            Dim adapter As SqlDataAdapter = New SqlDataAdapter(MyCommand)
            Dim MyDataSet As New DataSet


            Dim MyConnection As New SqlConnection(ConnectionString)
            MyCommand.Connection = MyConnection

            Try


                'Define the parameters


                'Fill the dataset using the connection string from the db base class
                MyConnection.Open()
                adapter.Fill(MyDataSet)

                Return MyDataSet

            Catch ex As Exception
                Console.Write(ex.ToString)
            Finally
                'Close the connection and Dispose.
                MyConnection.Close()
                MyCommand.Dispose()
                adapter.Dispose()
            End Try
        End Function
#End Region
#Region "Ly_Do_Vao_Kho_HQ_Them"
        Public Function Ly_Do_Vao_Kho_HQ_Them(ByVal id_Ly_Do As Integer, ByVal ten_Ly_Do As String, ByVal id_Phan_Loai As Integer, ByVal ghi_Chu As String) As Integer
            Dim MyCommand As SqlCommand = New SqlCommand
            MyCommand.CommandText = "Ly_Do_Vao_Kho_HQ_Them"
            MyCommand.CommandType = CommandType.StoredProcedure
            Dim MyConnection As New SqlConnection(ConnectionString)
            MyCommand.Connection = MyConnection

            Dim numRows As Integer = -1

            Try

                'Define the parameters

                MyCommand.Parameters.Add(New SqlParameter("@Id_Ly_Do", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Current, id_Ly_Do))
                MyCommand.Parameters.Add(New SqlParameter("@Ten_Ly_Do", SqlDbType.NVarChar, 200, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Current, ten_Ly_Do))
                MyCommand.Parameters.Add(New SqlParameter("@Id_Phan_Loai", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Current, id_Phan_Loai))
                MyCommand.Parameters.Add(New SqlParameter("@Ghi_Chu", SqlDbType.NVarChar, 200, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Current, ghi_Chu))

                'Execute the command using the connection string from the db base class 
                'and get the number of rows affected by the operation
                MyConnection.Open()

                numRows = MyCommand.ExecuteNonQuery()
                Return numRows
                'return the number of rows affected
            Catch ex As Exception

                ' Call the exception handler
                Console.Write(ex.ToString)

            Finally
                'Close the connection and Dispose.
                MyConnection.Close()
                MyCommand.Dispose()

            End Try
        End Function

#End Region
#Region "Ly_Do_Vao_Kho_HQ_Xoa"
        Public Function Ly_Do_Vao_Kho_HQ_Xoa(ByVal id_Ly_Do As Integer) As Integer
            Dim MyCommand As SqlCommand = New SqlCommand
            MyCommand.CommandText = "Ly_Do_Vao_Kho_HQ_Xoa"
            MyCommand.CommandType = CommandType.StoredProcedure
            Dim MyConnection As New SqlConnection(ConnectionString)
            MyCommand.Connection = MyConnection

            Dim numRows As Integer = -1

            Try

                'Define the parameters

                MyCommand.Parameters.Add(New SqlParameter("@Id_Ly_Do", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Current, id_Ly_Do))

                'Execute the command using the connection string from the db base class 
                'and get the number of rows affected by the operation
                MyConnection.Open()

                numRows = MyCommand.ExecuteNonQuery()
                Return numRows
                'return the number of rows affected
            Catch ex As Exception

                ' Call the exception handler
                Console.Write(ex.ToString)

            Finally
                'Close the connection and Dispose.
                MyConnection.Close()
                MyCommand.Dispose()

            End Try
        End Function

#End Region
#End Region

    End Class
#End Region
End Namespace
