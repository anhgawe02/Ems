'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsReports
    Inherits DataSet
    
    Private tableNuoc As NuocDataTable
    
    Private tableE2_Di_Ban_ke As E2_Di_Ban_keDataTable
    
    Private tableE2_Den_Ban_ke As E2_Den_Ban_keDataTable
    
    Private tableE2_Di_BC37 As E2_Di_BC37DataTable
    
    Private tableE4 As E4DataTable
    
    Private tableE1 As E1DataTable
    
    Private tableHoa_Don_GTGT As Hoa_Don_GTGTDataTable
    
    Private tableE2_Den_BC37 As E2_Den_BC37DataTable
    
    Private tableTong_Ket As Tong_KetDataTable
    
    Private tableTong_Ket_Chuyen_Thu As Tong_Ket_Chuyen_ThuDataTable
    
    Private tableSo_hieu_chuyen_thu As So_hieu_chuyen_thuDataTable
    
    Private tableE1_Chan As E1_ChanDataTable
    
    Private tableE1_Le As E1_LeDataTable
    
    Private tableChuyen_thu_di_despatch As Chuyen_thu_di_despatchDataTable
    
    Private tableChuyen_Thu_Di_Ban_Ke_Despatch As Chuyen_Thu_Di_Ban_Ke_DespatchDataTable
    
    Private tableE2_Di_Ban_Ke_Receptacle As E2_Di_Ban_Ke_ReceptacleDataTable
    
    Private tableE2_Di_Ban_Ke_Receptacle_header As E2_Di_Ban_Ke_Receptacle_headerDataTable
    
    Private tableE2_Den_Ban_Ke_KhaiThac_header As E2_Den_Ban_Ke_KhaiThac_headerDataTable
    
    Private tableE2_Ban_Ke_Chi_Tiet_Tui_F As E2_Ban_Ke_Chi_Tiet_Tui_FDataTable
    
    Private tableE2_Den_Ban_Ke_TK As E2_Den_Ban_Ke_TKDataTable
    
    Private tableE2_Di_Ban_ke_khai_thac As E2_Di_Ban_ke_khai_thacDataTable
    
    Private tableE2_Di_Ban_Ke_KhaiThac_header As E2_Di_Ban_Ke_KhaiThac_headerDataTable
    
    Private tableE1_Di_Bang_Ke_Hai_Quan As E1_Di_Bang_Ke_Hai_QuanDataTable
    
    Private tableHai_Quan_Buu_Dien As Hai_Quan_Buu_DienDataTable
    
    Private tableE2_Di_Despatch_3Col As E2_Di_Despatch_3ColDataTable
    
    Private tableAccounting As AccountingDataTable
    
    Private tableAccounting_Transit As Accounting_TransitDataTable
    
    Private tableKe_Toan_QT_TH As Ke_Toan_QT_THDataTable
    
    Private tableE1_San_Luong_QT As E1_San_Luong_QTDataTable
    
    Private tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanDataTable
    
    Private tableBan_Ke_CN55_Chi_Tiet As Ban_Ke_CN55_Chi_TietDataTable
    
    Private tableBan_Ke_CN56_Chi_Tiet As Ban_Ke_CN56_Chi_TietDataTable
    
    Private tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoDataTable
    
    Private tableBan_Ke_A1_Noi_Bai As Ban_Ke_A1_Noi_BaiDataTable
    
    Private tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanDataTable
    
    Private tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuDataTable
    
    Private tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTDataTable
    
    Private tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Nuoc")) Is Nothing) Then
                Me.Tables.Add(New NuocDataTable(ds.Tables("Nuoc")))
            End If
            If (Not (ds.Tables("E2_Di_Ban_ke")) Is Nothing) Then
                Me.Tables.Add(New E2_Di_Ban_keDataTable(ds.Tables("E2_Di_Ban_ke")))
            End If
            If (Not (ds.Tables("E2_Den_Ban_ke")) Is Nothing) Then
                Me.Tables.Add(New E2_Den_Ban_keDataTable(ds.Tables("E2_Den_Ban_ke")))
            End If
            If (Not (ds.Tables("E2_Di_BC37")) Is Nothing) Then
                Me.Tables.Add(New E2_Di_BC37DataTable(ds.Tables("E2_Di_BC37")))
            End If
            If (Not (ds.Tables("E4")) Is Nothing) Then
                Me.Tables.Add(New E4DataTable(ds.Tables("E4")))
            End If
            If (Not (ds.Tables("E1")) Is Nothing) Then
                Me.Tables.Add(New E1DataTable(ds.Tables("E1")))
            End If
            If (Not (ds.Tables("Hoa_Don_GTGT")) Is Nothing) Then
                Me.Tables.Add(New Hoa_Don_GTGTDataTable(ds.Tables("Hoa_Don_GTGT")))
            End If
            If (Not (ds.Tables("E2_Den_BC37")) Is Nothing) Then
                Me.Tables.Add(New E2_Den_BC37DataTable(ds.Tables("E2_Den_BC37")))
            End If
            If (Not (ds.Tables("Tong_Ket")) Is Nothing) Then
                Me.Tables.Add(New Tong_KetDataTable(ds.Tables("Tong_Ket")))
            End If
            If (Not (ds.Tables("Tong_Ket_Chuyen_Thu")) Is Nothing) Then
                Me.Tables.Add(New Tong_Ket_Chuyen_ThuDataTable(ds.Tables("Tong_Ket_Chuyen_Thu")))
            End If
            If (Not (ds.Tables("So_hieu_chuyen_thu")) Is Nothing) Then
                Me.Tables.Add(New So_hieu_chuyen_thuDataTable(ds.Tables("So_hieu_chuyen_thu")))
            End If
            If (Not (ds.Tables("E1_Chan")) Is Nothing) Then
                Me.Tables.Add(New E1_ChanDataTable(ds.Tables("E1_Chan")))
            End If
            If (Not (ds.Tables("E1_Le")) Is Nothing) Then
                Me.Tables.Add(New E1_LeDataTable(ds.Tables("E1_Le")))
            End If
            If (Not (ds.Tables("Chuyen_thu_di_despatch")) Is Nothing) Then
                Me.Tables.Add(New Chuyen_thu_di_despatchDataTable(ds.Tables("Chuyen_thu_di_despatch")))
            End If
            If (Not (ds.Tables("Chuyen_Thu_Di_Ban_Ke_Despatch")) Is Nothing) Then
                Me.Tables.Add(New Chuyen_Thu_Di_Ban_Ke_DespatchDataTable(ds.Tables("Chuyen_Thu_Di_Ban_Ke_Despatch")))
            End If
            If (Not (ds.Tables("E2_Di_Ban_Ke_Receptacle")) Is Nothing) Then
                Me.Tables.Add(New E2_Di_Ban_Ke_ReceptacleDataTable(ds.Tables("E2_Di_Ban_Ke_Receptacle")))
            End If
            If (Not (ds.Tables("E2_Di_Ban_Ke_Receptacle_header")) Is Nothing) Then
                Me.Tables.Add(New E2_Di_Ban_Ke_Receptacle_headerDataTable(ds.Tables("E2_Di_Ban_Ke_Receptacle_header")))
            End If
            If (Not (ds.Tables("E2_Den_Ban_Ke_KhaiThac_header")) Is Nothing) Then
                Me.Tables.Add(New E2_Den_Ban_Ke_KhaiThac_headerDataTable(ds.Tables("E2_Den_Ban_Ke_KhaiThac_header")))
            End If
            If (Not (ds.Tables("E2_Ban_Ke_Chi_Tiet_Tui_F")) Is Nothing) Then
                Me.Tables.Add(New E2_Ban_Ke_Chi_Tiet_Tui_FDataTable(ds.Tables("E2_Ban_Ke_Chi_Tiet_Tui_F")))
            End If
            If (Not (ds.Tables("E2_Den_Ban_Ke_TK")) Is Nothing) Then
                Me.Tables.Add(New E2_Den_Ban_Ke_TKDataTable(ds.Tables("E2_Den_Ban_Ke_TK")))
            End If
            If (Not (ds.Tables("E2_Di_Ban_ke_khai_thac")) Is Nothing) Then
                Me.Tables.Add(New E2_Di_Ban_ke_khai_thacDataTable(ds.Tables("E2_Di_Ban_ke_khai_thac")))
            End If
            If (Not (ds.Tables("E2_Di_Ban_Ke_KhaiThac_header")) Is Nothing) Then
                Me.Tables.Add(New E2_Di_Ban_Ke_KhaiThac_headerDataTable(ds.Tables("E2_Di_Ban_Ke_KhaiThac_header")))
            End If
            If (Not (ds.Tables("E1_Di_Bang_Ke_Hai_Quan")) Is Nothing) Then
                Me.Tables.Add(New E1_Di_Bang_Ke_Hai_QuanDataTable(ds.Tables("E1_Di_Bang_Ke_Hai_Quan")))
            End If
            If (Not (ds.Tables("Hai_Quan_Buu_Dien")) Is Nothing) Then
                Me.Tables.Add(New Hai_Quan_Buu_DienDataTable(ds.Tables("Hai_Quan_Buu_Dien")))
            End If
            If (Not (ds.Tables("E2_Di_Despatch_3Col")) Is Nothing) Then
                Me.Tables.Add(New E2_Di_Despatch_3ColDataTable(ds.Tables("E2_Di_Despatch_3Col")))
            End If
            If (Not (ds.Tables("Accounting")) Is Nothing) Then
                Me.Tables.Add(New AccountingDataTable(ds.Tables("Accounting")))
            End If
            If (Not (ds.Tables("Accounting_Transit")) Is Nothing) Then
                Me.Tables.Add(New Accounting_TransitDataTable(ds.Tables("Accounting_Transit")))
            End If
            If (Not (ds.Tables("Ke_Toan_QT_TH")) Is Nothing) Then
                Me.Tables.Add(New Ke_Toan_QT_THDataTable(ds.Tables("Ke_Toan_QT_TH")))
            End If
            If (Not (ds.Tables("E1_San_Luong_QT")) Is Nothing) Then
                Me.Tables.Add(New E1_San_Luong_QTDataTable(ds.Tables("E1_San_Luong_QT")))
            End If
            If (Not (ds.Tables("E1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan")) Is Nothing) Then
                Me.Tables.Add(New E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanDataTable(ds.Tables("E1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan")))
            End If
            If (Not (ds.Tables("Ban_Ke_CN55_Chi_Tiet")) Is Nothing) Then
                Me.Tables.Add(New Ban_Ke_CN55_Chi_TietDataTable(ds.Tables("Ban_Ke_CN55_Chi_Tiet")))
            End If
            If (Not (ds.Tables("Ban_Ke_CN56_Chi_Tiet")) Is Nothing) Then
                Me.Tables.Add(New Ban_Ke_CN56_Chi_TietDataTable(ds.Tables("Ban_Ke_CN56_Chi_Tiet")))
            End If
            If (Not (ds.Tables("E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo")) Is Nothing) Then
                Me.Tables.Add(New E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoDataTable(ds.Tables("E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo")))
            End If
            If (Not (ds.Tables("Ban_Ke_A1_Noi_Bai")) Is Nothing) Then
                Me.Tables.Add(New Ban_Ke_A1_Noi_BaiDataTable(ds.Tables("Ban_Ke_A1_Noi_Bai")))
            End If
            If (Not (ds.Tables("Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan")) Is Nothing) Then
                Me.Tables.Add(New Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanDataTable(ds.Tables("Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan")))
            End If
            If (Not (ds.Tables("Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu")) Is Nothing) Then
                Me.Tables.Add(New Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuDataTable(ds.Tables("Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu")))
            End If
            If (Not (ds.Tables("Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT")) Is Nothing) Then
                Me.Tables.Add(New Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTDataTable(ds.Tables("Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT")))
            End If
            If (Not (ds.Tables("Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT")) Is Nothing) Then
                Me.Tables.Add(New Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTDataTable(ds.Tables("Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Nuoc As NuocDataTable
        Get
            Return Me.tableNuoc
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E2_Di_Ban_ke As E2_Di_Ban_keDataTable
        Get
            Return Me.tableE2_Di_Ban_ke
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E2_Den_Ban_ke As E2_Den_Ban_keDataTable
        Get
            Return Me.tableE2_Den_Ban_ke
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E2_Di_BC37 As E2_Di_BC37DataTable
        Get
            Return Me.tableE2_Di_BC37
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E4 As E4DataTable
        Get
            Return Me.tableE4
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E1 As E1DataTable
        Get
            Return Me.tableE1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Hoa_Don_GTGT As Hoa_Don_GTGTDataTable
        Get
            Return Me.tableHoa_Don_GTGT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E2_Den_BC37 As E2_Den_BC37DataTable
        Get
            Return Me.tableE2_Den_BC37
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tong_Ket As Tong_KetDataTable
        Get
            Return Me.tableTong_Ket
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tong_Ket_Chuyen_Thu As Tong_Ket_Chuyen_ThuDataTable
        Get
            Return Me.tableTong_Ket_Chuyen_Thu
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property So_hieu_chuyen_thu As So_hieu_chuyen_thuDataTable
        Get
            Return Me.tableSo_hieu_chuyen_thu
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E1_Chan As E1_ChanDataTable
        Get
            Return Me.tableE1_Chan
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E1_Le As E1_LeDataTable
        Get
            Return Me.tableE1_Le
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Chuyen_thu_di_despatch As Chuyen_thu_di_despatchDataTable
        Get
            Return Me.tableChuyen_thu_di_despatch
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Chuyen_Thu_Di_Ban_Ke_Despatch As Chuyen_Thu_Di_Ban_Ke_DespatchDataTable
        Get
            Return Me.tableChuyen_Thu_Di_Ban_Ke_Despatch
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E2_Di_Ban_Ke_Receptacle As E2_Di_Ban_Ke_ReceptacleDataTable
        Get
            Return Me.tableE2_Di_Ban_Ke_Receptacle
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E2_Di_Ban_Ke_Receptacle_header As E2_Di_Ban_Ke_Receptacle_headerDataTable
        Get
            Return Me.tableE2_Di_Ban_Ke_Receptacle_header
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E2_Den_Ban_Ke_KhaiThac_header As E2_Den_Ban_Ke_KhaiThac_headerDataTable
        Get
            Return Me.tableE2_Den_Ban_Ke_KhaiThac_header
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E2_Ban_Ke_Chi_Tiet_Tui_F As E2_Ban_Ke_Chi_Tiet_Tui_FDataTable
        Get
            Return Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E2_Den_Ban_Ke_TK As E2_Den_Ban_Ke_TKDataTable
        Get
            Return Me.tableE2_Den_Ban_Ke_TK
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E2_Di_Ban_ke_khai_thac As E2_Di_Ban_ke_khai_thacDataTable
        Get
            Return Me.tableE2_Di_Ban_ke_khai_thac
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E2_Di_Ban_Ke_KhaiThac_header As E2_Di_Ban_Ke_KhaiThac_headerDataTable
        Get
            Return Me.tableE2_Di_Ban_Ke_KhaiThac_header
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E1_Di_Bang_Ke_Hai_Quan As E1_Di_Bang_Ke_Hai_QuanDataTable
        Get
            Return Me.tableE1_Di_Bang_Ke_Hai_Quan
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Hai_Quan_Buu_Dien As Hai_Quan_Buu_DienDataTable
        Get
            Return Me.tableHai_Quan_Buu_Dien
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E2_Di_Despatch_3Col As E2_Di_Despatch_3ColDataTable
        Get
            Return Me.tableE2_Di_Despatch_3Col
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accounting As AccountingDataTable
        Get
            Return Me.tableAccounting
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Accounting_Transit As Accounting_TransitDataTable
        Get
            Return Me.tableAccounting_Transit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ke_Toan_QT_TH As Ke_Toan_QT_THDataTable
        Get
            Return Me.tableKe_Toan_QT_TH
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E1_San_Luong_QT As E1_San_Luong_QTDataTable
        Get
            Return Me.tableE1_San_Luong_QT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanDataTable
        Get
            Return Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ban_Ke_CN55_Chi_Tiet As Ban_Ke_CN55_Chi_TietDataTable
        Get
            Return Me.tableBan_Ke_CN55_Chi_Tiet
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ban_Ke_CN56_Chi_Tiet As Ban_Ke_CN56_Chi_TietDataTable
        Get
            Return Me.tableBan_Ke_CN56_Chi_Tiet
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoDataTable
        Get
            Return Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ban_Ke_A1_Noi_Bai As Ban_Ke_A1_Noi_BaiDataTable
        Get
            Return Me.tableBan_Ke_A1_Noi_Bai
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanDataTable
        Get
            Return Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuDataTable
        Get
            Return Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTDataTable
        Get
            Return Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTDataTable
        Get
            Return Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsReports = CType(MyBase.Clone,dsReports)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Nuoc")) Is Nothing) Then
            Me.Tables.Add(New NuocDataTable(ds.Tables("Nuoc")))
        End If
        If (Not (ds.Tables("E2_Di_Ban_ke")) Is Nothing) Then
            Me.Tables.Add(New E2_Di_Ban_keDataTable(ds.Tables("E2_Di_Ban_ke")))
        End If
        If (Not (ds.Tables("E2_Den_Ban_ke")) Is Nothing) Then
            Me.Tables.Add(New E2_Den_Ban_keDataTable(ds.Tables("E2_Den_Ban_ke")))
        End If
        If (Not (ds.Tables("E2_Di_BC37")) Is Nothing) Then
            Me.Tables.Add(New E2_Di_BC37DataTable(ds.Tables("E2_Di_BC37")))
        End If
        If (Not (ds.Tables("E4")) Is Nothing) Then
            Me.Tables.Add(New E4DataTable(ds.Tables("E4")))
        End If
        If (Not (ds.Tables("E1")) Is Nothing) Then
            Me.Tables.Add(New E1DataTable(ds.Tables("E1")))
        End If
        If (Not (ds.Tables("Hoa_Don_GTGT")) Is Nothing) Then
            Me.Tables.Add(New Hoa_Don_GTGTDataTable(ds.Tables("Hoa_Don_GTGT")))
        End If
        If (Not (ds.Tables("E2_Den_BC37")) Is Nothing) Then
            Me.Tables.Add(New E2_Den_BC37DataTable(ds.Tables("E2_Den_BC37")))
        End If
        If (Not (ds.Tables("Tong_Ket")) Is Nothing) Then
            Me.Tables.Add(New Tong_KetDataTable(ds.Tables("Tong_Ket")))
        End If
        If (Not (ds.Tables("Tong_Ket_Chuyen_Thu")) Is Nothing) Then
            Me.Tables.Add(New Tong_Ket_Chuyen_ThuDataTable(ds.Tables("Tong_Ket_Chuyen_Thu")))
        End If
        If (Not (ds.Tables("So_hieu_chuyen_thu")) Is Nothing) Then
            Me.Tables.Add(New So_hieu_chuyen_thuDataTable(ds.Tables("So_hieu_chuyen_thu")))
        End If
        If (Not (ds.Tables("E1_Chan")) Is Nothing) Then
            Me.Tables.Add(New E1_ChanDataTable(ds.Tables("E1_Chan")))
        End If
        If (Not (ds.Tables("E1_Le")) Is Nothing) Then
            Me.Tables.Add(New E1_LeDataTable(ds.Tables("E1_Le")))
        End If
        If (Not (ds.Tables("Chuyen_thu_di_despatch")) Is Nothing) Then
            Me.Tables.Add(New Chuyen_thu_di_despatchDataTable(ds.Tables("Chuyen_thu_di_despatch")))
        End If
        If (Not (ds.Tables("Chuyen_Thu_Di_Ban_Ke_Despatch")) Is Nothing) Then
            Me.Tables.Add(New Chuyen_Thu_Di_Ban_Ke_DespatchDataTable(ds.Tables("Chuyen_Thu_Di_Ban_Ke_Despatch")))
        End If
        If (Not (ds.Tables("E2_Di_Ban_Ke_Receptacle")) Is Nothing) Then
            Me.Tables.Add(New E2_Di_Ban_Ke_ReceptacleDataTable(ds.Tables("E2_Di_Ban_Ke_Receptacle")))
        End If
        If (Not (ds.Tables("E2_Di_Ban_Ke_Receptacle_header")) Is Nothing) Then
            Me.Tables.Add(New E2_Di_Ban_Ke_Receptacle_headerDataTable(ds.Tables("E2_Di_Ban_Ke_Receptacle_header")))
        End If
        If (Not (ds.Tables("E2_Den_Ban_Ke_KhaiThac_header")) Is Nothing) Then
            Me.Tables.Add(New E2_Den_Ban_Ke_KhaiThac_headerDataTable(ds.Tables("E2_Den_Ban_Ke_KhaiThac_header")))
        End If
        If (Not (ds.Tables("E2_Ban_Ke_Chi_Tiet_Tui_F")) Is Nothing) Then
            Me.Tables.Add(New E2_Ban_Ke_Chi_Tiet_Tui_FDataTable(ds.Tables("E2_Ban_Ke_Chi_Tiet_Tui_F")))
        End If
        If (Not (ds.Tables("E2_Den_Ban_Ke_TK")) Is Nothing) Then
            Me.Tables.Add(New E2_Den_Ban_Ke_TKDataTable(ds.Tables("E2_Den_Ban_Ke_TK")))
        End If
        If (Not (ds.Tables("E2_Di_Ban_ke_khai_thac")) Is Nothing) Then
            Me.Tables.Add(New E2_Di_Ban_ke_khai_thacDataTable(ds.Tables("E2_Di_Ban_ke_khai_thac")))
        End If
        If (Not (ds.Tables("E2_Di_Ban_Ke_KhaiThac_header")) Is Nothing) Then
            Me.Tables.Add(New E2_Di_Ban_Ke_KhaiThac_headerDataTable(ds.Tables("E2_Di_Ban_Ke_KhaiThac_header")))
        End If
        If (Not (ds.Tables("E1_Di_Bang_Ke_Hai_Quan")) Is Nothing) Then
            Me.Tables.Add(New E1_Di_Bang_Ke_Hai_QuanDataTable(ds.Tables("E1_Di_Bang_Ke_Hai_Quan")))
        End If
        If (Not (ds.Tables("Hai_Quan_Buu_Dien")) Is Nothing) Then
            Me.Tables.Add(New Hai_Quan_Buu_DienDataTable(ds.Tables("Hai_Quan_Buu_Dien")))
        End If
        If (Not (ds.Tables("E2_Di_Despatch_3Col")) Is Nothing) Then
            Me.Tables.Add(New E2_Di_Despatch_3ColDataTable(ds.Tables("E2_Di_Despatch_3Col")))
        End If
        If (Not (ds.Tables("Accounting")) Is Nothing) Then
            Me.Tables.Add(New AccountingDataTable(ds.Tables("Accounting")))
        End If
        If (Not (ds.Tables("Accounting_Transit")) Is Nothing) Then
            Me.Tables.Add(New Accounting_TransitDataTable(ds.Tables("Accounting_Transit")))
        End If
        If (Not (ds.Tables("Ke_Toan_QT_TH")) Is Nothing) Then
            Me.Tables.Add(New Ke_Toan_QT_THDataTable(ds.Tables("Ke_Toan_QT_TH")))
        End If
        If (Not (ds.Tables("E1_San_Luong_QT")) Is Nothing) Then
            Me.Tables.Add(New E1_San_Luong_QTDataTable(ds.Tables("E1_San_Luong_QT")))
        End If
        If (Not (ds.Tables("E1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan")) Is Nothing) Then
            Me.Tables.Add(New E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanDataTable(ds.Tables("E1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan")))
        End If
        If (Not (ds.Tables("Ban_Ke_CN55_Chi_Tiet")) Is Nothing) Then
            Me.Tables.Add(New Ban_Ke_CN55_Chi_TietDataTable(ds.Tables("Ban_Ke_CN55_Chi_Tiet")))
        End If
        If (Not (ds.Tables("Ban_Ke_CN56_Chi_Tiet")) Is Nothing) Then
            Me.Tables.Add(New Ban_Ke_CN56_Chi_TietDataTable(ds.Tables("Ban_Ke_CN56_Chi_Tiet")))
        End If
        If (Not (ds.Tables("E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo")) Is Nothing) Then
            Me.Tables.Add(New E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoDataTable(ds.Tables("E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo")))
        End If
        If (Not (ds.Tables("Ban_Ke_A1_Noi_Bai")) Is Nothing) Then
            Me.Tables.Add(New Ban_Ke_A1_Noi_BaiDataTable(ds.Tables("Ban_Ke_A1_Noi_Bai")))
        End If
        If (Not (ds.Tables("Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan")) Is Nothing) Then
            Me.Tables.Add(New Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanDataTable(ds.Tables("Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan")))
        End If
        If (Not (ds.Tables("Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu")) Is Nothing) Then
            Me.Tables.Add(New Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuDataTable(ds.Tables("Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu")))
        End If
        If (Not (ds.Tables("Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT")) Is Nothing) Then
            Me.Tables.Add(New Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTDataTable(ds.Tables("Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT")))
        End If
        If (Not (ds.Tables("Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT")) Is Nothing) Then
            Me.Tables.Add(New Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTDataTable(ds.Tables("Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableNuoc = CType(Me.Tables("Nuoc"),NuocDataTable)
        If (Not (Me.tableNuoc) Is Nothing) Then
            Me.tableNuoc.InitVars
        End If
        Me.tableE2_Di_Ban_ke = CType(Me.Tables("E2_Di_Ban_ke"),E2_Di_Ban_keDataTable)
        If (Not (Me.tableE2_Di_Ban_ke) Is Nothing) Then
            Me.tableE2_Di_Ban_ke.InitVars
        End If
        Me.tableE2_Den_Ban_ke = CType(Me.Tables("E2_Den_Ban_ke"),E2_Den_Ban_keDataTable)
        If (Not (Me.tableE2_Den_Ban_ke) Is Nothing) Then
            Me.tableE2_Den_Ban_ke.InitVars
        End If
        Me.tableE2_Di_BC37 = CType(Me.Tables("E2_Di_BC37"),E2_Di_BC37DataTable)
        If (Not (Me.tableE2_Di_BC37) Is Nothing) Then
            Me.tableE2_Di_BC37.InitVars
        End If
        Me.tableE4 = CType(Me.Tables("E4"),E4DataTable)
        If (Not (Me.tableE4) Is Nothing) Then
            Me.tableE4.InitVars
        End If
        Me.tableE1 = CType(Me.Tables("E1"),E1DataTable)
        If (Not (Me.tableE1) Is Nothing) Then
            Me.tableE1.InitVars
        End If
        Me.tableHoa_Don_GTGT = CType(Me.Tables("Hoa_Don_GTGT"),Hoa_Don_GTGTDataTable)
        If (Not (Me.tableHoa_Don_GTGT) Is Nothing) Then
            Me.tableHoa_Don_GTGT.InitVars
        End If
        Me.tableE2_Den_BC37 = CType(Me.Tables("E2_Den_BC37"),E2_Den_BC37DataTable)
        If (Not (Me.tableE2_Den_BC37) Is Nothing) Then
            Me.tableE2_Den_BC37.InitVars
        End If
        Me.tableTong_Ket = CType(Me.Tables("Tong_Ket"),Tong_KetDataTable)
        If (Not (Me.tableTong_Ket) Is Nothing) Then
            Me.tableTong_Ket.InitVars
        End If
        Me.tableTong_Ket_Chuyen_Thu = CType(Me.Tables("Tong_Ket_Chuyen_Thu"),Tong_Ket_Chuyen_ThuDataTable)
        If (Not (Me.tableTong_Ket_Chuyen_Thu) Is Nothing) Then
            Me.tableTong_Ket_Chuyen_Thu.InitVars
        End If
        Me.tableSo_hieu_chuyen_thu = CType(Me.Tables("So_hieu_chuyen_thu"),So_hieu_chuyen_thuDataTable)
        If (Not (Me.tableSo_hieu_chuyen_thu) Is Nothing) Then
            Me.tableSo_hieu_chuyen_thu.InitVars
        End If
        Me.tableE1_Chan = CType(Me.Tables("E1_Chan"),E1_ChanDataTable)
        If (Not (Me.tableE1_Chan) Is Nothing) Then
            Me.tableE1_Chan.InitVars
        End If
        Me.tableE1_Le = CType(Me.Tables("E1_Le"),E1_LeDataTable)
        If (Not (Me.tableE1_Le) Is Nothing) Then
            Me.tableE1_Le.InitVars
        End If
        Me.tableChuyen_thu_di_despatch = CType(Me.Tables("Chuyen_thu_di_despatch"),Chuyen_thu_di_despatchDataTable)
        If (Not (Me.tableChuyen_thu_di_despatch) Is Nothing) Then
            Me.tableChuyen_thu_di_despatch.InitVars
        End If
        Me.tableChuyen_Thu_Di_Ban_Ke_Despatch = CType(Me.Tables("Chuyen_Thu_Di_Ban_Ke_Despatch"),Chuyen_Thu_Di_Ban_Ke_DespatchDataTable)
        If (Not (Me.tableChuyen_Thu_Di_Ban_Ke_Despatch) Is Nothing) Then
            Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.InitVars
        End If
        Me.tableE2_Di_Ban_Ke_Receptacle = CType(Me.Tables("E2_Di_Ban_Ke_Receptacle"),E2_Di_Ban_Ke_ReceptacleDataTable)
        If (Not (Me.tableE2_Di_Ban_Ke_Receptacle) Is Nothing) Then
            Me.tableE2_Di_Ban_Ke_Receptacle.InitVars
        End If
        Me.tableE2_Di_Ban_Ke_Receptacle_header = CType(Me.Tables("E2_Di_Ban_Ke_Receptacle_header"),E2_Di_Ban_Ke_Receptacle_headerDataTable)
        If (Not (Me.tableE2_Di_Ban_Ke_Receptacle_header) Is Nothing) Then
            Me.tableE2_Di_Ban_Ke_Receptacle_header.InitVars
        End If
        Me.tableE2_Den_Ban_Ke_KhaiThac_header = CType(Me.Tables("E2_Den_Ban_Ke_KhaiThac_header"),E2_Den_Ban_Ke_KhaiThac_headerDataTable)
        If (Not (Me.tableE2_Den_Ban_Ke_KhaiThac_header) Is Nothing) Then
            Me.tableE2_Den_Ban_Ke_KhaiThac_header.InitVars
        End If
        Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F = CType(Me.Tables("E2_Ban_Ke_Chi_Tiet_Tui_F"),E2_Ban_Ke_Chi_Tiet_Tui_FDataTable)
        If (Not (Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F) Is Nothing) Then
            Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.InitVars
        End If
        Me.tableE2_Den_Ban_Ke_TK = CType(Me.Tables("E2_Den_Ban_Ke_TK"),E2_Den_Ban_Ke_TKDataTable)
        If (Not (Me.tableE2_Den_Ban_Ke_TK) Is Nothing) Then
            Me.tableE2_Den_Ban_Ke_TK.InitVars
        End If
        Me.tableE2_Di_Ban_ke_khai_thac = CType(Me.Tables("E2_Di_Ban_ke_khai_thac"),E2_Di_Ban_ke_khai_thacDataTable)
        If (Not (Me.tableE2_Di_Ban_ke_khai_thac) Is Nothing) Then
            Me.tableE2_Di_Ban_ke_khai_thac.InitVars
        End If
        Me.tableE2_Di_Ban_Ke_KhaiThac_header = CType(Me.Tables("E2_Di_Ban_Ke_KhaiThac_header"),E2_Di_Ban_Ke_KhaiThac_headerDataTable)
        If (Not (Me.tableE2_Di_Ban_Ke_KhaiThac_header) Is Nothing) Then
            Me.tableE2_Di_Ban_Ke_KhaiThac_header.InitVars
        End If
        Me.tableE1_Di_Bang_Ke_Hai_Quan = CType(Me.Tables("E1_Di_Bang_Ke_Hai_Quan"),E1_Di_Bang_Ke_Hai_QuanDataTable)
        If (Not (Me.tableE1_Di_Bang_Ke_Hai_Quan) Is Nothing) Then
            Me.tableE1_Di_Bang_Ke_Hai_Quan.InitVars
        End If
        Me.tableHai_Quan_Buu_Dien = CType(Me.Tables("Hai_Quan_Buu_Dien"),Hai_Quan_Buu_DienDataTable)
        If (Not (Me.tableHai_Quan_Buu_Dien) Is Nothing) Then
            Me.tableHai_Quan_Buu_Dien.InitVars
        End If
        Me.tableE2_Di_Despatch_3Col = CType(Me.Tables("E2_Di_Despatch_3Col"),E2_Di_Despatch_3ColDataTable)
        If (Not (Me.tableE2_Di_Despatch_3Col) Is Nothing) Then
            Me.tableE2_Di_Despatch_3Col.InitVars
        End If
        Me.tableAccounting = CType(Me.Tables("Accounting"),AccountingDataTable)
        If (Not (Me.tableAccounting) Is Nothing) Then
            Me.tableAccounting.InitVars
        End If
        Me.tableAccounting_Transit = CType(Me.Tables("Accounting_Transit"),Accounting_TransitDataTable)
        If (Not (Me.tableAccounting_Transit) Is Nothing) Then
            Me.tableAccounting_Transit.InitVars
        End If
        Me.tableKe_Toan_QT_TH = CType(Me.Tables("Ke_Toan_QT_TH"),Ke_Toan_QT_THDataTable)
        If (Not (Me.tableKe_Toan_QT_TH) Is Nothing) Then
            Me.tableKe_Toan_QT_TH.InitVars
        End If
        Me.tableE1_San_Luong_QT = CType(Me.Tables("E1_San_Luong_QT"),E1_San_Luong_QTDataTable)
        If (Not (Me.tableE1_San_Luong_QT) Is Nothing) Then
            Me.tableE1_San_Luong_QT.InitVars
        End If
        Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan = CType(Me.Tables("E1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan"),E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanDataTable)
        If (Not (Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan) Is Nothing) Then
            Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.InitVars
        End If
        Me.tableBan_Ke_CN55_Chi_Tiet = CType(Me.Tables("Ban_Ke_CN55_Chi_Tiet"),Ban_Ke_CN55_Chi_TietDataTable)
        If (Not (Me.tableBan_Ke_CN55_Chi_Tiet) Is Nothing) Then
            Me.tableBan_Ke_CN55_Chi_Tiet.InitVars
        End If
        Me.tableBan_Ke_CN56_Chi_Tiet = CType(Me.Tables("Ban_Ke_CN56_Chi_Tiet"),Ban_Ke_CN56_Chi_TietDataTable)
        If (Not (Me.tableBan_Ke_CN56_Chi_Tiet) Is Nothing) Then
            Me.tableBan_Ke_CN56_Chi_Tiet.InitVars
        End If
        Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo = CType(Me.Tables("E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo"),E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoDataTable)
        If (Not (Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo) Is Nothing) Then
            Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.InitVars
        End If
        Me.tableBan_Ke_A1_Noi_Bai = CType(Me.Tables("Ban_Ke_A1_Noi_Bai"),Ban_Ke_A1_Noi_BaiDataTable)
        If (Not (Me.tableBan_Ke_A1_Noi_Bai) Is Nothing) Then
            Me.tableBan_Ke_A1_Noi_Bai.InitVars
        End If
        Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan = CType(Me.Tables("Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan"),Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanDataTable)
        If (Not (Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan) Is Nothing) Then
            Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.InitVars
        End If
        Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu = CType(Me.Tables("Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu"),Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuDataTable)
        If (Not (Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu) Is Nothing) Then
            Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.InitVars
        End If
        Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT = CType(Me.Tables("Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT"),Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTDataTable)
        If (Not (Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT) Is Nothing) Then
            Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.InitVars
        End If
        Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT = CType(Me.Tables("Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT"),Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTDataTable)
        If (Not (Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT) Is Nothing) Then
            Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsReports"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsReports.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableNuoc = New NuocDataTable
        Me.Tables.Add(Me.tableNuoc)
        Me.tableE2_Di_Ban_ke = New E2_Di_Ban_keDataTable
        Me.Tables.Add(Me.tableE2_Di_Ban_ke)
        Me.tableE2_Den_Ban_ke = New E2_Den_Ban_keDataTable
        Me.Tables.Add(Me.tableE2_Den_Ban_ke)
        Me.tableE2_Di_BC37 = New E2_Di_BC37DataTable
        Me.Tables.Add(Me.tableE2_Di_BC37)
        Me.tableE4 = New E4DataTable
        Me.Tables.Add(Me.tableE4)
        Me.tableE1 = New E1DataTable
        Me.Tables.Add(Me.tableE1)
        Me.tableHoa_Don_GTGT = New Hoa_Don_GTGTDataTable
        Me.Tables.Add(Me.tableHoa_Don_GTGT)
        Me.tableE2_Den_BC37 = New E2_Den_BC37DataTable
        Me.Tables.Add(Me.tableE2_Den_BC37)
        Me.tableTong_Ket = New Tong_KetDataTable
        Me.Tables.Add(Me.tableTong_Ket)
        Me.tableTong_Ket_Chuyen_Thu = New Tong_Ket_Chuyen_ThuDataTable
        Me.Tables.Add(Me.tableTong_Ket_Chuyen_Thu)
        Me.tableSo_hieu_chuyen_thu = New So_hieu_chuyen_thuDataTable
        Me.Tables.Add(Me.tableSo_hieu_chuyen_thu)
        Me.tableE1_Chan = New E1_ChanDataTable
        Me.Tables.Add(Me.tableE1_Chan)
        Me.tableE1_Le = New E1_LeDataTable
        Me.Tables.Add(Me.tableE1_Le)
        Me.tableChuyen_thu_di_despatch = New Chuyen_thu_di_despatchDataTable
        Me.Tables.Add(Me.tableChuyen_thu_di_despatch)
        Me.tableChuyen_Thu_Di_Ban_Ke_Despatch = New Chuyen_Thu_Di_Ban_Ke_DespatchDataTable
        Me.Tables.Add(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch)
        Me.tableE2_Di_Ban_Ke_Receptacle = New E2_Di_Ban_Ke_ReceptacleDataTable
        Me.Tables.Add(Me.tableE2_Di_Ban_Ke_Receptacle)
        Me.tableE2_Di_Ban_Ke_Receptacle_header = New E2_Di_Ban_Ke_Receptacle_headerDataTable
        Me.Tables.Add(Me.tableE2_Di_Ban_Ke_Receptacle_header)
        Me.tableE2_Den_Ban_Ke_KhaiThac_header = New E2_Den_Ban_Ke_KhaiThac_headerDataTable
        Me.Tables.Add(Me.tableE2_Den_Ban_Ke_KhaiThac_header)
        Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F = New E2_Ban_Ke_Chi_Tiet_Tui_FDataTable
        Me.Tables.Add(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F)
        Me.tableE2_Den_Ban_Ke_TK = New E2_Den_Ban_Ke_TKDataTable
        Me.Tables.Add(Me.tableE2_Den_Ban_Ke_TK)
        Me.tableE2_Di_Ban_ke_khai_thac = New E2_Di_Ban_ke_khai_thacDataTable
        Me.Tables.Add(Me.tableE2_Di_Ban_ke_khai_thac)
        Me.tableE2_Di_Ban_Ke_KhaiThac_header = New E2_Di_Ban_Ke_KhaiThac_headerDataTable
        Me.Tables.Add(Me.tableE2_Di_Ban_Ke_KhaiThac_header)
        Me.tableE1_Di_Bang_Ke_Hai_Quan = New E1_Di_Bang_Ke_Hai_QuanDataTable
        Me.Tables.Add(Me.tableE1_Di_Bang_Ke_Hai_Quan)
        Me.tableHai_Quan_Buu_Dien = New Hai_Quan_Buu_DienDataTable
        Me.Tables.Add(Me.tableHai_Quan_Buu_Dien)
        Me.tableE2_Di_Despatch_3Col = New E2_Di_Despatch_3ColDataTable
        Me.Tables.Add(Me.tableE2_Di_Despatch_3Col)
        Me.tableAccounting = New AccountingDataTable
        Me.Tables.Add(Me.tableAccounting)
        Me.tableAccounting_Transit = New Accounting_TransitDataTable
        Me.Tables.Add(Me.tableAccounting_Transit)
        Me.tableKe_Toan_QT_TH = New Ke_Toan_QT_THDataTable
        Me.Tables.Add(Me.tableKe_Toan_QT_TH)
        Me.tableE1_San_Luong_QT = New E1_San_Luong_QTDataTable
        Me.Tables.Add(Me.tableE1_San_Luong_QT)
        Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan = New E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanDataTable
        Me.Tables.Add(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan)
        Me.tableBan_Ke_CN55_Chi_Tiet = New Ban_Ke_CN55_Chi_TietDataTable
        Me.Tables.Add(Me.tableBan_Ke_CN55_Chi_Tiet)
        Me.tableBan_Ke_CN56_Chi_Tiet = New Ban_Ke_CN56_Chi_TietDataTable
        Me.Tables.Add(Me.tableBan_Ke_CN56_Chi_Tiet)
        Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo = New E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoDataTable
        Me.Tables.Add(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo)
        Me.tableBan_Ke_A1_Noi_Bai = New Ban_Ke_A1_Noi_BaiDataTable
        Me.Tables.Add(Me.tableBan_Ke_A1_Noi_Bai)
        Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan = New Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanDataTable
        Me.Tables.Add(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan)
        Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu = New Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuDataTable
        Me.Tables.Add(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu)
        Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT = New Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTDataTable
        Me.Tables.Add(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT)
        Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT = New Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTDataTable
        Me.Tables.Add(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT)
    End Sub
    
    Private Function ShouldSerializeNuoc() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE2_Di_Ban_ke() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE2_Den_Ban_ke() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE2_Di_BC37() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE4() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeHoa_Don_GTGT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE2_Den_BC37() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTong_Ket() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTong_Ket_Chuyen_Thu() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSo_hieu_chuyen_thu() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE1_Chan() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE1_Le() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeChuyen_thu_di_despatch() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeChuyen_Thu_Di_Ban_Ke_Despatch() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE2_Di_Ban_Ke_Receptacle() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE2_Di_Ban_Ke_Receptacle_header() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE2_Den_Ban_Ke_KhaiThac_header() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE2_Ban_Ke_Chi_Tiet_Tui_F() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE2_Den_Ban_Ke_TK() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE2_Di_Ban_ke_khai_thac() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE2_Di_Ban_Ke_KhaiThac_header() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE1_Di_Bang_Ke_Hai_Quan() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeHai_Quan_Buu_Dien() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE2_Di_Despatch_3Col() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccounting() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccounting_Transit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeKe_Toan_QT_TH() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE1_San_Luong_QT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBan_Ke_CN55_Chi_Tiet() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBan_Ke_CN56_Chi_Tiet() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBan_Ke_A1_Noi_Bai() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub NuocRowChangeEventHandler(ByVal sender As Object, ByVal e As NuocRowChangeEvent)
    
    Public Delegate Sub E2_Di_Ban_keRowChangeEventHandler(ByVal sender As Object, ByVal e As E2_Di_Ban_keRowChangeEvent)
    
    Public Delegate Sub E2_Den_Ban_keRowChangeEventHandler(ByVal sender As Object, ByVal e As E2_Den_Ban_keRowChangeEvent)
    
    Public Delegate Sub E2_Di_BC37RowChangeEventHandler(ByVal sender As Object, ByVal e As E2_Di_BC37RowChangeEvent)
    
    Public Delegate Sub E4RowChangeEventHandler(ByVal sender As Object, ByVal e As E4RowChangeEvent)
    
    Public Delegate Sub E1RowChangeEventHandler(ByVal sender As Object, ByVal e As E1RowChangeEvent)
    
    Public Delegate Sub Hoa_Don_GTGTRowChangeEventHandler(ByVal sender As Object, ByVal e As Hoa_Don_GTGTRowChangeEvent)
    
    Public Delegate Sub E2_Den_BC37RowChangeEventHandler(ByVal sender As Object, ByVal e As E2_Den_BC37RowChangeEvent)
    
    Public Delegate Sub Tong_KetRowChangeEventHandler(ByVal sender As Object, ByVal e As Tong_KetRowChangeEvent)
    
    Public Delegate Sub Tong_Ket_Chuyen_ThuRowChangeEventHandler(ByVal sender As Object, ByVal e As Tong_Ket_Chuyen_ThuRowChangeEvent)
    
    Public Delegate Sub So_hieu_chuyen_thuRowChangeEventHandler(ByVal sender As Object, ByVal e As So_hieu_chuyen_thuRowChangeEvent)
    
    Public Delegate Sub E1_ChanRowChangeEventHandler(ByVal sender As Object, ByVal e As E1_ChanRowChangeEvent)
    
    Public Delegate Sub E1_LeRowChangeEventHandler(ByVal sender As Object, ByVal e As E1_LeRowChangeEvent)
    
    Public Delegate Sub Chuyen_thu_di_despatchRowChangeEventHandler(ByVal sender As Object, ByVal e As Chuyen_thu_di_despatchRowChangeEvent)
    
    Public Delegate Sub Chuyen_Thu_Di_Ban_Ke_DespatchRowChangeEventHandler(ByVal sender As Object, ByVal e As Chuyen_Thu_Di_Ban_Ke_DespatchRowChangeEvent)
    
    Public Delegate Sub E2_Di_Ban_Ke_ReceptacleRowChangeEventHandler(ByVal sender As Object, ByVal e As E2_Di_Ban_Ke_ReceptacleRowChangeEvent)
    
    Public Delegate Sub E2_Di_Ban_Ke_Receptacle_headerRowChangeEventHandler(ByVal sender As Object, ByVal e As E2_Di_Ban_Ke_Receptacle_headerRowChangeEvent)
    
    Public Delegate Sub E2_Den_Ban_Ke_KhaiThac_headerRowChangeEventHandler(ByVal sender As Object, ByVal e As E2_Den_Ban_Ke_KhaiThac_headerRowChangeEvent)
    
    Public Delegate Sub E2_Ban_Ke_Chi_Tiet_Tui_FRowChangeEventHandler(ByVal sender As Object, ByVal e As E2_Ban_Ke_Chi_Tiet_Tui_FRowChangeEvent)
    
    Public Delegate Sub E2_Den_Ban_Ke_TKRowChangeEventHandler(ByVal sender As Object, ByVal e As E2_Den_Ban_Ke_TKRowChangeEvent)
    
    Public Delegate Sub E2_Di_Ban_ke_khai_thacRowChangeEventHandler(ByVal sender As Object, ByVal e As E2_Di_Ban_ke_khai_thacRowChangeEvent)
    
    Public Delegate Sub E2_Di_Ban_Ke_KhaiThac_headerRowChangeEventHandler(ByVal sender As Object, ByVal e As E2_Di_Ban_Ke_KhaiThac_headerRowChangeEvent)
    
    Public Delegate Sub E1_Di_Bang_Ke_Hai_QuanRowChangeEventHandler(ByVal sender As Object, ByVal e As E1_Di_Bang_Ke_Hai_QuanRowChangeEvent)
    
    Public Delegate Sub Hai_Quan_Buu_DienRowChangeEventHandler(ByVal sender As Object, ByVal e As Hai_Quan_Buu_DienRowChangeEvent)
    
    Public Delegate Sub E2_Di_Despatch_3ColRowChangeEventHandler(ByVal sender As Object, ByVal e As E2_Di_Despatch_3ColRowChangeEvent)
    
    Public Delegate Sub AccountingRowChangeEventHandler(ByVal sender As Object, ByVal e As AccountingRowChangeEvent)
    
    Public Delegate Sub Accounting_TransitRowChangeEventHandler(ByVal sender As Object, ByVal e As Accounting_TransitRowChangeEvent)
    
    Public Delegate Sub Ke_Toan_QT_THRowChangeEventHandler(ByVal sender As Object, ByVal e As Ke_Toan_QT_THRowChangeEvent)
    
    Public Delegate Sub E1_San_Luong_QTRowChangeEventHandler(ByVal sender As Object, ByVal e As E1_San_Luong_QTRowChangeEvent)
    
    Public Delegate Sub E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangeEventHandler(ByVal sender As Object, ByVal e As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangeEvent)
    
    Public Delegate Sub Ban_Ke_CN55_Chi_TietRowChangeEventHandler(ByVal sender As Object, ByVal e As Ban_Ke_CN55_Chi_TietRowChangeEvent)
    
    Public Delegate Sub Ban_Ke_CN56_Chi_TietRowChangeEventHandler(ByVal sender As Object, ByVal e As Ban_Ke_CN56_Chi_TietRowChangeEvent)
    
    Public Delegate Sub E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangeEventHandler(ByVal sender As Object, ByVal e As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangeEvent)
    
    Public Delegate Sub Ban_Ke_A1_Noi_BaiRowChangeEventHandler(ByVal sender As Object, ByVal e As Ban_Ke_A1_Noi_BaiRowChangeEvent)
    
    Public Delegate Sub Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangeEventHandler(ByVal sender As Object, ByVal e As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangeEvent)
    
    Public Delegate Sub Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangeEventHandler(ByVal sender As Object, ByVal e As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangeEvent)
    
    Public Delegate Sub Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangeEventHandler(ByVal sender As Object, ByVal e As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangeEvent)
    
    Public Delegate Sub Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangeEventHandler(ByVal sender As Object, ByVal e As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NuocDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_Nuoc As DataColumn
        
        Private columnTen_Nuoc As DataColumn
        
        Private columnMa_Khu_Vuc As DataColumn
        
        Friend Sub New()
            MyBase.New("Nuoc")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_NuocColumn As DataColumn
            Get
                Return Me.columnMa_Nuoc
            End Get
        End Property
        
        Friend ReadOnly Property Ten_NuocColumn As DataColumn
            Get
                Return Me.columnTen_Nuoc
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Khu_VucColumn As DataColumn
            Get
                Return Me.columnMa_Khu_Vuc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NuocRow
            Get
                Return CType(Me.Rows(index),NuocRow)
            End Get
        End Property
        
        Public Event NuocRowChanged As NuocRowChangeEventHandler
        
        Public Event NuocRowChanging As NuocRowChangeEventHandler
        
        Public Event NuocRowDeleted As NuocRowChangeEventHandler
        
        Public Event NuocRowDeleting As NuocRowChangeEventHandler
        
        Public Overloads Sub AddNuocRow(ByVal row As NuocRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNuocRow(ByVal Ma_Nuoc As String, ByVal Ten_Nuoc As String, ByVal Ma_Khu_Vuc As String) As NuocRow
            Dim rowNuocRow As NuocRow = CType(Me.NewRow,NuocRow)
            rowNuocRow.ItemArray = New Object() {Ma_Nuoc, Ten_Nuoc, Ma_Khu_Vuc}
            Me.Rows.Add(rowNuocRow)
            Return rowNuocRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NuocDataTable = CType(MyBase.Clone,NuocDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NuocDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_Nuoc = Me.Columns("Ma_Nuoc")
            Me.columnTen_Nuoc = Me.Columns("Ten_Nuoc")
            Me.columnMa_Khu_Vuc = Me.Columns("Ma_Khu_Vuc")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_Nuoc = New DataColumn("Ma_Nuoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Nuoc)
            Me.columnTen_Nuoc = New DataColumn("Ten_Nuoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Nuoc)
            Me.columnMa_Khu_Vuc = New DataColumn("Ma_Khu_Vuc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Khu_Vuc)
        End Sub
        
        Public Function NewNuocRow() As NuocRow
            Return CType(Me.NewRow,NuocRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NuocRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NuocRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NuocRowChangedEvent) Is Nothing) Then
                RaiseEvent NuocRowChanged(Me, New NuocRowChangeEvent(CType(e.Row,NuocRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NuocRowChangingEvent) Is Nothing) Then
                RaiseEvent NuocRowChanging(Me, New NuocRowChangeEvent(CType(e.Row,NuocRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NuocRowDeletedEvent) Is Nothing) Then
                RaiseEvent NuocRowDeleted(Me, New NuocRowChangeEvent(CType(e.Row,NuocRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NuocRowDeletingEvent) Is Nothing) Then
                RaiseEvent NuocRowDeleting(Me, New NuocRowChangeEvent(CType(e.Row,NuocRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNuocRow(ByVal row As NuocRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NuocRow
        Inherits DataRow
        
        Private tableNuoc As NuocDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNuoc = CType(Me.Table,NuocDataTable)
        End Sub
        
        Public Property Ma_Nuoc As String
            Get
                Try 
                    Return CType(Me(Me.tableNuoc.Ma_NuocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNuoc.Ma_NuocColumn) = value
            End Set
        End Property
        
        Public Property Ten_Nuoc As String
            Get
                Try 
                    Return CType(Me(Me.tableNuoc.Ten_NuocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNuoc.Ten_NuocColumn) = value
            End Set
        End Property
        
        Public Property Ma_Khu_Vuc As String
            Get
                Try 
                    Return CType(Me(Me.tableNuoc.Ma_Khu_VucColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNuoc.Ma_Khu_VucColumn) = value
            End Set
        End Property
        
        Public Function IsMa_NuocNull() As Boolean
            Return Me.IsNull(Me.tableNuoc.Ma_NuocColumn)
        End Function
        
        Public Sub SetMa_NuocNull()
            Me(Me.tableNuoc.Ma_NuocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_NuocNull() As Boolean
            Return Me.IsNull(Me.tableNuoc.Ten_NuocColumn)
        End Function
        
        Public Sub SetTen_NuocNull()
            Me(Me.tableNuoc.Ten_NuocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Khu_VucNull() As Boolean
            Return Me.IsNull(Me.tableNuoc.Ma_Khu_VucColumn)
        End Function
        
        Public Sub SetMa_Khu_VucNull()
            Me(Me.tableNuoc.Ma_Khu_VucColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NuocRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NuocRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NuocRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NuocRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_keDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_E1 As DataColumn
        
        Private columnPhan_Loai As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnGia_Tri_Hang As DataColumn
        
        Private columnMa_Bc_Goc As DataColumn
        
        Private columnMa_Bc_Tra As DataColumn
        
        Private columnCUOC As DataColumn
        
        Private columnGhi_Chu As DataColumn
        
        Private columnId_E2 As DataColumn
        
        Private columnCUOC_NO As DataColumn
        
        Private columnSTT As DataColumn
        
        Private columnMa_Bc_CH As DataColumn
        
        Friend Sub New()
            MyBase.New("E2_Di_Ban_ke")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Phan_LoaiColumn As DataColumn
            Get
                Return Me.columnPhan_Loai
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Gia_Tri_HangColumn As DataColumn
            Get
                Return Me.columnGia_Tri_Hang
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_GocColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Goc
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_TraColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Tra
            End Get
        End Property
        
        Friend ReadOnly Property CUOCColumn As DataColumn
            Get
                Return Me.columnCUOC
            End Get
        End Property
        
        Friend ReadOnly Property Ghi_ChuColumn As DataColumn
            Get
                Return Me.columnGhi_Chu
            End Get
        End Property
        
        Friend ReadOnly Property Id_E2Column As DataColumn
            Get
                Return Me.columnId_E2
            End Get
        End Property
        
        Friend ReadOnly Property CUOC_NOColumn As DataColumn
            Get
                Return Me.columnCUOC_NO
            End Get
        End Property
        
        Friend ReadOnly Property STTColumn As DataColumn
            Get
                Return Me.columnSTT
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_CHColumn As DataColumn
            Get
                Return Me.columnMa_Bc_CH
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E2_Di_Ban_keRow
            Get
                Return CType(Me.Rows(index),E2_Di_Ban_keRow)
            End Get
        End Property
        
        Public Event E2_Di_Ban_keRowChanged As E2_Di_Ban_keRowChangeEventHandler
        
        Public Event E2_Di_Ban_keRowChanging As E2_Di_Ban_keRowChangeEventHandler
        
        Public Event E2_Di_Ban_keRowDeleted As E2_Di_Ban_keRowChangeEventHandler
        
        Public Event E2_Di_Ban_keRowDeleting As E2_Di_Ban_keRowChangeEventHandler
        
        Public Overloads Sub AddE2_Di_Ban_keRow(ByVal row As E2_Di_Ban_keRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE2_Di_Ban_keRow(ByVal Ma_E1 As String, ByVal Phan_Loai As String, ByVal Khoi_Luong As Integer, ByVal Gia_Tri_Hang As Integer, ByVal Ma_Bc_Goc As String, ByVal Ma_Bc_Tra As String, ByVal CUOC As Integer, ByVal Ghi_Chu As String, ByVal Id_E2 As String, ByVal CUOC_NO As Integer, ByVal STT As Integer, ByVal Ma_Bc_CH As Integer) As E2_Di_Ban_keRow
            Dim rowE2_Di_Ban_keRow As E2_Di_Ban_keRow = CType(Me.NewRow,E2_Di_Ban_keRow)
            rowE2_Di_Ban_keRow.ItemArray = New Object() {Ma_E1, Phan_Loai, Khoi_Luong, Gia_Tri_Hang, Ma_Bc_Goc, Ma_Bc_Tra, CUOC, Ghi_Chu, Id_E2, CUOC_NO, STT, Ma_Bc_CH}
            Me.Rows.Add(rowE2_Di_Ban_keRow)
            Return rowE2_Di_Ban_keRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E2_Di_Ban_keDataTable = CType(MyBase.Clone,E2_Di_Ban_keDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E2_Di_Ban_keDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnPhan_Loai = Me.Columns("Phan_Loai")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnGia_Tri_Hang = Me.Columns("Gia_Tri_Hang")
            Me.columnMa_Bc_Goc = Me.Columns("Ma_Bc_Goc")
            Me.columnMa_Bc_Tra = Me.Columns("Ma_Bc_Tra")
            Me.columnCUOC = Me.Columns("CUOC")
            Me.columnGhi_Chu = Me.Columns("Ghi_Chu")
            Me.columnId_E2 = Me.Columns("Id_E2")
            Me.columnCUOC_NO = Me.Columns("CUOC_NO")
            Me.columnSTT = Me.Columns("STT")
            Me.columnMa_Bc_CH = Me.Columns("Ma_Bc_CH")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnPhan_Loai = New DataColumn("Phan_Loai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhan_Loai)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnGia_Tri_Hang = New DataColumn("Gia_Tri_Hang", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGia_Tri_Hang)
            Me.columnMa_Bc_Goc = New DataColumn("Ma_Bc_Goc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Goc)
            Me.columnMa_Bc_Tra = New DataColumn("Ma_Bc_Tra", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Tra)
            Me.columnCUOC = New DataColumn("CUOC", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUOC)
            Me.columnGhi_Chu = New DataColumn("Ghi_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGhi_Chu)
            Me.columnId_E2 = New DataColumn("Id_E2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_E2)
            Me.columnCUOC_NO = New DataColumn("CUOC_NO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUOC_NO)
            Me.columnSTT = New DataColumn("STT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT)
            Me.columnMa_Bc_CH = New DataColumn("Ma_Bc_CH", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_CH)
        End Sub
        
        Public Function NewE2_Di_Ban_keRow() As E2_Di_Ban_keRow
            Return CType(Me.NewRow,E2_Di_Ban_keRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E2_Di_Ban_keRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E2_Di_Ban_keRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E2_Di_Ban_keRowChangedEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_keRowChanged(Me, New E2_Di_Ban_keRowChangeEvent(CType(e.Row,E2_Di_Ban_keRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E2_Di_Ban_keRowChangingEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_keRowChanging(Me, New E2_Di_Ban_keRowChangeEvent(CType(e.Row,E2_Di_Ban_keRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E2_Di_Ban_keRowDeletedEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_keRowDeleted(Me, New E2_Di_Ban_keRowChangeEvent(CType(e.Row,E2_Di_Ban_keRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E2_Di_Ban_keRowDeletingEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_keRowDeleting(Me, New E2_Di_Ban_keRowChangeEvent(CType(e.Row,E2_Di_Ban_keRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE2_Di_Ban_keRow(ByVal row As E2_Di_Ban_keRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_keRow
        Inherits DataRow
        
        Private tableE2_Di_Ban_ke As E2_Di_Ban_keDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE2_Di_Ban_ke = CType(Me.Table,E2_Di_Ban_keDataTable)
        End Sub
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Phan_Loai As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke.Phan_LoaiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke.Phan_LoaiColumn) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke.Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Gia_Tri_Hang As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke.Gia_Tri_HangColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke.Gia_Tri_HangColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Goc As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke.Ma_Bc_GocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke.Ma_Bc_GocColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Tra As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke.Ma_Bc_TraColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke.Ma_Bc_TraColumn) = value
            End Set
        End Property
        
        Public Property CUOC As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke.CUOCColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke.CUOCColumn) = value
            End Set
        End Property
        
        Public Property Ghi_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke.Ghi_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke.Ghi_ChuColumn) = value
            End Set
        End Property
        
        Public Property Id_E2 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke.Id_E2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke.Id_E2Column) = value
            End Set
        End Property
        
        Public Property CUOC_NO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke.CUOC_NOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke.CUOC_NOColumn) = value
            End Set
        End Property
        
        Public Property STT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke.STTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke.STTColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_CH As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke.Ma_Bc_CHColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke.Ma_Bc_CHColumn) = value
            End Set
        End Property
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableE2_Di_Ban_ke.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhan_LoaiNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke.Phan_LoaiColumn)
        End Function
        
        Public Sub SetPhan_LoaiNull()
            Me(Me.tableE2_Di_Ban_ke.Phan_LoaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableE2_Di_Ban_ke.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGia_Tri_HangNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke.Gia_Tri_HangColumn)
        End Function
        
        Public Sub SetGia_Tri_HangNull()
            Me(Me.tableE2_Di_Ban_ke.Gia_Tri_HangColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_GocNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke.Ma_Bc_GocColumn)
        End Function
        
        Public Sub SetMa_Bc_GocNull()
            Me(Me.tableE2_Di_Ban_ke.Ma_Bc_GocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_TraNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke.Ma_Bc_TraColumn)
        End Function
        
        Public Sub SetMa_Bc_TraNull()
            Me(Me.tableE2_Di_Ban_ke.Ma_Bc_TraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUOCNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke.CUOCColumn)
        End Function
        
        Public Sub SetCUOCNull()
            Me(Me.tableE2_Di_Ban_ke.CUOCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGhi_ChuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke.Ghi_ChuColumn)
        End Function
        
        Public Sub SetGhi_ChuNull()
            Me(Me.tableE2_Di_Ban_ke.Ghi_ChuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_E2Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke.Id_E2Column)
        End Function
        
        Public Sub SetId_E2Null()
            Me(Me.tableE2_Di_Ban_ke.Id_E2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUOC_NONull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke.CUOC_NOColumn)
        End Function
        
        Public Sub SetCUOC_NONull()
            Me(Me.tableE2_Di_Ban_ke.CUOC_NOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTTNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke.STTColumn)
        End Function
        
        Public Sub SetSTTNull()
            Me(Me.tableE2_Di_Ban_ke.STTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_CHNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke.Ma_Bc_CHColumn)
        End Function
        
        Public Sub SetMa_Bc_CHNull()
            Me(Me.tableE2_Di_Ban_ke.Ma_Bc_CHColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_keRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E2_Di_Ban_keRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E2_Di_Ban_keRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E2_Di_Ban_keRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Den_Ban_keDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_E1 As DataColumn
        
        Private columnPhan_Loai As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnGia_Tri_Hang As DataColumn
        
        Private columnMa_Bc_Goc As DataColumn
        
        Private columnMa_Bc_Tra As DataColumn
        
        Private columnCUOC As DataColumn
        
        Private columnGhi_Chu As DataColumn
        
        Private columnId_E2 As DataColumn
        
        Friend Sub New()
            MyBase.New("E2_Den_Ban_ke")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Phan_LoaiColumn As DataColumn
            Get
                Return Me.columnPhan_Loai
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Gia_Tri_HangColumn As DataColumn
            Get
                Return Me.columnGia_Tri_Hang
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_GocColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Goc
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_TraColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Tra
            End Get
        End Property
        
        Friend ReadOnly Property CUOCColumn As DataColumn
            Get
                Return Me.columnCUOC
            End Get
        End Property
        
        Friend ReadOnly Property Ghi_ChuColumn As DataColumn
            Get
                Return Me.columnGhi_Chu
            End Get
        End Property
        
        Friend ReadOnly Property Id_E2Column As DataColumn
            Get
                Return Me.columnId_E2
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E2_Den_Ban_keRow
            Get
                Return CType(Me.Rows(index),E2_Den_Ban_keRow)
            End Get
        End Property
        
        Public Event E2_Den_Ban_keRowChanged As E2_Den_Ban_keRowChangeEventHandler
        
        Public Event E2_Den_Ban_keRowChanging As E2_Den_Ban_keRowChangeEventHandler
        
        Public Event E2_Den_Ban_keRowDeleted As E2_Den_Ban_keRowChangeEventHandler
        
        Public Event E2_Den_Ban_keRowDeleting As E2_Den_Ban_keRowChangeEventHandler
        
        Public Overloads Sub AddE2_Den_Ban_keRow(ByVal row As E2_Den_Ban_keRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE2_Den_Ban_keRow(ByVal Ma_E1 As String, ByVal Phan_Loai As String, ByVal Khoi_Luong As Integer, ByVal Gia_Tri_Hang As Integer, ByVal Ma_Bc_Goc As String, ByVal Ma_Bc_Tra As String, ByVal CUOC As Integer, ByVal Ghi_Chu As String, ByVal Id_E2 As String) As E2_Den_Ban_keRow
            Dim rowE2_Den_Ban_keRow As E2_Den_Ban_keRow = CType(Me.NewRow,E2_Den_Ban_keRow)
            rowE2_Den_Ban_keRow.ItemArray = New Object() {Ma_E1, Phan_Loai, Khoi_Luong, Gia_Tri_Hang, Ma_Bc_Goc, Ma_Bc_Tra, CUOC, Ghi_Chu, Id_E2}
            Me.Rows.Add(rowE2_Den_Ban_keRow)
            Return rowE2_Den_Ban_keRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E2_Den_Ban_keDataTable = CType(MyBase.Clone,E2_Den_Ban_keDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E2_Den_Ban_keDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnPhan_Loai = Me.Columns("Phan_Loai")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnGia_Tri_Hang = Me.Columns("Gia_Tri_Hang")
            Me.columnMa_Bc_Goc = Me.Columns("Ma_Bc_Goc")
            Me.columnMa_Bc_Tra = Me.Columns("Ma_Bc_Tra")
            Me.columnCUOC = Me.Columns("CUOC")
            Me.columnGhi_Chu = Me.Columns("Ghi_Chu")
            Me.columnId_E2 = Me.Columns("Id_E2")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnPhan_Loai = New DataColumn("Phan_Loai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhan_Loai)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnGia_Tri_Hang = New DataColumn("Gia_Tri_Hang", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGia_Tri_Hang)
            Me.columnMa_Bc_Goc = New DataColumn("Ma_Bc_Goc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Goc)
            Me.columnMa_Bc_Tra = New DataColumn("Ma_Bc_Tra", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Tra)
            Me.columnCUOC = New DataColumn("CUOC", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUOC)
            Me.columnGhi_Chu = New DataColumn("Ghi_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGhi_Chu)
            Me.columnId_E2 = New DataColumn("Id_E2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_E2)
        End Sub
        
        Public Function NewE2_Den_Ban_keRow() As E2_Den_Ban_keRow
            Return CType(Me.NewRow,E2_Den_Ban_keRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E2_Den_Ban_keRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E2_Den_Ban_keRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E2_Den_Ban_keRowChangedEvent) Is Nothing) Then
                RaiseEvent E2_Den_Ban_keRowChanged(Me, New E2_Den_Ban_keRowChangeEvent(CType(e.Row,E2_Den_Ban_keRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E2_Den_Ban_keRowChangingEvent) Is Nothing) Then
                RaiseEvent E2_Den_Ban_keRowChanging(Me, New E2_Den_Ban_keRowChangeEvent(CType(e.Row,E2_Den_Ban_keRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E2_Den_Ban_keRowDeletedEvent) Is Nothing) Then
                RaiseEvent E2_Den_Ban_keRowDeleted(Me, New E2_Den_Ban_keRowChangeEvent(CType(e.Row,E2_Den_Ban_keRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E2_Den_Ban_keRowDeletingEvent) Is Nothing) Then
                RaiseEvent E2_Den_Ban_keRowDeleting(Me, New E2_Den_Ban_keRowChangeEvent(CType(e.Row,E2_Den_Ban_keRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE2_Den_Ban_keRow(ByVal row As E2_Den_Ban_keRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Den_Ban_keRow
        Inherits DataRow
        
        Private tableE2_Den_Ban_ke As E2_Den_Ban_keDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE2_Den_Ban_ke = CType(Me.Table,E2_Den_Ban_keDataTable)
        End Sub
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_ke.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_ke.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Phan_Loai As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_ke.Phan_LoaiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_ke.Phan_LoaiColumn) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_ke.Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_ke.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Gia_Tri_Hang As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_ke.Gia_Tri_HangColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_ke.Gia_Tri_HangColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Goc As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_ke.Ma_Bc_GocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_ke.Ma_Bc_GocColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Tra As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_ke.Ma_Bc_TraColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_ke.Ma_Bc_TraColumn) = value
            End Set
        End Property
        
        Public Property CUOC As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_ke.CUOCColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_ke.CUOCColumn) = value
            End Set
        End Property
        
        Public Property Ghi_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_ke.Ghi_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_ke.Ghi_ChuColumn) = value
            End Set
        End Property
        
        Public Property Id_E2 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_ke.Id_E2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_ke.Id_E2Column) = value
            End Set
        End Property
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_ke.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableE2_Den_Ban_ke.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhan_LoaiNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_ke.Phan_LoaiColumn)
        End Function
        
        Public Sub SetPhan_LoaiNull()
            Me(Me.tableE2_Den_Ban_ke.Phan_LoaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_ke.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableE2_Den_Ban_ke.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGia_Tri_HangNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_ke.Gia_Tri_HangColumn)
        End Function
        
        Public Sub SetGia_Tri_HangNull()
            Me(Me.tableE2_Den_Ban_ke.Gia_Tri_HangColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_GocNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_ke.Ma_Bc_GocColumn)
        End Function
        
        Public Sub SetMa_Bc_GocNull()
            Me(Me.tableE2_Den_Ban_ke.Ma_Bc_GocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_TraNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_ke.Ma_Bc_TraColumn)
        End Function
        
        Public Sub SetMa_Bc_TraNull()
            Me(Me.tableE2_Den_Ban_ke.Ma_Bc_TraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUOCNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_ke.CUOCColumn)
        End Function
        
        Public Sub SetCUOCNull()
            Me(Me.tableE2_Den_Ban_ke.CUOCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGhi_ChuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_ke.Ghi_ChuColumn)
        End Function
        
        Public Sub SetGhi_ChuNull()
            Me(Me.tableE2_Den_Ban_ke.Ghi_ChuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_E2Null() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_ke.Id_E2Column)
        End Function
        
        Public Sub SetId_E2Null()
            Me(Me.tableE2_Den_Ban_ke.Id_E2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Den_Ban_keRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E2_Den_Ban_keRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E2_Den_Ban_keRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E2_Den_Ban_keRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_BC37DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSochuyenthu As DataColumn
        
        Private columnMa_Bc_Khai_Thac As DataColumn
        
        Private columnDuongthu As DataColumn
        
        Private columnTui_So As DataColumn
        
        Private columnTong_So_BP As DataColumn
        
        Private columnKhoiLuong As DataColumn
        
        Private columnTui_F As DataColumn
        
        Private columnTenBCgui As DataColumn
        
        Private columnTenBCnhan As DataColumn
        
        Friend Sub New()
            MyBase.New("E2_Di_BC37")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SochuyenthuColumn As DataColumn
            Get
                Return Me.columnSochuyenthu
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_Khai_ThacColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Khai_Thac
            End Get
        End Property
        
        Friend ReadOnly Property DuongthuColumn As DataColumn
            Get
                Return Me.columnDuongthu
            End Get
        End Property
        
        Friend ReadOnly Property Tui_SoColumn As DataColumn
            Get
                Return Me.columnTui_So
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_BPColumn As DataColumn
            Get
                Return Me.columnTong_So_BP
            End Get
        End Property
        
        Friend ReadOnly Property KhoiLuongColumn As DataColumn
            Get
                Return Me.columnKhoiLuong
            End Get
        End Property
        
        Friend ReadOnly Property Tui_FColumn As DataColumn
            Get
                Return Me.columnTui_F
            End Get
        End Property
        
        Friend ReadOnly Property TenBCguiColumn As DataColumn
            Get
                Return Me.columnTenBCgui
            End Get
        End Property
        
        Friend ReadOnly Property TenBCnhanColumn As DataColumn
            Get
                Return Me.columnTenBCnhan
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E2_Di_BC37Row
            Get
                Return CType(Me.Rows(index),E2_Di_BC37Row)
            End Get
        End Property
        
        Public Event E2_Di_BC37RowChanged As E2_Di_BC37RowChangeEventHandler
        
        Public Event E2_Di_BC37RowChanging As E2_Di_BC37RowChangeEventHandler
        
        Public Event E2_Di_BC37RowDeleted As E2_Di_BC37RowChangeEventHandler
        
        Public Event E2_Di_BC37RowDeleting As E2_Di_BC37RowChangeEventHandler
        
        Public Overloads Sub AddE2_Di_BC37Row(ByVal row As E2_Di_BC37Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE2_Di_BC37Row(ByVal Sochuyenthu As Integer, ByVal Ma_Bc_Khai_Thac As Integer, ByVal Duongthu As String, ByVal Tui_So As Integer, ByVal Tong_So_BP As Integer, ByVal KhoiLuong As Integer, ByVal Tui_F As Integer, ByVal TenBCgui As String, ByVal TenBCnhan As String) As E2_Di_BC37Row
            Dim rowE2_Di_BC37Row As E2_Di_BC37Row = CType(Me.NewRow,E2_Di_BC37Row)
            rowE2_Di_BC37Row.ItemArray = New Object() {Sochuyenthu, Ma_Bc_Khai_Thac, Duongthu, Tui_So, Tong_So_BP, KhoiLuong, Tui_F, TenBCgui, TenBCnhan}
            Me.Rows.Add(rowE2_Di_BC37Row)
            Return rowE2_Di_BC37Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E2_Di_BC37DataTable = CType(MyBase.Clone,E2_Di_BC37DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E2_Di_BC37DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSochuyenthu = Me.Columns("Sochuyenthu")
            Me.columnMa_Bc_Khai_Thac = Me.Columns("Ma_Bc_Khai_Thac")
            Me.columnDuongthu = Me.Columns("Duongthu")
            Me.columnTui_So = Me.Columns("Tui_So")
            Me.columnTong_So_BP = Me.Columns("Tong_So_BP")
            Me.columnKhoiLuong = Me.Columns("KhoiLuong")
            Me.columnTui_F = Me.Columns("Tui_F")
            Me.columnTenBCgui = Me.Columns("TenBCgui")
            Me.columnTenBCnhan = Me.Columns("TenBCnhan")
        End Sub
        
        Private Sub InitClass()
            Me.columnSochuyenthu = New DataColumn("Sochuyenthu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSochuyenthu)
            Me.columnMa_Bc_Khai_Thac = New DataColumn("Ma_Bc_Khai_Thac", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Khai_Thac)
            Me.columnDuongthu = New DataColumn("Duongthu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDuongthu)
            Me.columnTui_So = New DataColumn("Tui_So", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So)
            Me.columnTong_So_BP = New DataColumn("Tong_So_BP", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_BP)
            Me.columnKhoiLuong = New DataColumn("KhoiLuong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoiLuong)
            Me.columnTui_F = New DataColumn("Tui_F", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_F)
            Me.columnTenBCgui = New DataColumn("TenBCgui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTenBCgui)
            Me.columnTenBCnhan = New DataColumn("TenBCnhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTenBCnhan)
            Me.columnTenBCgui.AllowDBNull = false
        End Sub
        
        Public Function NewE2_Di_BC37Row() As E2_Di_BC37Row
            Return CType(Me.NewRow,E2_Di_BC37Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E2_Di_BC37Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E2_Di_BC37Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E2_Di_BC37RowChangedEvent) Is Nothing) Then
                RaiseEvent E2_Di_BC37RowChanged(Me, New E2_Di_BC37RowChangeEvent(CType(e.Row,E2_Di_BC37Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E2_Di_BC37RowChangingEvent) Is Nothing) Then
                RaiseEvent E2_Di_BC37RowChanging(Me, New E2_Di_BC37RowChangeEvent(CType(e.Row,E2_Di_BC37Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E2_Di_BC37RowDeletedEvent) Is Nothing) Then
                RaiseEvent E2_Di_BC37RowDeleted(Me, New E2_Di_BC37RowChangeEvent(CType(e.Row,E2_Di_BC37Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E2_Di_BC37RowDeletingEvent) Is Nothing) Then
                RaiseEvent E2_Di_BC37RowDeleting(Me, New E2_Di_BC37RowChangeEvent(CType(e.Row,E2_Di_BC37Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE2_Di_BC37Row(ByVal row As E2_Di_BC37Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_BC37Row
        Inherits DataRow
        
        Private tableE2_Di_BC37 As E2_Di_BC37DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE2_Di_BC37 = CType(Me.Table,E2_Di_BC37DataTable)
        End Sub
        
        Public Property Sochuyenthu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_BC37.SochuyenthuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_BC37.SochuyenthuColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Khai_Thac As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_BC37.Ma_Bc_Khai_ThacColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_BC37.Ma_Bc_Khai_ThacColumn) = value
            End Set
        End Property
        
        Public Property Duongthu As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_BC37.DuongthuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_BC37.DuongthuColumn) = value
            End Set
        End Property
        
        Public Property Tui_So As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_BC37.Tui_SoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_BC37.Tui_SoColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_BP As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_BC37.Tong_So_BPColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_BC37.Tong_So_BPColumn) = value
            End Set
        End Property
        
        Public Property KhoiLuong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_BC37.KhoiLuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_BC37.KhoiLuongColumn) = value
            End Set
        End Property
        
        Public Property Tui_F As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_BC37.Tui_FColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_BC37.Tui_FColumn) = value
            End Set
        End Property
        
        Public Property TenBCgui As String
            Get
                Return CType(Me(Me.tableE2_Di_BC37.TenBCguiColumn),String)
            End Get
            Set
                Me(Me.tableE2_Di_BC37.TenBCguiColumn) = value
            End Set
        End Property
        
        Public Property TenBCnhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_BC37.TenBCnhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_BC37.TenBCnhanColumn) = value
            End Set
        End Property
        
        Public Function IsSochuyenthuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_BC37.SochuyenthuColumn)
        End Function
        
        Public Sub SetSochuyenthuNull()
            Me(Me.tableE2_Di_BC37.SochuyenthuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_Khai_ThacNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_BC37.Ma_Bc_Khai_ThacColumn)
        End Function
        
        Public Sub SetMa_Bc_Khai_ThacNull()
            Me(Me.tableE2_Di_BC37.Ma_Bc_Khai_ThacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDuongthuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_BC37.DuongthuColumn)
        End Function
        
        Public Sub SetDuongthuNull()
            Me(Me.tableE2_Di_BC37.DuongthuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_SoNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_BC37.Tui_SoColumn)
        End Function
        
        Public Sub SetTui_SoNull()
            Me(Me.tableE2_Di_BC37.Tui_SoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_BPNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_BC37.Tong_So_BPColumn)
        End Function
        
        Public Sub SetTong_So_BPNull()
            Me(Me.tableE2_Di_BC37.Tong_So_BPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoiLuongNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_BC37.KhoiLuongColumn)
        End Function
        
        Public Sub SetKhoiLuongNull()
            Me(Me.tableE2_Di_BC37.KhoiLuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_FNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_BC37.Tui_FColumn)
        End Function
        
        Public Sub SetTui_FNull()
            Me(Me.tableE2_Di_BC37.Tui_FColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTenBCnhanNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_BC37.TenBCnhanColumn)
        End Function
        
        Public Sub SetTenBCnhanNull()
            Me(Me.tableE2_Di_BC37.TenBCnhanColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_BC37RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E2_Di_BC37Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E2_Di_BC37Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E2_Di_BC37Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E4DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnChuyenthu As DataColumn
        
        Private columnMa_Bc_Khai_Thac As DataColumn
        
        Private columnDuongthu As DataColumn
        
        Private columnTui_So As DataColumn
        
        Private columnTong_So_BP As DataColumn
        
        Private columnKhoiLuong As DataColumn
        
        Private columnTui_F As DataColumn
        
        Friend Sub New()
            MyBase.New("E4")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ChuyenthuColumn As DataColumn
            Get
                Return Me.columnChuyenthu
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_Khai_ThacColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Khai_Thac
            End Get
        End Property
        
        Friend ReadOnly Property DuongthuColumn As DataColumn
            Get
                Return Me.columnDuongthu
            End Get
        End Property
        
        Friend ReadOnly Property Tui_SoColumn As DataColumn
            Get
                Return Me.columnTui_So
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_BPColumn As DataColumn
            Get
                Return Me.columnTong_So_BP
            End Get
        End Property
        
        Friend ReadOnly Property KhoiLuongColumn As DataColumn
            Get
                Return Me.columnKhoiLuong
            End Get
        End Property
        
        Friend ReadOnly Property Tui_FColumn As DataColumn
            Get
                Return Me.columnTui_F
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E4Row
            Get
                Return CType(Me.Rows(index),E4Row)
            End Get
        End Property
        
        Public Event E4RowChanged As E4RowChangeEventHandler
        
        Public Event E4RowChanging As E4RowChangeEventHandler
        
        Public Event E4RowDeleted As E4RowChangeEventHandler
        
        Public Event E4RowDeleting As E4RowChangeEventHandler
        
        Public Overloads Sub AddE4Row(ByVal row As E4Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE4Row(ByVal Chuyenthu As Integer, ByVal Ma_Bc_Khai_Thac As Integer, ByVal Duongthu As String, ByVal Tui_So As Integer, ByVal Tong_So_BP As Integer, ByVal KhoiLuong As Integer, ByVal Tui_F As Integer) As E4Row
            Dim rowE4Row As E4Row = CType(Me.NewRow,E4Row)
            rowE4Row.ItemArray = New Object() {Chuyenthu, Ma_Bc_Khai_Thac, Duongthu, Tui_So, Tong_So_BP, KhoiLuong, Tui_F}
            Me.Rows.Add(rowE4Row)
            Return rowE4Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E4DataTable = CType(MyBase.Clone,E4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E4DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnChuyenthu = Me.Columns("Chuyenthu")
            Me.columnMa_Bc_Khai_Thac = Me.Columns("Ma_Bc_Khai_Thac")
            Me.columnDuongthu = Me.Columns("Duongthu")
            Me.columnTui_So = Me.Columns("Tui_So")
            Me.columnTong_So_BP = Me.Columns("Tong_So_BP")
            Me.columnKhoiLuong = Me.Columns("KhoiLuong")
            Me.columnTui_F = Me.Columns("Tui_F")
        End Sub
        
        Private Sub InitClass()
            Me.columnChuyenthu = New DataColumn("Chuyenthu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChuyenthu)
            Me.columnMa_Bc_Khai_Thac = New DataColumn("Ma_Bc_Khai_Thac", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Khai_Thac)
            Me.columnDuongthu = New DataColumn("Duongthu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDuongthu)
            Me.columnTui_So = New DataColumn("Tui_So", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So)
            Me.columnTong_So_BP = New DataColumn("Tong_So_BP", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_BP)
            Me.columnKhoiLuong = New DataColumn("KhoiLuong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoiLuong)
            Me.columnTui_F = New DataColumn("Tui_F", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_F)
        End Sub
        
        Public Function NewE4Row() As E4Row
            Return CType(Me.NewRow,E4Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E4Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E4Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E4RowChangedEvent) Is Nothing) Then
                RaiseEvent E4RowChanged(Me, New E4RowChangeEvent(CType(e.Row,E4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E4RowChangingEvent) Is Nothing) Then
                RaiseEvent E4RowChanging(Me, New E4RowChangeEvent(CType(e.Row,E4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E4RowDeletedEvent) Is Nothing) Then
                RaiseEvent E4RowDeleted(Me, New E4RowChangeEvent(CType(e.Row,E4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E4RowDeletingEvent) Is Nothing) Then
                RaiseEvent E4RowDeleting(Me, New E4RowChangeEvent(CType(e.Row,E4Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE4Row(ByVal row As E4Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E4Row
        Inherits DataRow
        
        Private tableE4 As E4DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE4 = CType(Me.Table,E4DataTable)
        End Sub
        
        Public Property Chuyenthu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE4.ChuyenthuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE4.ChuyenthuColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Khai_Thac As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE4.Ma_Bc_Khai_ThacColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE4.Ma_Bc_Khai_ThacColumn) = value
            End Set
        End Property
        
        Public Property Duongthu As String
            Get
                Try 
                    Return CType(Me(Me.tableE4.DuongthuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE4.DuongthuColumn) = value
            End Set
        End Property
        
        Public Property Tui_So As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE4.Tui_SoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE4.Tui_SoColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_BP As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE4.Tong_So_BPColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE4.Tong_So_BPColumn) = value
            End Set
        End Property
        
        Public Property KhoiLuong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE4.KhoiLuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE4.KhoiLuongColumn) = value
            End Set
        End Property
        
        Public Property Tui_F As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE4.Tui_FColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE4.Tui_FColumn) = value
            End Set
        End Property
        
        Public Function IsChuyenthuNull() As Boolean
            Return Me.IsNull(Me.tableE4.ChuyenthuColumn)
        End Function
        
        Public Sub SetChuyenthuNull()
            Me(Me.tableE4.ChuyenthuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_Khai_ThacNull() As Boolean
            Return Me.IsNull(Me.tableE4.Ma_Bc_Khai_ThacColumn)
        End Function
        
        Public Sub SetMa_Bc_Khai_ThacNull()
            Me(Me.tableE4.Ma_Bc_Khai_ThacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDuongthuNull() As Boolean
            Return Me.IsNull(Me.tableE4.DuongthuColumn)
        End Function
        
        Public Sub SetDuongthuNull()
            Me(Me.tableE4.DuongthuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_SoNull() As Boolean
            Return Me.IsNull(Me.tableE4.Tui_SoColumn)
        End Function
        
        Public Sub SetTui_SoNull()
            Me(Me.tableE4.Tui_SoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_BPNull() As Boolean
            Return Me.IsNull(Me.tableE4.Tong_So_BPColumn)
        End Function
        
        Public Sub SetTong_So_BPNull()
            Me(Me.tableE4.Tong_So_BPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoiLuongNull() As Boolean
            Return Me.IsNull(Me.tableE4.KhoiLuongColumn)
        End Function
        
        Public Sub SetKhoiLuongNull()
            Me(Me.tableE4.KhoiLuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_FNull() As Boolean
            Return Me.IsNull(Me.tableE4.Tui_FColumn)
        End Function
        
        Public Sub SetTui_FNull()
            Me(Me.tableE4.Tui_FColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E4RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E4Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E4Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnguoi_gui As DataColumn
        
        Private columndia_chi_gui As DataColumn
        
        Private columndien_thoai_gui As DataColumn
        
        Private columnD As DataColumn
        
        Private columnM As DataColumn
        
        Private columnCH As DataColumn
        
        Private columnGio_Phat_Hanh As DataColumn
        
        Private columnNgay_Phat_Hanh As DataColumn
        
        Private columnnguoi_nhan As DataColumn
        
        Private columndia_chi_nhan As DataColumn
        
        Private columndien_thoai_nhan As DataColumn
        
        Private columnkhoi_luong As DataColumn
        
        Private columnkhoi_luong_qd As DataColumn
        
        Private columncuoc_chinh As DataColumn
        
        Private columndv_cong_them As DataColumn
        
        Private columndv_gia_tang As DataColumn
        
        Private columncuoc_dv As DataColumn
        
        Private columnvat As DataColumn
        
        Private columncuoc_e1 As DataColumn
        
        Private columnPostCode As DataColumn
        
        Friend Sub New()
            MyBase.New("E1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property nguoi_guiColumn As DataColumn
            Get
                Return Me.columnnguoi_gui
            End Get
        End Property
        
        Friend ReadOnly Property dia_chi_guiColumn As DataColumn
            Get
                Return Me.columndia_chi_gui
            End Get
        End Property
        
        Friend ReadOnly Property dien_thoai_guiColumn As DataColumn
            Get
                Return Me.columndien_thoai_gui
            End Get
        End Property
        
        Friend ReadOnly Property DColumn As DataColumn
            Get
                Return Me.columnD
            End Get
        End Property
        
        Friend ReadOnly Property MColumn As DataColumn
            Get
                Return Me.columnM
            End Get
        End Property
        
        Friend ReadOnly Property CHColumn As DataColumn
            Get
                Return Me.columnCH
            End Get
        End Property
        
        Friend ReadOnly Property Gio_Phat_HanhColumn As DataColumn
            Get
                Return Me.columnGio_Phat_Hanh
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_Phat_HanhColumn As DataColumn
            Get
                Return Me.columnNgay_Phat_Hanh
            End Get
        End Property
        
        Friend ReadOnly Property nguoi_nhanColumn As DataColumn
            Get
                Return Me.columnnguoi_nhan
            End Get
        End Property
        
        Friend ReadOnly Property dia_chi_nhanColumn As DataColumn
            Get
                Return Me.columndia_chi_nhan
            End Get
        End Property
        
        Friend ReadOnly Property dien_thoai_nhanColumn As DataColumn
            Get
                Return Me.columndien_thoai_nhan
            End Get
        End Property
        
        Friend ReadOnly Property khoi_luongColumn As DataColumn
            Get
                Return Me.columnkhoi_luong
            End Get
        End Property
        
        Friend ReadOnly Property khoi_luong_qdColumn As DataColumn
            Get
                Return Me.columnkhoi_luong_qd
            End Get
        End Property
        
        Friend ReadOnly Property cuoc_chinhColumn As DataColumn
            Get
                Return Me.columncuoc_chinh
            End Get
        End Property
        
        Friend ReadOnly Property dv_cong_themColumn As DataColumn
            Get
                Return Me.columndv_cong_them
            End Get
        End Property
        
        Friend ReadOnly Property dv_gia_tangColumn As DataColumn
            Get
                Return Me.columndv_gia_tang
            End Get
        End Property
        
        Friend ReadOnly Property cuoc_dvColumn As DataColumn
            Get
                Return Me.columncuoc_dv
            End Get
        End Property
        
        Friend ReadOnly Property vatColumn As DataColumn
            Get
                Return Me.columnvat
            End Get
        End Property
        
        Friend ReadOnly Property cuoc_e1Column As DataColumn
            Get
                Return Me.columncuoc_e1
            End Get
        End Property
        
        Friend ReadOnly Property PostCodeColumn As DataColumn
            Get
                Return Me.columnPostCode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E1Row
            Get
                Return CType(Me.Rows(index),E1Row)
            End Get
        End Property
        
        Public Event E1RowChanged As E1RowChangeEventHandler
        
        Public Event E1RowChanging As E1RowChangeEventHandler
        
        Public Event E1RowDeleted As E1RowChangeEventHandler
        
        Public Event E1RowDeleting As E1RowChangeEventHandler
        
        Public Overloads Sub AddE1Row(ByVal row As E1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE1Row( _
                    ByVal nguoi_gui As String,  _
                    ByVal dia_chi_gui As String,  _
                    ByVal dien_thoai_gui As String,  _
                    ByVal D As String,  _
                    ByVal M As String,  _
                    ByVal CH As String,  _
                    ByVal Gio_Phat_Hanh As String,  _
                    ByVal Ngay_Phat_Hanh As Date,  _
                    ByVal nguoi_nhan As String,  _
                    ByVal dia_chi_nhan As String,  _
                    ByVal dien_thoai_nhan As String,  _
                    ByVal khoi_luong As Integer,  _
                    ByVal khoi_luong_qd As Integer,  _
                    ByVal cuoc_chinh As Integer,  _
                    ByVal dv_cong_them As Integer,  _
                    ByVal dv_gia_tang As Integer,  _
                    ByVal cuoc_dv As Integer,  _
                    ByVal vat As Single,  _
                    ByVal cuoc_e1 As Integer,  _
                    ByVal PostCode As String) As E1Row
            Dim rowE1Row As E1Row = CType(Me.NewRow,E1Row)
            rowE1Row.ItemArray = New Object() {nguoi_gui, dia_chi_gui, dien_thoai_gui, D, M, CH, Gio_Phat_Hanh, Ngay_Phat_Hanh, nguoi_nhan, dia_chi_nhan, dien_thoai_nhan, khoi_luong, khoi_luong_qd, cuoc_chinh, dv_cong_them, dv_gia_tang, cuoc_dv, vat, cuoc_e1, PostCode}
            Me.Rows.Add(rowE1Row)
            Return rowE1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E1DataTable = CType(MyBase.Clone,E1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnnguoi_gui = Me.Columns("nguoi_gui")
            Me.columndia_chi_gui = Me.Columns("dia_chi_gui")
            Me.columndien_thoai_gui = Me.Columns("dien_thoai_gui")
            Me.columnD = Me.Columns("D")
            Me.columnM = Me.Columns("M")
            Me.columnCH = Me.Columns("CH")
            Me.columnGio_Phat_Hanh = Me.Columns("Gio_Phat_Hanh")
            Me.columnNgay_Phat_Hanh = Me.Columns("Ngay_Phat_Hanh")
            Me.columnnguoi_nhan = Me.Columns("nguoi_nhan")
            Me.columndia_chi_nhan = Me.Columns("dia_chi_nhan")
            Me.columndien_thoai_nhan = Me.Columns("dien_thoai_nhan")
            Me.columnkhoi_luong = Me.Columns("khoi_luong")
            Me.columnkhoi_luong_qd = Me.Columns("khoi_luong_qd")
            Me.columncuoc_chinh = Me.Columns("cuoc_chinh")
            Me.columndv_cong_them = Me.Columns("dv_cong_them")
            Me.columndv_gia_tang = Me.Columns("dv_gia_tang")
            Me.columncuoc_dv = Me.Columns("cuoc_dv")
            Me.columnvat = Me.Columns("vat")
            Me.columncuoc_e1 = Me.Columns("cuoc_e1")
            Me.columnPostCode = Me.Columns("PostCode")
        End Sub
        
        Private Sub InitClass()
            Me.columnnguoi_gui = New DataColumn("nguoi_gui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnguoi_gui)
            Me.columndia_chi_gui = New DataColumn("dia_chi_gui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndia_chi_gui)
            Me.columndien_thoai_gui = New DataColumn("dien_thoai_gui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndien_thoai_gui)
            Me.columnD = New DataColumn("D", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnD)
            Me.columnM = New DataColumn("M", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnM)
            Me.columnCH = New DataColumn("CH", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCH)
            Me.columnGio_Phat_Hanh = New DataColumn("Gio_Phat_Hanh", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGio_Phat_Hanh)
            Me.columnNgay_Phat_Hanh = New DataColumn("Ngay_Phat_Hanh", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Phat_Hanh)
            Me.columnnguoi_nhan = New DataColumn("nguoi_nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnguoi_nhan)
            Me.columndia_chi_nhan = New DataColumn("dia_chi_nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndia_chi_nhan)
            Me.columndien_thoai_nhan = New DataColumn("dien_thoai_nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndien_thoai_nhan)
            Me.columnkhoi_luong = New DataColumn("khoi_luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnkhoi_luong)
            Me.columnkhoi_luong_qd = New DataColumn("khoi_luong_qd", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnkhoi_luong_qd)
            Me.columncuoc_chinh = New DataColumn("cuoc_chinh", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncuoc_chinh)
            Me.columndv_cong_them = New DataColumn("dv_cong_them", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndv_cong_them)
            Me.columndv_gia_tang = New DataColumn("dv_gia_tang", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndv_gia_tang)
            Me.columncuoc_dv = New DataColumn("cuoc_dv", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncuoc_dv)
            Me.columnvat = New DataColumn("vat", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvat)
            Me.columncuoc_e1 = New DataColumn("cuoc_e1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncuoc_e1)
            Me.columnPostCode = New DataColumn("PostCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPostCode)
        End Sub
        
        Public Function NewE1Row() As E1Row
            Return CType(Me.NewRow,E1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E1RowChangedEvent) Is Nothing) Then
                RaiseEvent E1RowChanged(Me, New E1RowChangeEvent(CType(e.Row,E1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E1RowChangingEvent) Is Nothing) Then
                RaiseEvent E1RowChanging(Me, New E1RowChangeEvent(CType(e.Row,E1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E1RowDeletedEvent) Is Nothing) Then
                RaiseEvent E1RowDeleted(Me, New E1RowChangeEvent(CType(e.Row,E1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E1RowDeletingEvent) Is Nothing) Then
                RaiseEvent E1RowDeleting(Me, New E1RowChangeEvent(CType(e.Row,E1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE1Row(ByVal row As E1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1Row
        Inherits DataRow
        
        Private tableE1 As E1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE1 = CType(Me.Table,E1DataTable)
        End Sub
        
        Public Property nguoi_gui As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.nguoi_guiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.nguoi_guiColumn) = value
            End Set
        End Property
        
        Public Property dia_chi_gui As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.dia_chi_guiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.dia_chi_guiColumn) = value
            End Set
        End Property
        
        Public Property dien_thoai_gui As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.dien_thoai_guiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.dien_thoai_guiColumn) = value
            End Set
        End Property
        
        Public Property D As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.DColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.DColumn) = value
            End Set
        End Property
        
        Public Property M As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.MColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.MColumn) = value
            End Set
        End Property
        
        Public Property CH As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.CHColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.CHColumn) = value
            End Set
        End Property
        
        Public Property Gio_Phat_Hanh As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.Gio_Phat_HanhColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.Gio_Phat_HanhColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Phat_Hanh As Date
            Get
                Try 
                    Return CType(Me(Me.tableE1.Ngay_Phat_HanhColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.Ngay_Phat_HanhColumn) = value
            End Set
        End Property
        
        Public Property nguoi_nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.nguoi_nhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.nguoi_nhanColumn) = value
            End Set
        End Property
        
        Public Property dia_chi_nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.dia_chi_nhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.dia_chi_nhanColumn) = value
            End Set
        End Property
        
        Public Property dien_thoai_nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.dien_thoai_nhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.dien_thoai_nhanColumn) = value
            End Set
        End Property
        
        Public Property khoi_luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1.khoi_luongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.khoi_luongColumn) = value
            End Set
        End Property
        
        Public Property khoi_luong_qd As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1.khoi_luong_qdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.khoi_luong_qdColumn) = value
            End Set
        End Property
        
        Public Property cuoc_chinh As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1.cuoc_chinhColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.cuoc_chinhColumn) = value
            End Set
        End Property
        
        Public Property dv_cong_them As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1.dv_cong_themColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.dv_cong_themColumn) = value
            End Set
        End Property
        
        Public Property dv_gia_tang As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1.dv_gia_tangColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.dv_gia_tangColumn) = value
            End Set
        End Property
        
        Public Property cuoc_dv As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1.cuoc_dvColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.cuoc_dvColumn) = value
            End Set
        End Property
        
        Public Property vat As Single
            Get
                Try 
                    Return CType(Me(Me.tableE1.vatColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.vatColumn) = value
            End Set
        End Property
        
        Public Property cuoc_e1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1.cuoc_e1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.cuoc_e1Column) = value
            End Set
        End Property
        
        Public Property PostCode As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.PostCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.PostCodeColumn) = value
            End Set
        End Property
        
        Public Function Isnguoi_guiNull() As Boolean
            Return Me.IsNull(Me.tableE1.nguoi_guiColumn)
        End Function
        
        Public Sub Setnguoi_guiNull()
            Me(Me.tableE1.nguoi_guiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdia_chi_guiNull() As Boolean
            Return Me.IsNull(Me.tableE1.dia_chi_guiColumn)
        End Function
        
        Public Sub Setdia_chi_guiNull()
            Me(Me.tableE1.dia_chi_guiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdien_thoai_guiNull() As Boolean
            Return Me.IsNull(Me.tableE1.dien_thoai_guiColumn)
        End Function
        
        Public Sub Setdien_thoai_guiNull()
            Me(Me.tableE1.dien_thoai_guiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDNull() As Boolean
            Return Me.IsNull(Me.tableE1.DColumn)
        End Function
        
        Public Sub SetDNull()
            Me(Me.tableE1.DColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNull() As Boolean
            Return Me.IsNull(Me.tableE1.MColumn)
        End Function
        
        Public Sub SetMNull()
            Me(Me.tableE1.MColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHNull() As Boolean
            Return Me.IsNull(Me.tableE1.CHColumn)
        End Function
        
        Public Sub SetCHNull()
            Me(Me.tableE1.CHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGio_Phat_HanhNull() As Boolean
            Return Me.IsNull(Me.tableE1.Gio_Phat_HanhColumn)
        End Function
        
        Public Sub SetGio_Phat_HanhNull()
            Me(Me.tableE1.Gio_Phat_HanhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_Phat_HanhNull() As Boolean
            Return Me.IsNull(Me.tableE1.Ngay_Phat_HanhColumn)
        End Function
        
        Public Sub SetNgay_Phat_HanhNull()
            Me(Me.tableE1.Ngay_Phat_HanhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isnguoi_nhanNull() As Boolean
            Return Me.IsNull(Me.tableE1.nguoi_nhanColumn)
        End Function
        
        Public Sub Setnguoi_nhanNull()
            Me(Me.tableE1.nguoi_nhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdia_chi_nhanNull() As Boolean
            Return Me.IsNull(Me.tableE1.dia_chi_nhanColumn)
        End Function
        
        Public Sub Setdia_chi_nhanNull()
            Me(Me.tableE1.dia_chi_nhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdien_thoai_nhanNull() As Boolean
            Return Me.IsNull(Me.tableE1.dien_thoai_nhanColumn)
        End Function
        
        Public Sub Setdien_thoai_nhanNull()
            Me(Me.tableE1.dien_thoai_nhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iskhoi_luongNull() As Boolean
            Return Me.IsNull(Me.tableE1.khoi_luongColumn)
        End Function
        
        Public Sub Setkhoi_luongNull()
            Me(Me.tableE1.khoi_luongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iskhoi_luong_qdNull() As Boolean
            Return Me.IsNull(Me.tableE1.khoi_luong_qdColumn)
        End Function
        
        Public Sub Setkhoi_luong_qdNull()
            Me(Me.tableE1.khoi_luong_qdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscuoc_chinhNull() As Boolean
            Return Me.IsNull(Me.tableE1.cuoc_chinhColumn)
        End Function
        
        Public Sub Setcuoc_chinhNull()
            Me(Me.tableE1.cuoc_chinhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdv_cong_themNull() As Boolean
            Return Me.IsNull(Me.tableE1.dv_cong_themColumn)
        End Function
        
        Public Sub Setdv_cong_themNull()
            Me(Me.tableE1.dv_cong_themColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdv_gia_tangNull() As Boolean
            Return Me.IsNull(Me.tableE1.dv_gia_tangColumn)
        End Function
        
        Public Sub Setdv_gia_tangNull()
            Me(Me.tableE1.dv_gia_tangColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscuoc_dvNull() As Boolean
            Return Me.IsNull(Me.tableE1.cuoc_dvColumn)
        End Function
        
        Public Sub Setcuoc_dvNull()
            Me(Me.tableE1.cuoc_dvColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvatNull() As Boolean
            Return Me.IsNull(Me.tableE1.vatColumn)
        End Function
        
        Public Sub SetvatNull()
            Me(Me.tableE1.vatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscuoc_e1Null() As Boolean
            Return Me.IsNull(Me.tableE1.cuoc_e1Column)
        End Function
        
        Public Sub Setcuoc_e1Null()
            Me(Me.tableE1.cuoc_e1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPostCodeNull() As Boolean
            Return Me.IsNull(Me.tableE1.PostCodeColumn)
        End Function
        
        Public Sub SetPostCodeNull()
            Me(Me.tableE1.PostCodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Hoa_Don_GTGTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNgay_Xuat As DataColumn
        
        Private columnTen_Khach_Hang As DataColumn
        
        Private columnDia_Chi As DataColumn
        
        Private columnMa_So_Thue As DataColumn
        
        Private columnKieu_Thanh_Toan As DataColumn
        
        Private columnGia_Tri As DataColumn
        
        Private columnX As DataColumn
        
        Private columnVat As DataColumn
        
        Private columnInWord As DataColumn
        
        Private columnTotal As DataColumn
        
        Friend Sub New()
            MyBase.New("Hoa_Don_GTGT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_XuatColumn As DataColumn
            Get
                Return Me.columnNgay_Xuat
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Khach_HangColumn As DataColumn
            Get
                Return Me.columnTen_Khach_Hang
            End Get
        End Property
        
        Friend ReadOnly Property Dia_ChiColumn As DataColumn
            Get
                Return Me.columnDia_Chi
            End Get
        End Property
        
        Friend ReadOnly Property Ma_So_ThueColumn As DataColumn
            Get
                Return Me.columnMa_So_Thue
            End Get
        End Property
        
        Friend ReadOnly Property Kieu_Thanh_ToanColumn As DataColumn
            Get
                Return Me.columnKieu_Thanh_Toan
            End Get
        End Property
        
        Friend ReadOnly Property Gia_TriColumn As DataColumn
            Get
                Return Me.columnGia_Tri
            End Get
        End Property
        
        Friend ReadOnly Property XColumn As DataColumn
            Get
                Return Me.columnX
            End Get
        End Property
        
        Friend ReadOnly Property VatColumn As DataColumn
            Get
                Return Me.columnVat
            End Get
        End Property
        
        Friend ReadOnly Property InWordColumn As DataColumn
            Get
                Return Me.columnInWord
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Hoa_Don_GTGTRow
            Get
                Return CType(Me.Rows(index),Hoa_Don_GTGTRow)
            End Get
        End Property
        
        Public Event Hoa_Don_GTGTRowChanged As Hoa_Don_GTGTRowChangeEventHandler
        
        Public Event Hoa_Don_GTGTRowChanging As Hoa_Don_GTGTRowChangeEventHandler
        
        Public Event Hoa_Don_GTGTRowDeleted As Hoa_Don_GTGTRowChangeEventHandler
        
        Public Event Hoa_Don_GTGTRowDeleting As Hoa_Don_GTGTRowChangeEventHandler
        
        Public Overloads Sub AddHoa_Don_GTGTRow(ByVal row As Hoa_Don_GTGTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddHoa_Don_GTGTRow(ByVal Ngay_Xuat As Date, ByVal Ten_Khach_Hang As String, ByVal Dia_Chi As String, ByVal Ma_So_Thue As String, ByVal Kieu_Thanh_Toan As String, ByVal Gia_Tri As Single, ByVal X As String, ByVal Vat As Single, ByVal InWord As String, ByVal Total As Single) As Hoa_Don_GTGTRow
            Dim rowHoa_Don_GTGTRow As Hoa_Don_GTGTRow = CType(Me.NewRow,Hoa_Don_GTGTRow)
            rowHoa_Don_GTGTRow.ItemArray = New Object() {Ngay_Xuat, Ten_Khach_Hang, Dia_Chi, Ma_So_Thue, Kieu_Thanh_Toan, Gia_Tri, X, Vat, InWord, Total}
            Me.Rows.Add(rowHoa_Don_GTGTRow)
            Return rowHoa_Don_GTGTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Hoa_Don_GTGTDataTable = CType(MyBase.Clone,Hoa_Don_GTGTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Hoa_Don_GTGTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNgay_Xuat = Me.Columns("Ngay_Xuat")
            Me.columnTen_Khach_Hang = Me.Columns("Ten_Khach_Hang")
            Me.columnDia_Chi = Me.Columns("Dia_Chi")
            Me.columnMa_So_Thue = Me.Columns("Ma_So_Thue")
            Me.columnKieu_Thanh_Toan = Me.Columns("Kieu_Thanh_Toan")
            Me.columnGia_Tri = Me.Columns("Gia_Tri")
            Me.columnX = Me.Columns("X")
            Me.columnVat = Me.Columns("Vat")
            Me.columnInWord = Me.Columns("InWord")
            Me.columnTotal = Me.Columns("Total")
        End Sub
        
        Private Sub InitClass()
            Me.columnNgay_Xuat = New DataColumn("Ngay_Xuat", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Xuat)
            Me.columnTen_Khach_Hang = New DataColumn("Ten_Khach_Hang", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Khach_Hang)
            Me.columnDia_Chi = New DataColumn("Dia_Chi", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia_Chi)
            Me.columnMa_So_Thue = New DataColumn("Ma_So_Thue", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_So_Thue)
            Me.columnKieu_Thanh_Toan = New DataColumn("Kieu_Thanh_Toan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKieu_Thanh_Toan)
            Me.columnGia_Tri = New DataColumn("Gia_Tri", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGia_Tri)
            Me.columnX = New DataColumn("X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnX)
            Me.columnVat = New DataColumn("Vat", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVat)
            Me.columnInWord = New DataColumn("InWord", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInWord)
            Me.columnTotal = New DataColumn("Total", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
        End Sub
        
        Public Function NewHoa_Don_GTGTRow() As Hoa_Don_GTGTRow
            Return CType(Me.NewRow,Hoa_Don_GTGTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Hoa_Don_GTGTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Hoa_Don_GTGTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Hoa_Don_GTGTRowChangedEvent) Is Nothing) Then
                RaiseEvent Hoa_Don_GTGTRowChanged(Me, New Hoa_Don_GTGTRowChangeEvent(CType(e.Row,Hoa_Don_GTGTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Hoa_Don_GTGTRowChangingEvent) Is Nothing) Then
                RaiseEvent Hoa_Don_GTGTRowChanging(Me, New Hoa_Don_GTGTRowChangeEvent(CType(e.Row,Hoa_Don_GTGTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Hoa_Don_GTGTRowDeletedEvent) Is Nothing) Then
                RaiseEvent Hoa_Don_GTGTRowDeleted(Me, New Hoa_Don_GTGTRowChangeEvent(CType(e.Row,Hoa_Don_GTGTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Hoa_Don_GTGTRowDeletingEvent) Is Nothing) Then
                RaiseEvent Hoa_Don_GTGTRowDeleting(Me, New Hoa_Don_GTGTRowChangeEvent(CType(e.Row,Hoa_Don_GTGTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveHoa_Don_GTGTRow(ByVal row As Hoa_Don_GTGTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Hoa_Don_GTGTRow
        Inherits DataRow
        
        Private tableHoa_Don_GTGT As Hoa_Don_GTGTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableHoa_Don_GTGT = CType(Me.Table,Hoa_Don_GTGTDataTable)
        End Sub
        
        Public Property Ngay_Xuat As Date
            Get
                Try 
                    Return CType(Me(Me.tableHoa_Don_GTGT.Ngay_XuatColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHoa_Don_GTGT.Ngay_XuatColumn) = value
            End Set
        End Property
        
        Public Property Ten_Khach_Hang As String
            Get
                Try 
                    Return CType(Me(Me.tableHoa_Don_GTGT.Ten_Khach_HangColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHoa_Don_GTGT.Ten_Khach_HangColumn) = value
            End Set
        End Property
        
        Public Property Dia_Chi As String
            Get
                Try 
                    Return CType(Me(Me.tableHoa_Don_GTGT.Dia_ChiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHoa_Don_GTGT.Dia_ChiColumn) = value
            End Set
        End Property
        
        Public Property Ma_So_Thue As String
            Get
                Try 
                    Return CType(Me(Me.tableHoa_Don_GTGT.Ma_So_ThueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHoa_Don_GTGT.Ma_So_ThueColumn) = value
            End Set
        End Property
        
        Public Property Kieu_Thanh_Toan As String
            Get
                Try 
                    Return CType(Me(Me.tableHoa_Don_GTGT.Kieu_Thanh_ToanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHoa_Don_GTGT.Kieu_Thanh_ToanColumn) = value
            End Set
        End Property
        
        Public Property Gia_Tri As Single
            Get
                Try 
                    Return CType(Me(Me.tableHoa_Don_GTGT.Gia_TriColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHoa_Don_GTGT.Gia_TriColumn) = value
            End Set
        End Property
        
        Public Property X As String
            Get
                Try 
                    Return CType(Me(Me.tableHoa_Don_GTGT.XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHoa_Don_GTGT.XColumn) = value
            End Set
        End Property
        
        Public Property Vat As Single
            Get
                Try 
                    Return CType(Me(Me.tableHoa_Don_GTGT.VatColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHoa_Don_GTGT.VatColumn) = value
            End Set
        End Property
        
        Public Property InWord As String
            Get
                Try 
                    Return CType(Me(Me.tableHoa_Don_GTGT.InWordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHoa_Don_GTGT.InWordColumn) = value
            End Set
        End Property
        
        Public Property Total As Single
            Get
                Try 
                    Return CType(Me(Me.tableHoa_Don_GTGT.TotalColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHoa_Don_GTGT.TotalColumn) = value
            End Set
        End Property
        
        Public Function IsNgay_XuatNull() As Boolean
            Return Me.IsNull(Me.tableHoa_Don_GTGT.Ngay_XuatColumn)
        End Function
        
        Public Sub SetNgay_XuatNull()
            Me(Me.tableHoa_Don_GTGT.Ngay_XuatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Khach_HangNull() As Boolean
            Return Me.IsNull(Me.tableHoa_Don_GTGT.Ten_Khach_HangColumn)
        End Function
        
        Public Sub SetTen_Khach_HangNull()
            Me(Me.tableHoa_Don_GTGT.Ten_Khach_HangColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDia_ChiNull() As Boolean
            Return Me.IsNull(Me.tableHoa_Don_GTGT.Dia_ChiColumn)
        End Function
        
        Public Sub SetDia_ChiNull()
            Me(Me.tableHoa_Don_GTGT.Dia_ChiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_So_ThueNull() As Boolean
            Return Me.IsNull(Me.tableHoa_Don_GTGT.Ma_So_ThueColumn)
        End Function
        
        Public Sub SetMa_So_ThueNull()
            Me(Me.tableHoa_Don_GTGT.Ma_So_ThueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKieu_Thanh_ToanNull() As Boolean
            Return Me.IsNull(Me.tableHoa_Don_GTGT.Kieu_Thanh_ToanColumn)
        End Function
        
        Public Sub SetKieu_Thanh_ToanNull()
            Me(Me.tableHoa_Don_GTGT.Kieu_Thanh_ToanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGia_TriNull() As Boolean
            Return Me.IsNull(Me.tableHoa_Don_GTGT.Gia_TriColumn)
        End Function
        
        Public Sub SetGia_TriNull()
            Me(Me.tableHoa_Don_GTGT.Gia_TriColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsXNull() As Boolean
            Return Me.IsNull(Me.tableHoa_Don_GTGT.XColumn)
        End Function
        
        Public Sub SetXNull()
            Me(Me.tableHoa_Don_GTGT.XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVatNull() As Boolean
            Return Me.IsNull(Me.tableHoa_Don_GTGT.VatColumn)
        End Function
        
        Public Sub SetVatNull()
            Me(Me.tableHoa_Don_GTGT.VatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInWordNull() As Boolean
            Return Me.IsNull(Me.tableHoa_Don_GTGT.InWordColumn)
        End Function
        
        Public Sub SetInWordNull()
            Me(Me.tableHoa_Don_GTGT.InWordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableHoa_Don_GTGT.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableHoa_Don_GTGT.TotalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Hoa_Don_GTGTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Hoa_Don_GTGTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Hoa_Don_GTGTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Hoa_Don_GTGTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Den_BC37DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSochuyenthu As DataColumn
        
        Private columnMa_Bc_Khai_Thac As DataColumn
        
        Private columnDuongthu As DataColumn
        
        Private columnTui_So As DataColumn
        
        Private columnTong_So_BP As DataColumn
        
        Private columnKhoiLuong As DataColumn
        
        Private columnTui_F As DataColumn
        
        Private columnTenBCgui As DataColumn
        
        Private columnTenBCnhan As DataColumn
        
        Friend Sub New()
            MyBase.New("E2_Den_BC37")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SochuyenthuColumn As DataColumn
            Get
                Return Me.columnSochuyenthu
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_Khai_ThacColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Khai_Thac
            End Get
        End Property
        
        Friend ReadOnly Property DuongthuColumn As DataColumn
            Get
                Return Me.columnDuongthu
            End Get
        End Property
        
        Friend ReadOnly Property Tui_SoColumn As DataColumn
            Get
                Return Me.columnTui_So
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_BPColumn As DataColumn
            Get
                Return Me.columnTong_So_BP
            End Get
        End Property
        
        Friend ReadOnly Property KhoiLuongColumn As DataColumn
            Get
                Return Me.columnKhoiLuong
            End Get
        End Property
        
        Friend ReadOnly Property Tui_FColumn As DataColumn
            Get
                Return Me.columnTui_F
            End Get
        End Property
        
        Friend ReadOnly Property TenBCguiColumn As DataColumn
            Get
                Return Me.columnTenBCgui
            End Get
        End Property
        
        Friend ReadOnly Property TenBCnhanColumn As DataColumn
            Get
                Return Me.columnTenBCnhan
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E2_Den_BC37Row
            Get
                Return CType(Me.Rows(index),E2_Den_BC37Row)
            End Get
        End Property
        
        Public Event E2_Den_BC37RowChanged As E2_Den_BC37RowChangeEventHandler
        
        Public Event E2_Den_BC37RowChanging As E2_Den_BC37RowChangeEventHandler
        
        Public Event E2_Den_BC37RowDeleted As E2_Den_BC37RowChangeEventHandler
        
        Public Event E2_Den_BC37RowDeleting As E2_Den_BC37RowChangeEventHandler
        
        Public Overloads Sub AddE2_Den_BC37Row(ByVal row As E2_Den_BC37Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE2_Den_BC37Row(ByVal Sochuyenthu As Integer, ByVal Ma_Bc_Khai_Thac As Integer, ByVal Duongthu As Integer, ByVal Tui_So As Integer, ByVal Tong_So_BP As Integer, ByVal KhoiLuong As Integer, ByVal Tui_F As Integer, ByVal TenBCgui As String, ByVal TenBCnhan As String) As E2_Den_BC37Row
            Dim rowE2_Den_BC37Row As E2_Den_BC37Row = CType(Me.NewRow,E2_Den_BC37Row)
            rowE2_Den_BC37Row.ItemArray = New Object() {Sochuyenthu, Ma_Bc_Khai_Thac, Duongthu, Tui_So, Tong_So_BP, KhoiLuong, Tui_F, TenBCgui, TenBCnhan}
            Me.Rows.Add(rowE2_Den_BC37Row)
            Return rowE2_Den_BC37Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E2_Den_BC37DataTable = CType(MyBase.Clone,E2_Den_BC37DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E2_Den_BC37DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSochuyenthu = Me.Columns("Sochuyenthu")
            Me.columnMa_Bc_Khai_Thac = Me.Columns("Ma_Bc_Khai_Thac")
            Me.columnDuongthu = Me.Columns("Duongthu")
            Me.columnTui_So = Me.Columns("Tui_So")
            Me.columnTong_So_BP = Me.Columns("Tong_So_BP")
            Me.columnKhoiLuong = Me.Columns("KhoiLuong")
            Me.columnTui_F = Me.Columns("Tui_F")
            Me.columnTenBCgui = Me.Columns("TenBCgui")
            Me.columnTenBCnhan = Me.Columns("TenBCnhan")
        End Sub
        
        Private Sub InitClass()
            Me.columnSochuyenthu = New DataColumn("Sochuyenthu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSochuyenthu)
            Me.columnMa_Bc_Khai_Thac = New DataColumn("Ma_Bc_Khai_Thac", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Khai_Thac)
            Me.columnDuongthu = New DataColumn("Duongthu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDuongthu)
            Me.columnTui_So = New DataColumn("Tui_So", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So)
            Me.columnTong_So_BP = New DataColumn("Tong_So_BP", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_BP)
            Me.columnKhoiLuong = New DataColumn("KhoiLuong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoiLuong)
            Me.columnTui_F = New DataColumn("Tui_F", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_F)
            Me.columnTenBCgui = New DataColumn("TenBCgui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTenBCgui)
            Me.columnTenBCnhan = New DataColumn("TenBCnhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTenBCnhan)
            Me.columnTenBCgui.AllowDBNull = false
        End Sub
        
        Public Function NewE2_Den_BC37Row() As E2_Den_BC37Row
            Return CType(Me.NewRow,E2_Den_BC37Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E2_Den_BC37Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E2_Den_BC37Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E2_Den_BC37RowChangedEvent) Is Nothing) Then
                RaiseEvent E2_Den_BC37RowChanged(Me, New E2_Den_BC37RowChangeEvent(CType(e.Row,E2_Den_BC37Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E2_Den_BC37RowChangingEvent) Is Nothing) Then
                RaiseEvent E2_Den_BC37RowChanging(Me, New E2_Den_BC37RowChangeEvent(CType(e.Row,E2_Den_BC37Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E2_Den_BC37RowDeletedEvent) Is Nothing) Then
                RaiseEvent E2_Den_BC37RowDeleted(Me, New E2_Den_BC37RowChangeEvent(CType(e.Row,E2_Den_BC37Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E2_Den_BC37RowDeletingEvent) Is Nothing) Then
                RaiseEvent E2_Den_BC37RowDeleting(Me, New E2_Den_BC37RowChangeEvent(CType(e.Row,E2_Den_BC37Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE2_Den_BC37Row(ByVal row As E2_Den_BC37Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Den_BC37Row
        Inherits DataRow
        
        Private tableE2_Den_BC37 As E2_Den_BC37DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE2_Den_BC37 = CType(Me.Table,E2_Den_BC37DataTable)
        End Sub
        
        Public Property Sochuyenthu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_BC37.SochuyenthuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_BC37.SochuyenthuColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Khai_Thac As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_BC37.Ma_Bc_Khai_ThacColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_BC37.Ma_Bc_Khai_ThacColumn) = value
            End Set
        End Property
        
        Public Property Duongthu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_BC37.DuongthuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_BC37.DuongthuColumn) = value
            End Set
        End Property
        
        Public Property Tui_So As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_BC37.Tui_SoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_BC37.Tui_SoColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_BP As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_BC37.Tong_So_BPColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_BC37.Tong_So_BPColumn) = value
            End Set
        End Property
        
        Public Property KhoiLuong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_BC37.KhoiLuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_BC37.KhoiLuongColumn) = value
            End Set
        End Property
        
        Public Property Tui_F As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_BC37.Tui_FColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_BC37.Tui_FColumn) = value
            End Set
        End Property
        
        Public Property TenBCgui As String
            Get
                Return CType(Me(Me.tableE2_Den_BC37.TenBCguiColumn),String)
            End Get
            Set
                Me(Me.tableE2_Den_BC37.TenBCguiColumn) = value
            End Set
        End Property
        
        Public Property TenBCnhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_BC37.TenBCnhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_BC37.TenBCnhanColumn) = value
            End Set
        End Property
        
        Public Function IsSochuyenthuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_BC37.SochuyenthuColumn)
        End Function
        
        Public Sub SetSochuyenthuNull()
            Me(Me.tableE2_Den_BC37.SochuyenthuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_Khai_ThacNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_BC37.Ma_Bc_Khai_ThacColumn)
        End Function
        
        Public Sub SetMa_Bc_Khai_ThacNull()
            Me(Me.tableE2_Den_BC37.Ma_Bc_Khai_ThacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDuongthuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_BC37.DuongthuColumn)
        End Function
        
        Public Sub SetDuongthuNull()
            Me(Me.tableE2_Den_BC37.DuongthuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_SoNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_BC37.Tui_SoColumn)
        End Function
        
        Public Sub SetTui_SoNull()
            Me(Me.tableE2_Den_BC37.Tui_SoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_BPNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_BC37.Tong_So_BPColumn)
        End Function
        
        Public Sub SetTong_So_BPNull()
            Me(Me.tableE2_Den_BC37.Tong_So_BPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoiLuongNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_BC37.KhoiLuongColumn)
        End Function
        
        Public Sub SetKhoiLuongNull()
            Me(Me.tableE2_Den_BC37.KhoiLuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_FNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_BC37.Tui_FColumn)
        End Function
        
        Public Sub SetTui_FNull()
            Me(Me.tableE2_Den_BC37.Tui_FColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTenBCnhanNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_BC37.TenBCnhanColumn)
        End Function
        
        Public Sub SetTenBCnhanNull()
            Me(Me.tableE2_Den_BC37.TenBCnhanColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Den_BC37RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E2_Den_BC37Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E2_Den_BC37Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E2_Den_BC37Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tong_KetDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTK As DataColumn
        
        Friend Sub New()
            MyBase.New("Tong_Ket")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TKColumn As DataColumn
            Get
                Return Me.columnTK
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tong_KetRow
            Get
                Return CType(Me.Rows(index),Tong_KetRow)
            End Get
        End Property
        
        Public Event Tong_KetRowChanged As Tong_KetRowChangeEventHandler
        
        Public Event Tong_KetRowChanging As Tong_KetRowChangeEventHandler
        
        Public Event Tong_KetRowDeleted As Tong_KetRowChangeEventHandler
        
        Public Event Tong_KetRowDeleting As Tong_KetRowChangeEventHandler
        
        Public Overloads Sub AddTong_KetRow(ByVal row As Tong_KetRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTong_KetRow(ByVal TK As String) As Tong_KetRow
            Dim rowTong_KetRow As Tong_KetRow = CType(Me.NewRow,Tong_KetRow)
            rowTong_KetRow.ItemArray = New Object() {TK}
            Me.Rows.Add(rowTong_KetRow)
            Return rowTong_KetRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Tong_KetDataTable = CType(MyBase.Clone,Tong_KetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Tong_KetDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTK = Me.Columns("TK")
        End Sub
        
        Private Sub InitClass()
            Me.columnTK = New DataColumn("TK", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTK)
        End Sub
        
        Public Function NewTong_KetRow() As Tong_KetRow
            Return CType(Me.NewRow,Tong_KetRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Tong_KetRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Tong_KetRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tong_KetRowChangedEvent) Is Nothing) Then
                RaiseEvent Tong_KetRowChanged(Me, New Tong_KetRowChangeEvent(CType(e.Row,Tong_KetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tong_KetRowChangingEvent) Is Nothing) Then
                RaiseEvent Tong_KetRowChanging(Me, New Tong_KetRowChangeEvent(CType(e.Row,Tong_KetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tong_KetRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tong_KetRowDeleted(Me, New Tong_KetRowChangeEvent(CType(e.Row,Tong_KetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tong_KetRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tong_KetRowDeleting(Me, New Tong_KetRowChangeEvent(CType(e.Row,Tong_KetRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTong_KetRow(ByVal row As Tong_KetRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tong_KetRow
        Inherits DataRow
        
        Private tableTong_Ket As Tong_KetDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTong_Ket = CType(Me.Table,Tong_KetDataTable)
        End Sub
        
        Public Property TK As String
            Get
                Try 
                    Return CType(Me(Me.tableTong_Ket.TKColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Ket.TKColumn) = value
            End Set
        End Property
        
        Public Function IsTKNull() As Boolean
            Return Me.IsNull(Me.tableTong_Ket.TKColumn)
        End Function
        
        Public Sub SetTKNull()
            Me(Me.tableTong_Ket.TKColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tong_KetRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Tong_KetRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Tong_KetRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Tong_KetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tong_Ket_Chuyen_ThuDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTKCT As DataColumn
        
        Friend Sub New()
            MyBase.New("Tong_Ket_Chuyen_Thu")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TKCTColumn As DataColumn
            Get
                Return Me.columnTKCT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tong_Ket_Chuyen_ThuRow
            Get
                Return CType(Me.Rows(index),Tong_Ket_Chuyen_ThuRow)
            End Get
        End Property
        
        Public Event Tong_Ket_Chuyen_ThuRowChanged As Tong_Ket_Chuyen_ThuRowChangeEventHandler
        
        Public Event Tong_Ket_Chuyen_ThuRowChanging As Tong_Ket_Chuyen_ThuRowChangeEventHandler
        
        Public Event Tong_Ket_Chuyen_ThuRowDeleted As Tong_Ket_Chuyen_ThuRowChangeEventHandler
        
        Public Event Tong_Ket_Chuyen_ThuRowDeleting As Tong_Ket_Chuyen_ThuRowChangeEventHandler
        
        Public Overloads Sub AddTong_Ket_Chuyen_ThuRow(ByVal row As Tong_Ket_Chuyen_ThuRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTong_Ket_Chuyen_ThuRow(ByVal TKCT As String) As Tong_Ket_Chuyen_ThuRow
            Dim rowTong_Ket_Chuyen_ThuRow As Tong_Ket_Chuyen_ThuRow = CType(Me.NewRow,Tong_Ket_Chuyen_ThuRow)
            rowTong_Ket_Chuyen_ThuRow.ItemArray = New Object() {TKCT}
            Me.Rows.Add(rowTong_Ket_Chuyen_ThuRow)
            Return rowTong_Ket_Chuyen_ThuRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Tong_Ket_Chuyen_ThuDataTable = CType(MyBase.Clone,Tong_Ket_Chuyen_ThuDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Tong_Ket_Chuyen_ThuDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTKCT = Me.Columns("TKCT")
        End Sub
        
        Private Sub InitClass()
            Me.columnTKCT = New DataColumn("TKCT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTKCT)
        End Sub
        
        Public Function NewTong_Ket_Chuyen_ThuRow() As Tong_Ket_Chuyen_ThuRow
            Return CType(Me.NewRow,Tong_Ket_Chuyen_ThuRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Tong_Ket_Chuyen_ThuRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Tong_Ket_Chuyen_ThuRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tong_Ket_Chuyen_ThuRowChangedEvent) Is Nothing) Then
                RaiseEvent Tong_Ket_Chuyen_ThuRowChanged(Me, New Tong_Ket_Chuyen_ThuRowChangeEvent(CType(e.Row,Tong_Ket_Chuyen_ThuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tong_Ket_Chuyen_ThuRowChangingEvent) Is Nothing) Then
                RaiseEvent Tong_Ket_Chuyen_ThuRowChanging(Me, New Tong_Ket_Chuyen_ThuRowChangeEvent(CType(e.Row,Tong_Ket_Chuyen_ThuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tong_Ket_Chuyen_ThuRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tong_Ket_Chuyen_ThuRowDeleted(Me, New Tong_Ket_Chuyen_ThuRowChangeEvent(CType(e.Row,Tong_Ket_Chuyen_ThuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tong_Ket_Chuyen_ThuRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tong_Ket_Chuyen_ThuRowDeleting(Me, New Tong_Ket_Chuyen_ThuRowChangeEvent(CType(e.Row,Tong_Ket_Chuyen_ThuRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTong_Ket_Chuyen_ThuRow(ByVal row As Tong_Ket_Chuyen_ThuRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tong_Ket_Chuyen_ThuRow
        Inherits DataRow
        
        Private tableTong_Ket_Chuyen_Thu As Tong_Ket_Chuyen_ThuDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTong_Ket_Chuyen_Thu = CType(Me.Table,Tong_Ket_Chuyen_ThuDataTable)
        End Sub
        
        Public Property TKCT As String
            Get
                Try 
                    Return CType(Me(Me.tableTong_Ket_Chuyen_Thu.TKCTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Ket_Chuyen_Thu.TKCTColumn) = value
            End Set
        End Property
        
        Public Function IsTKCTNull() As Boolean
            Return Me.IsNull(Me.tableTong_Ket_Chuyen_Thu.TKCTColumn)
        End Function
        
        Public Sub SetTKCTNull()
            Me(Me.tableTong_Ket_Chuyen_Thu.TKCTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tong_Ket_Chuyen_ThuRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Tong_Ket_Chuyen_ThuRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Tong_Ket_Chuyen_ThuRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Tong_Ket_Chuyen_ThuRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class So_hieu_chuyen_thuDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_BC_Khai_Thac As DataColumn
        
        Private columnMa_BC As DataColumn
        
        Private columnNam As DataColumn
        
        Private columnSo_Chuyen_Thu As DataColumn
        
        Private columnLoai_Chuyen_Thu As DataColumn
        
        Private columnHang_van_chuyen As DataColumn
        
        Private columnSo_hieu As DataColumn
        
        Private columnNgay_dong As DataColumn
        
        Friend Sub New()
            MyBase.New("So_hieu_chuyen_thu")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_BC_Khai_ThacColumn As DataColumn
            Get
                Return Me.columnMa_BC_Khai_Thac
            End Get
        End Property
        
        Friend ReadOnly Property Ma_BCColumn As DataColumn
            Get
                Return Me.columnMa_BC
            End Get
        End Property
        
        Friend ReadOnly Property NamColumn As DataColumn
            Get
                Return Me.columnNam
            End Get
        End Property
        
        Friend ReadOnly Property So_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnSo_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Loai_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnLoai_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Hang_van_chuyenColumn As DataColumn
            Get
                Return Me.columnHang_van_chuyen
            End Get
        End Property
        
        Friend ReadOnly Property So_hieuColumn As DataColumn
            Get
                Return Me.columnSo_hieu
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_dongColumn As DataColumn
            Get
                Return Me.columnNgay_dong
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As So_hieu_chuyen_thuRow
            Get
                Return CType(Me.Rows(index),So_hieu_chuyen_thuRow)
            End Get
        End Property
        
        Public Event So_hieu_chuyen_thuRowChanged As So_hieu_chuyen_thuRowChangeEventHandler
        
        Public Event So_hieu_chuyen_thuRowChanging As So_hieu_chuyen_thuRowChangeEventHandler
        
        Public Event So_hieu_chuyen_thuRowDeleted As So_hieu_chuyen_thuRowChangeEventHandler
        
        Public Event So_hieu_chuyen_thuRowDeleting As So_hieu_chuyen_thuRowChangeEventHandler
        
        Public Overloads Sub AddSo_hieu_chuyen_thuRow(ByVal row As So_hieu_chuyen_thuRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSo_hieu_chuyen_thuRow(ByVal Ma_BC_Khai_Thac As String, ByVal Ma_BC As String, ByVal Nam As String, ByVal So_Chuyen_Thu As String, ByVal Loai_Chuyen_Thu As String, ByVal Hang_van_chuyen As String, ByVal So_hieu As String, ByVal Ngay_dong As String) As So_hieu_chuyen_thuRow
            Dim rowSo_hieu_chuyen_thuRow As So_hieu_chuyen_thuRow = CType(Me.NewRow,So_hieu_chuyen_thuRow)
            rowSo_hieu_chuyen_thuRow.ItemArray = New Object() {Ma_BC_Khai_Thac, Ma_BC, Nam, So_Chuyen_Thu, Loai_Chuyen_Thu, Hang_van_chuyen, So_hieu, Ngay_dong}
            Me.Rows.Add(rowSo_hieu_chuyen_thuRow)
            Return rowSo_hieu_chuyen_thuRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As So_hieu_chuyen_thuDataTable = CType(MyBase.Clone,So_hieu_chuyen_thuDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New So_hieu_chuyen_thuDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_BC_Khai_Thac = Me.Columns("Ma_BC_Khai_Thac")
            Me.columnMa_BC = Me.Columns("Ma_BC")
            Me.columnNam = Me.Columns("Nam")
            Me.columnSo_Chuyen_Thu = Me.Columns("So_Chuyen_Thu")
            Me.columnLoai_Chuyen_Thu = Me.Columns("Loai_Chuyen_Thu")
            Me.columnHang_van_chuyen = Me.Columns("Hang_van_chuyen")
            Me.columnSo_hieu = Me.Columns("So_hieu")
            Me.columnNgay_dong = Me.Columns("Ngay_dong")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_BC_Khai_Thac = New DataColumn("Ma_BC_Khai_Thac", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_BC_Khai_Thac)
            Me.columnMa_BC = New DataColumn("Ma_BC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_BC)
            Me.columnNam = New DataColumn("Nam", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNam)
            Me.columnSo_Chuyen_Thu = New DataColumn("So_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Chuyen_Thu)
            Me.columnLoai_Chuyen_Thu = New DataColumn("Loai_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_Chuyen_Thu)
            Me.columnHang_van_chuyen = New DataColumn("Hang_van_chuyen", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHang_van_chuyen)
            Me.columnSo_hieu = New DataColumn("So_hieu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_hieu)
            Me.columnNgay_dong = New DataColumn("Ngay_dong", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_dong)
        End Sub
        
        Public Function NewSo_hieu_chuyen_thuRow() As So_hieu_chuyen_thuRow
            Return CType(Me.NewRow,So_hieu_chuyen_thuRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New So_hieu_chuyen_thuRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(So_hieu_chuyen_thuRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.So_hieu_chuyen_thuRowChangedEvent) Is Nothing) Then
                RaiseEvent So_hieu_chuyen_thuRowChanged(Me, New So_hieu_chuyen_thuRowChangeEvent(CType(e.Row,So_hieu_chuyen_thuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.So_hieu_chuyen_thuRowChangingEvent) Is Nothing) Then
                RaiseEvent So_hieu_chuyen_thuRowChanging(Me, New So_hieu_chuyen_thuRowChangeEvent(CType(e.Row,So_hieu_chuyen_thuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.So_hieu_chuyen_thuRowDeletedEvent) Is Nothing) Then
                RaiseEvent So_hieu_chuyen_thuRowDeleted(Me, New So_hieu_chuyen_thuRowChangeEvent(CType(e.Row,So_hieu_chuyen_thuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.So_hieu_chuyen_thuRowDeletingEvent) Is Nothing) Then
                RaiseEvent So_hieu_chuyen_thuRowDeleting(Me, New So_hieu_chuyen_thuRowChangeEvent(CType(e.Row,So_hieu_chuyen_thuRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSo_hieu_chuyen_thuRow(ByVal row As So_hieu_chuyen_thuRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class So_hieu_chuyen_thuRow
        Inherits DataRow
        
        Private tableSo_hieu_chuyen_thu As So_hieu_chuyen_thuDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSo_hieu_chuyen_thu = CType(Me.Table,So_hieu_chuyen_thuDataTable)
        End Sub
        
        Public Property Ma_BC_Khai_Thac As String
            Get
                Try 
                    Return CType(Me(Me.tableSo_hieu_chuyen_thu.Ma_BC_Khai_ThacColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSo_hieu_chuyen_thu.Ma_BC_Khai_ThacColumn) = value
            End Set
        End Property
        
        Public Property Ma_BC As String
            Get
                Try 
                    Return CType(Me(Me.tableSo_hieu_chuyen_thu.Ma_BCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSo_hieu_chuyen_thu.Ma_BCColumn) = value
            End Set
        End Property
        
        Public Property Nam As String
            Get
                Try 
                    Return CType(Me(Me.tableSo_hieu_chuyen_thu.NamColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSo_hieu_chuyen_thu.NamColumn) = value
            End Set
        End Property
        
        Public Property So_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableSo_hieu_chuyen_thu.So_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSo_hieu_chuyen_thu.So_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Loai_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableSo_hieu_chuyen_thu.Loai_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSo_hieu_chuyen_thu.Loai_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Hang_van_chuyen As String
            Get
                Try 
                    Return CType(Me(Me.tableSo_hieu_chuyen_thu.Hang_van_chuyenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSo_hieu_chuyen_thu.Hang_van_chuyenColumn) = value
            End Set
        End Property
        
        Public Property So_hieu As String
            Get
                Try 
                    Return CType(Me(Me.tableSo_hieu_chuyen_thu.So_hieuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSo_hieu_chuyen_thu.So_hieuColumn) = value
            End Set
        End Property
        
        Public Property Ngay_dong As String
            Get
                Try 
                    Return CType(Me(Me.tableSo_hieu_chuyen_thu.Ngay_dongColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSo_hieu_chuyen_thu.Ngay_dongColumn) = value
            End Set
        End Property
        
        Public Function IsMa_BC_Khai_ThacNull() As Boolean
            Return Me.IsNull(Me.tableSo_hieu_chuyen_thu.Ma_BC_Khai_ThacColumn)
        End Function
        
        Public Sub SetMa_BC_Khai_ThacNull()
            Me(Me.tableSo_hieu_chuyen_thu.Ma_BC_Khai_ThacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_BCNull() As Boolean
            Return Me.IsNull(Me.tableSo_hieu_chuyen_thu.Ma_BCColumn)
        End Function
        
        Public Sub SetMa_BCNull()
            Me(Me.tableSo_hieu_chuyen_thu.Ma_BCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNamNull() As Boolean
            Return Me.IsNull(Me.tableSo_hieu_chuyen_thu.NamColumn)
        End Function
        
        Public Sub SetNamNull()
            Me(Me.tableSo_hieu_chuyen_thu.NamColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableSo_hieu_chuyen_thu.So_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetSo_Chuyen_ThuNull()
            Me(Me.tableSo_hieu_chuyen_thu.So_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableSo_hieu_chuyen_thu.Loai_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetLoai_Chuyen_ThuNull()
            Me(Me.tableSo_hieu_chuyen_thu.Loai_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHang_van_chuyenNull() As Boolean
            Return Me.IsNull(Me.tableSo_hieu_chuyen_thu.Hang_van_chuyenColumn)
        End Function
        
        Public Sub SetHang_van_chuyenNull()
            Me(Me.tableSo_hieu_chuyen_thu.Hang_van_chuyenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_hieuNull() As Boolean
            Return Me.IsNull(Me.tableSo_hieu_chuyen_thu.So_hieuColumn)
        End Function
        
        Public Sub SetSo_hieuNull()
            Me(Me.tableSo_hieu_chuyen_thu.So_hieuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_dongNull() As Boolean
            Return Me.IsNull(Me.tableSo_hieu_chuyen_thu.Ngay_dongColumn)
        End Function
        
        Public Sub SetNgay_dongNull()
            Me(Me.tableSo_hieu_chuyen_thu.Ngay_dongColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class So_hieu_chuyen_thuRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As So_hieu_chuyen_thuRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As So_hieu_chuyen_thuRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As So_hieu_chuyen_thuRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_ChanDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTT As DataColumn
        
        Private columnMa_E1 As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnGhi_Chu As DataColumn
        
        Friend Sub New()
            MyBase.New("E1_Chan")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STTColumn As DataColumn
            Get
                Return Me.columnSTT
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Ghi_ChuColumn As DataColumn
            Get
                Return Me.columnGhi_Chu
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E1_ChanRow
            Get
                Return CType(Me.Rows(index),E1_ChanRow)
            End Get
        End Property
        
        Public Event E1_ChanRowChanged As E1_ChanRowChangeEventHandler
        
        Public Event E1_ChanRowChanging As E1_ChanRowChangeEventHandler
        
        Public Event E1_ChanRowDeleted As E1_ChanRowChangeEventHandler
        
        Public Event E1_ChanRowDeleting As E1_ChanRowChangeEventHandler
        
        Public Overloads Sub AddE1_ChanRow(ByVal row As E1_ChanRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE1_ChanRow(ByVal STT As Integer, ByVal Ma_E1 As String, ByVal Khoi_Luong As Integer, ByVal Ghi_Chu As String) As E1_ChanRow
            Dim rowE1_ChanRow As E1_ChanRow = CType(Me.NewRow,E1_ChanRow)
            rowE1_ChanRow.ItemArray = New Object() {STT, Ma_E1, Khoi_Luong, Ghi_Chu}
            Me.Rows.Add(rowE1_ChanRow)
            Return rowE1_ChanRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E1_ChanDataTable = CType(MyBase.Clone,E1_ChanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E1_ChanDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTT = Me.Columns("STT")
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnGhi_Chu = Me.Columns("Ghi_Chu")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTT = New DataColumn("STT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT)
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnGhi_Chu = New DataColumn("Ghi_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGhi_Chu)
        End Sub
        
        Public Function NewE1_ChanRow() As E1_ChanRow
            Return CType(Me.NewRow,E1_ChanRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E1_ChanRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E1_ChanRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E1_ChanRowChangedEvent) Is Nothing) Then
                RaiseEvent E1_ChanRowChanged(Me, New E1_ChanRowChangeEvent(CType(e.Row,E1_ChanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E1_ChanRowChangingEvent) Is Nothing) Then
                RaiseEvent E1_ChanRowChanging(Me, New E1_ChanRowChangeEvent(CType(e.Row,E1_ChanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E1_ChanRowDeletedEvent) Is Nothing) Then
                RaiseEvent E1_ChanRowDeleted(Me, New E1_ChanRowChangeEvent(CType(e.Row,E1_ChanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E1_ChanRowDeletingEvent) Is Nothing) Then
                RaiseEvent E1_ChanRowDeleting(Me, New E1_ChanRowChangeEvent(CType(e.Row,E1_ChanRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE1_ChanRow(ByVal row As E1_ChanRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_ChanRow
        Inherits DataRow
        
        Private tableE1_Chan As E1_ChanDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE1_Chan = CType(Me.Table,E1_ChanDataTable)
        End Sub
        
        Public Property STT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Chan.STTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Chan.STTColumn) = value
            End Set
        End Property
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Chan.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Chan.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Chan.Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Chan.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Ghi_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Chan.Ghi_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Chan.Ghi_ChuColumn) = value
            End Set
        End Property
        
        Public Function IsSTTNull() As Boolean
            Return Me.IsNull(Me.tableE1_Chan.STTColumn)
        End Function
        
        Public Sub SetSTTNull()
            Me(Me.tableE1_Chan.STTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableE1_Chan.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableE1_Chan.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableE1_Chan.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableE1_Chan.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGhi_ChuNull() As Boolean
            Return Me.IsNull(Me.tableE1_Chan.Ghi_ChuColumn)
        End Function
        
        Public Sub SetGhi_ChuNull()
            Me(Me.tableE1_Chan.Ghi_ChuColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_ChanRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E1_ChanRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E1_ChanRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E1_ChanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_LeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTT As DataColumn
        
        Private columnMa_E1 As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnGhi_Chu As DataColumn
        
        Friend Sub New()
            MyBase.New("E1_Le")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STTColumn As DataColumn
            Get
                Return Me.columnSTT
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Ghi_ChuColumn As DataColumn
            Get
                Return Me.columnGhi_Chu
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E1_LeRow
            Get
                Return CType(Me.Rows(index),E1_LeRow)
            End Get
        End Property
        
        Public Event E1_LeRowChanged As E1_LeRowChangeEventHandler
        
        Public Event E1_LeRowChanging As E1_LeRowChangeEventHandler
        
        Public Event E1_LeRowDeleted As E1_LeRowChangeEventHandler
        
        Public Event E1_LeRowDeleting As E1_LeRowChangeEventHandler
        
        Public Overloads Sub AddE1_LeRow(ByVal row As E1_LeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE1_LeRow(ByVal STT As Integer, ByVal Ma_E1 As String, ByVal Khoi_Luong As Integer, ByVal Ghi_Chu As String) As E1_LeRow
            Dim rowE1_LeRow As E1_LeRow = CType(Me.NewRow,E1_LeRow)
            rowE1_LeRow.ItemArray = New Object() {STT, Ma_E1, Khoi_Luong, Ghi_Chu}
            Me.Rows.Add(rowE1_LeRow)
            Return rowE1_LeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E1_LeDataTable = CType(MyBase.Clone,E1_LeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E1_LeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTT = Me.Columns("STT")
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnGhi_Chu = Me.Columns("Ghi_Chu")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTT = New DataColumn("STT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT)
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnGhi_Chu = New DataColumn("Ghi_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGhi_Chu)
        End Sub
        
        Public Function NewE1_LeRow() As E1_LeRow
            Return CType(Me.NewRow,E1_LeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E1_LeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E1_LeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E1_LeRowChangedEvent) Is Nothing) Then
                RaiseEvent E1_LeRowChanged(Me, New E1_LeRowChangeEvent(CType(e.Row,E1_LeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E1_LeRowChangingEvent) Is Nothing) Then
                RaiseEvent E1_LeRowChanging(Me, New E1_LeRowChangeEvent(CType(e.Row,E1_LeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E1_LeRowDeletedEvent) Is Nothing) Then
                RaiseEvent E1_LeRowDeleted(Me, New E1_LeRowChangeEvent(CType(e.Row,E1_LeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E1_LeRowDeletingEvent) Is Nothing) Then
                RaiseEvent E1_LeRowDeleting(Me, New E1_LeRowChangeEvent(CType(e.Row,E1_LeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE1_LeRow(ByVal row As E1_LeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_LeRow
        Inherits DataRow
        
        Private tableE1_Le As E1_LeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE1_Le = CType(Me.Table,E1_LeDataTable)
        End Sub
        
        Public Property STT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Le.STTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Le.STTColumn) = value
            End Set
        End Property
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Le.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Le.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Le.Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Le.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Ghi_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Le.Ghi_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Le.Ghi_ChuColumn) = value
            End Set
        End Property
        
        Public Function IsSTTNull() As Boolean
            Return Me.IsNull(Me.tableE1_Le.STTColumn)
        End Function
        
        Public Sub SetSTTNull()
            Me(Me.tableE1_Le.STTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableE1_Le.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableE1_Le.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableE1_Le.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableE1_Le.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGhi_ChuNull() As Boolean
            Return Me.IsNull(Me.tableE1_Le.Ghi_ChuColumn)
        End Function
        
        Public Sub SetGhi_ChuNull()
            Me(Me.tableE1_Le.Ghi_ChuColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_LeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E1_LeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E1_LeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E1_LeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chuyen_thu_di_despatchDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Duong_thu As DataColumn
        
        Private columnId_Chuyen_thu As DataColumn
        
        Private columnMa_Bc_Khai_Thac As DataColumn
        
        Private columnMa_Bc_Khai_Thac_Chu As DataColumn
        
        Private columnMa_Bc As DataColumn
        
        Private columnMa_Bc_Chu As DataColumn
        
        Private columnNgay_Dong As DataColumn
        
        Private columnConsignment_id As DataColumn
        
        Private columnChuyen_bay As DataColumn
        
        Private columnDateOfDeparture As DataColumn
        
        Private columnAirportOfDirect As DataColumn
        
        Private columnAirportOfLoading As DataColumn
        
        Private columnDespatch_id As DataColumn
        
        Private columnTen_bc As DataColumn
        
        Private columnTen_bc_khai_thac As DataColumn
        
        Private columnGio_dong As DataColumn
        
        Private columnTen_Nuoc_Nhan As DataColumn
        
        Private columnSo_Chuyen_Thu As DataColumn
        
        Private columnTong_So_Tui As DataColumn
        
        Private columnTong_KL As DataColumn
        
        Private columnTong_KLBP As DataColumn
        
        Private columnLoai_Chuyen_Thu As DataColumn
        
        Friend Sub New()
            MyBase.New("Chuyen_thu_di_despatch")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_Duong_thuColumn As DataColumn
            Get
                Return Me.columnId_Duong_thu
            End Get
        End Property
        
        Friend ReadOnly Property Id_Chuyen_thuColumn As DataColumn
            Get
                Return Me.columnId_Chuyen_thu
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_Khai_ThacColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Khai_Thac
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_Khai_Thac_ChuColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Khai_Thac_Chu
            End Get
        End Property
        
        Friend ReadOnly Property Ma_BcColumn As DataColumn
            Get
                Return Me.columnMa_Bc
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_ChuColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Chu
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_DongColumn As DataColumn
            Get
                Return Me.columnNgay_Dong
            End Get
        End Property
        
        Friend ReadOnly Property Consignment_idColumn As DataColumn
            Get
                Return Me.columnConsignment_id
            End Get
        End Property
        
        Friend ReadOnly Property Chuyen_bayColumn As DataColumn
            Get
                Return Me.columnChuyen_bay
            End Get
        End Property
        
        Friend ReadOnly Property DateOfDepartureColumn As DataColumn
            Get
                Return Me.columnDateOfDeparture
            End Get
        End Property
        
        Friend ReadOnly Property AirportOfDirectColumn As DataColumn
            Get
                Return Me.columnAirportOfDirect
            End Get
        End Property
        
        Friend ReadOnly Property AirportOfLoadingColumn As DataColumn
            Get
                Return Me.columnAirportOfLoading
            End Get
        End Property
        
        Friend ReadOnly Property Despatch_idColumn As DataColumn
            Get
                Return Me.columnDespatch_id
            End Get
        End Property
        
        Friend ReadOnly Property Ten_bcColumn As DataColumn
            Get
                Return Me.columnTen_bc
            End Get
        End Property
        
        Friend ReadOnly Property Ten_bc_khai_thacColumn As DataColumn
            Get
                Return Me.columnTen_bc_khai_thac
            End Get
        End Property
        
        Friend ReadOnly Property Gio_dongColumn As DataColumn
            Get
                Return Me.columnGio_dong
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Nuoc_NhanColumn As DataColumn
            Get
                Return Me.columnTen_Nuoc_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property So_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnSo_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_TuiColumn As DataColumn
            Get
                Return Me.columnTong_So_Tui
            End Get
        End Property
        
        Friend ReadOnly Property Tong_KLColumn As DataColumn
            Get
                Return Me.columnTong_KL
            End Get
        End Property
        
        Friend ReadOnly Property Tong_KLBPColumn As DataColumn
            Get
                Return Me.columnTong_KLBP
            End Get
        End Property
        
        Friend ReadOnly Property Loai_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnLoai_Chuyen_Thu
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Chuyen_thu_di_despatchRow
            Get
                Return CType(Me.Rows(index),Chuyen_thu_di_despatchRow)
            End Get
        End Property
        
        Public Event Chuyen_thu_di_despatchRowChanged As Chuyen_thu_di_despatchRowChangeEventHandler
        
        Public Event Chuyen_thu_di_despatchRowChanging As Chuyen_thu_di_despatchRowChangeEventHandler
        
        Public Event Chuyen_thu_di_despatchRowDeleted As Chuyen_thu_di_despatchRowChangeEventHandler
        
        Public Event Chuyen_thu_di_despatchRowDeleting As Chuyen_thu_di_despatchRowChangeEventHandler
        
        Public Overloads Sub AddChuyen_thu_di_despatchRow(ByVal row As Chuyen_thu_di_despatchRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddChuyen_thu_di_despatchRow( _
                    ByVal Id_Duong_thu As String,  _
                    ByVal Id_Chuyen_thu As String,  _
                    ByVal Ma_Bc_Khai_Thac As Integer,  _
                    ByVal Ma_Bc_Khai_Thac_Chu As String,  _
                    ByVal Ma_Bc As Integer,  _
                    ByVal Ma_Bc_Chu As String,  _
                    ByVal Ngay_Dong As Date,  _
                    ByVal Consignment_id As String,  _
                    ByVal Chuyen_bay As String,  _
                    ByVal DateOfDeparture As Date,  _
                    ByVal AirportOfDirect As String,  _
                    ByVal AirportOfLoading As String,  _
                    ByVal Despatch_id As String,  _
                    ByVal Ten_bc As String,  _
                    ByVal Ten_bc_khai_thac As String,  _
                    ByVal Gio_dong As Date,  _
                    ByVal Ten_Nuoc_Nhan As String,  _
                    ByVal So_Chuyen_Thu As Integer,  _
                    ByVal Tong_So_Tui As Integer,  _
                    ByVal Tong_KL As Integer,  _
                    ByVal Tong_KLBP As Integer,  _
                    ByVal Loai_Chuyen_Thu As String) As Chuyen_thu_di_despatchRow
            Dim rowChuyen_thu_di_despatchRow As Chuyen_thu_di_despatchRow = CType(Me.NewRow,Chuyen_thu_di_despatchRow)
            rowChuyen_thu_di_despatchRow.ItemArray = New Object() {Id_Duong_thu, Id_Chuyen_thu, Ma_Bc_Khai_Thac, Ma_Bc_Khai_Thac_Chu, Ma_Bc, Ma_Bc_Chu, Ngay_Dong, Consignment_id, Chuyen_bay, DateOfDeparture, AirportOfDirect, AirportOfLoading, Despatch_id, Ten_bc, Ten_bc_khai_thac, Gio_dong, Ten_Nuoc_Nhan, So_Chuyen_Thu, Tong_So_Tui, Tong_KL, Tong_KLBP, Loai_Chuyen_Thu}
            Me.Rows.Add(rowChuyen_thu_di_despatchRow)
            Return rowChuyen_thu_di_despatchRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Chuyen_thu_di_despatchDataTable = CType(MyBase.Clone,Chuyen_thu_di_despatchDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Chuyen_thu_di_despatchDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Duong_thu = Me.Columns("Id_Duong_thu")
            Me.columnId_Chuyen_thu = Me.Columns("Id_Chuyen_thu")
            Me.columnMa_Bc_Khai_Thac = Me.Columns("Ma_Bc_Khai_Thac")
            Me.columnMa_Bc_Khai_Thac_Chu = Me.Columns("Ma_Bc_Khai_Thac_Chu")
            Me.columnMa_Bc = Me.Columns("Ma_Bc")
            Me.columnMa_Bc_Chu = Me.Columns("Ma_Bc_Chu")
            Me.columnNgay_Dong = Me.Columns("Ngay_Dong")
            Me.columnConsignment_id = Me.Columns("Consignment_id")
            Me.columnChuyen_bay = Me.Columns("Chuyen_bay")
            Me.columnDateOfDeparture = Me.Columns("DateOfDeparture")
            Me.columnAirportOfDirect = Me.Columns("AirportOfDirect")
            Me.columnAirportOfLoading = Me.Columns("AirportOfLoading")
            Me.columnDespatch_id = Me.Columns("Despatch_id")
            Me.columnTen_bc = Me.Columns("Ten_bc")
            Me.columnTen_bc_khai_thac = Me.Columns("Ten_bc_khai_thac")
            Me.columnGio_dong = Me.Columns("Gio_dong")
            Me.columnTen_Nuoc_Nhan = Me.Columns("Ten_Nuoc_Nhan")
            Me.columnSo_Chuyen_Thu = Me.Columns("So_Chuyen_Thu")
            Me.columnTong_So_Tui = Me.Columns("Tong_So_Tui")
            Me.columnTong_KL = Me.Columns("Tong_KL")
            Me.columnTong_KLBP = Me.Columns("Tong_KLBP")
            Me.columnLoai_Chuyen_Thu = Me.Columns("Loai_Chuyen_Thu")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Duong_thu = New DataColumn("Id_Duong_thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Duong_thu)
            Me.columnId_Chuyen_thu = New DataColumn("Id_Chuyen_thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Chuyen_thu)
            Me.columnMa_Bc_Khai_Thac = New DataColumn("Ma_Bc_Khai_Thac", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Khai_Thac)
            Me.columnMa_Bc_Khai_Thac_Chu = New DataColumn("Ma_Bc_Khai_Thac_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Khai_Thac_Chu)
            Me.columnMa_Bc = New DataColumn("Ma_Bc", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc)
            Me.columnMa_Bc_Chu = New DataColumn("Ma_Bc_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Chu)
            Me.columnNgay_Dong = New DataColumn("Ngay_Dong", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Dong)
            Me.columnConsignment_id = New DataColumn("Consignment_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConsignment_id)
            Me.columnChuyen_bay = New DataColumn("Chuyen_bay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChuyen_bay)
            Me.columnDateOfDeparture = New DataColumn("DateOfDeparture", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfDeparture)
            Me.columnAirportOfDirect = New DataColumn("AirportOfDirect", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAirportOfDirect)
            Me.columnAirportOfLoading = New DataColumn("AirportOfLoading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAirportOfLoading)
            Me.columnDespatch_id = New DataColumn("Despatch_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDespatch_id)
            Me.columnTen_bc = New DataColumn("Ten_bc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_bc)
            Me.columnTen_bc_khai_thac = New DataColumn("Ten_bc_khai_thac", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_bc_khai_thac)
            Me.columnGio_dong = New DataColumn("Gio_dong", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGio_dong)
            Me.columnTen_Nuoc_Nhan = New DataColumn("Ten_Nuoc_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Nuoc_Nhan)
            Me.columnSo_Chuyen_Thu = New DataColumn("So_Chuyen_Thu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Chuyen_Thu)
            Me.columnTong_So_Tui = New DataColumn("Tong_So_Tui", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_Tui)
            Me.columnTong_KL = New DataColumn("Tong_KL", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_KL)
            Me.columnTong_KLBP = New DataColumn("Tong_KLBP", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_KLBP)
            Me.columnLoai_Chuyen_Thu = New DataColumn("Loai_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_Chuyen_Thu)
        End Sub
        
        Public Function NewChuyen_thu_di_despatchRow() As Chuyen_thu_di_despatchRow
            Return CType(Me.NewRow,Chuyen_thu_di_despatchRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Chuyen_thu_di_despatchRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Chuyen_thu_di_despatchRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Chuyen_thu_di_despatchRowChangedEvent) Is Nothing) Then
                RaiseEvent Chuyen_thu_di_despatchRowChanged(Me, New Chuyen_thu_di_despatchRowChangeEvent(CType(e.Row,Chuyen_thu_di_despatchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Chuyen_thu_di_despatchRowChangingEvent) Is Nothing) Then
                RaiseEvent Chuyen_thu_di_despatchRowChanging(Me, New Chuyen_thu_di_despatchRowChangeEvent(CType(e.Row,Chuyen_thu_di_despatchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Chuyen_thu_di_despatchRowDeletedEvent) Is Nothing) Then
                RaiseEvent Chuyen_thu_di_despatchRowDeleted(Me, New Chuyen_thu_di_despatchRowChangeEvent(CType(e.Row,Chuyen_thu_di_despatchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Chuyen_thu_di_despatchRowDeletingEvent) Is Nothing) Then
                RaiseEvent Chuyen_thu_di_despatchRowDeleting(Me, New Chuyen_thu_di_despatchRowChangeEvent(CType(e.Row,Chuyen_thu_di_despatchRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveChuyen_thu_di_despatchRow(ByVal row As Chuyen_thu_di_despatchRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chuyen_thu_di_despatchRow
        Inherits DataRow
        
        Private tableChuyen_thu_di_despatch As Chuyen_thu_di_despatchDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableChuyen_thu_di_despatch = CType(Me.Table,Chuyen_thu_di_despatchDataTable)
        End Sub
        
        Public Property Id_Duong_thu As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Id_Duong_thuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Id_Duong_thuColumn) = value
            End Set
        End Property
        
        Public Property Id_Chuyen_thu As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Id_Chuyen_thuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Id_Chuyen_thuColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Khai_Thac As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Ma_Bc_Khai_ThacColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Ma_Bc_Khai_ThacColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Khai_Thac_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Ma_Bc_Khai_Thac_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Ma_Bc_Khai_Thac_ChuColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Ma_BcColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Ma_BcColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Ma_Bc_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Ma_Bc_ChuColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Dong As Date
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Ngay_DongColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Ngay_DongColumn) = value
            End Set
        End Property
        
        Public Property Consignment_id As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Consignment_idColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Consignment_idColumn) = value
            End Set
        End Property
        
        Public Property Chuyen_bay As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Chuyen_bayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Chuyen_bayColumn) = value
            End Set
        End Property
        
        Public Property DateOfDeparture As Date
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.DateOfDepartureColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.DateOfDepartureColumn) = value
            End Set
        End Property
        
        Public Property AirportOfDirect As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.AirportOfDirectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.AirportOfDirectColumn) = value
            End Set
        End Property
        
        Public Property AirportOfLoading As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.AirportOfLoadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.AirportOfLoadingColumn) = value
            End Set
        End Property
        
        Public Property Despatch_id As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Despatch_idColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Despatch_idColumn) = value
            End Set
        End Property
        
        Public Property Ten_bc As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Ten_bcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Ten_bcColumn) = value
            End Set
        End Property
        
        Public Property Ten_bc_khai_thac As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Ten_bc_khai_thacColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Ten_bc_khai_thacColumn) = value
            End Set
        End Property
        
        Public Property Gio_dong As Date
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Gio_dongColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Gio_dongColumn) = value
            End Set
        End Property
        
        Public Property Ten_Nuoc_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Ten_Nuoc_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Ten_Nuoc_NhanColumn) = value
            End Set
        End Property
        
        Public Property So_Chuyen_Thu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.So_Chuyen_ThuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.So_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_Tui As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Tong_So_TuiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Tong_So_TuiColumn) = value
            End Set
        End Property
        
        Public Property Tong_KL As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Tong_KLColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Tong_KLColumn) = value
            End Set
        End Property
        
        Public Property Tong_KLBP As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Tong_KLBPColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Tong_KLBPColumn) = value
            End Set
        End Property
        
        Public Property Loai_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_thu_di_despatch.Loai_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_thu_di_despatch.Loai_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Function IsId_Duong_thuNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Id_Duong_thuColumn)
        End Function
        
        Public Sub SetId_Duong_thuNull()
            Me(Me.tableChuyen_thu_di_despatch.Id_Duong_thuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_Chuyen_thuNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Id_Chuyen_thuColumn)
        End Function
        
        Public Sub SetId_Chuyen_thuNull()
            Me(Me.tableChuyen_thu_di_despatch.Id_Chuyen_thuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_Khai_ThacNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Ma_Bc_Khai_ThacColumn)
        End Function
        
        Public Sub SetMa_Bc_Khai_ThacNull()
            Me(Me.tableChuyen_thu_di_despatch.Ma_Bc_Khai_ThacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_Khai_Thac_ChuNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Ma_Bc_Khai_Thac_ChuColumn)
        End Function
        
        Public Sub SetMa_Bc_Khai_Thac_ChuNull()
            Me(Me.tableChuyen_thu_di_despatch.Ma_Bc_Khai_Thac_ChuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_BcNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Ma_BcColumn)
        End Function
        
        Public Sub SetMa_BcNull()
            Me(Me.tableChuyen_thu_di_despatch.Ma_BcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_ChuNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Ma_Bc_ChuColumn)
        End Function
        
        Public Sub SetMa_Bc_ChuNull()
            Me(Me.tableChuyen_thu_di_despatch.Ma_Bc_ChuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_DongNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Ngay_DongColumn)
        End Function
        
        Public Sub SetNgay_DongNull()
            Me(Me.tableChuyen_thu_di_despatch.Ngay_DongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConsignment_idNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Consignment_idColumn)
        End Function
        
        Public Sub SetConsignment_idNull()
            Me(Me.tableChuyen_thu_di_despatch.Consignment_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChuyen_bayNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Chuyen_bayColumn)
        End Function
        
        Public Sub SetChuyen_bayNull()
            Me(Me.tableChuyen_thu_di_despatch.Chuyen_bayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateOfDepartureNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.DateOfDepartureColumn)
        End Function
        
        Public Sub SetDateOfDepartureNull()
            Me(Me.tableChuyen_thu_di_despatch.DateOfDepartureColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAirportOfDirectNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.AirportOfDirectColumn)
        End Function
        
        Public Sub SetAirportOfDirectNull()
            Me(Me.tableChuyen_thu_di_despatch.AirportOfDirectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAirportOfLoadingNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.AirportOfLoadingColumn)
        End Function
        
        Public Sub SetAirportOfLoadingNull()
            Me(Me.tableChuyen_thu_di_despatch.AirportOfLoadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDespatch_idNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Despatch_idColumn)
        End Function
        
        Public Sub SetDespatch_idNull()
            Me(Me.tableChuyen_thu_di_despatch.Despatch_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_bcNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Ten_bcColumn)
        End Function
        
        Public Sub SetTen_bcNull()
            Me(Me.tableChuyen_thu_di_despatch.Ten_bcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_bc_khai_thacNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Ten_bc_khai_thacColumn)
        End Function
        
        Public Sub SetTen_bc_khai_thacNull()
            Me(Me.tableChuyen_thu_di_despatch.Ten_bc_khai_thacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGio_dongNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Gio_dongColumn)
        End Function
        
        Public Sub SetGio_dongNull()
            Me(Me.tableChuyen_thu_di_despatch.Gio_dongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Nuoc_NhanNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Ten_Nuoc_NhanColumn)
        End Function
        
        Public Sub SetTen_Nuoc_NhanNull()
            Me(Me.tableChuyen_thu_di_despatch.Ten_Nuoc_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.So_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetSo_Chuyen_ThuNull()
            Me(Me.tableChuyen_thu_di_despatch.So_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_TuiNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Tong_So_TuiColumn)
        End Function
        
        Public Sub SetTong_So_TuiNull()
            Me(Me.tableChuyen_thu_di_despatch.Tong_So_TuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_KLNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Tong_KLColumn)
        End Function
        
        Public Sub SetTong_KLNull()
            Me(Me.tableChuyen_thu_di_despatch.Tong_KLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_KLBPNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Tong_KLBPColumn)
        End Function
        
        Public Sub SetTong_KLBPNull()
            Me(Me.tableChuyen_thu_di_despatch.Tong_KLBPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_thu_di_despatch.Loai_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetLoai_Chuyen_ThuNull()
            Me(Me.tableChuyen_thu_di_despatch.Loai_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chuyen_thu_di_despatchRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Chuyen_thu_di_despatchRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Chuyen_thu_di_despatchRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Chuyen_thu_di_despatchRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chuyen_Thu_Di_Ban_Ke_DespatchDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_E2 As DataColumn
        
        Private columnTui_So As DataColumn
        
        Private columnSTT As DataColumn
        
        Private columnMa_E1 As DataColumn
        
        Private columnPhan_Loai As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnHH_Phat_Tra As DataColumn
        
        Private columnGia_Tri_Hang As DataColumn
        
        Private columnMa_Bc_Goc As DataColumn
        
        Private columnMa_Bc_Tra As DataColumn
        
        Private columnCUOC As DataColumn
        
        Private columnGhi_Chu As DataColumn
        
        Private columnChuyen_Hoan As DataColumn
        
        Private columnId_Chuyen_Thu As DataColumn
        
        Friend Sub New()
            MyBase.New("Chuyen_Thu_Di_Ban_Ke_Despatch")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_E2Column As DataColumn
            Get
                Return Me.columnId_E2
            End Get
        End Property
        
        Friend ReadOnly Property Tui_SoColumn As DataColumn
            Get
                Return Me.columnTui_So
            End Get
        End Property
        
        Friend ReadOnly Property STTColumn As DataColumn
            Get
                Return Me.columnSTT
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Phan_LoaiColumn As DataColumn
            Get
                Return Me.columnPhan_Loai
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property HH_Phat_TraColumn As DataColumn
            Get
                Return Me.columnHH_Phat_Tra
            End Get
        End Property
        
        Friend ReadOnly Property Gia_Tri_HangColumn As DataColumn
            Get
                Return Me.columnGia_Tri_Hang
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_GocColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Goc
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_TraColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Tra
            End Get
        End Property
        
        Friend ReadOnly Property CUOCColumn As DataColumn
            Get
                Return Me.columnCUOC
            End Get
        End Property
        
        Friend ReadOnly Property Ghi_ChuColumn As DataColumn
            Get
                Return Me.columnGhi_Chu
            End Get
        End Property
        
        Friend ReadOnly Property Chuyen_HoanColumn As DataColumn
            Get
                Return Me.columnChuyen_Hoan
            End Get
        End Property
        
        Friend ReadOnly Property Id_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnId_Chuyen_Thu
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Chuyen_Thu_Di_Ban_Ke_DespatchRow
            Get
                Return CType(Me.Rows(index),Chuyen_Thu_Di_Ban_Ke_DespatchRow)
            End Get
        End Property
        
        Public Event Chuyen_Thu_Di_Ban_Ke_DespatchRowChanged As Chuyen_Thu_Di_Ban_Ke_DespatchRowChangeEventHandler
        
        Public Event Chuyen_Thu_Di_Ban_Ke_DespatchRowChanging As Chuyen_Thu_Di_Ban_Ke_DespatchRowChangeEventHandler
        
        Public Event Chuyen_Thu_Di_Ban_Ke_DespatchRowDeleted As Chuyen_Thu_Di_Ban_Ke_DespatchRowChangeEventHandler
        
        Public Event Chuyen_Thu_Di_Ban_Ke_DespatchRowDeleting As Chuyen_Thu_Di_Ban_Ke_DespatchRowChangeEventHandler
        
        Public Overloads Sub AddChuyen_Thu_Di_Ban_Ke_DespatchRow(ByVal row As Chuyen_Thu_Di_Ban_Ke_DespatchRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddChuyen_Thu_Di_Ban_Ke_DespatchRow(ByVal Id_E2 As String, ByVal Tui_So As String, ByVal STT As Integer, ByVal Ma_E1 As String, ByVal Phan_Loai As String, ByVal Khoi_Luong As Integer, ByVal HH_Phat_Tra As Integer, ByVal Gia_Tri_Hang As String, ByVal Ma_Bc_Goc As String, ByVal Ma_Bc_Tra As String, ByVal CUOC As Integer, ByVal Ghi_Chu As String, ByVal Chuyen_Hoan As String, ByVal Id_Chuyen_Thu As String) As Chuyen_Thu_Di_Ban_Ke_DespatchRow
            Dim rowChuyen_Thu_Di_Ban_Ke_DespatchRow As Chuyen_Thu_Di_Ban_Ke_DespatchRow = CType(Me.NewRow,Chuyen_Thu_Di_Ban_Ke_DespatchRow)
            rowChuyen_Thu_Di_Ban_Ke_DespatchRow.ItemArray = New Object() {Id_E2, Tui_So, STT, Ma_E1, Phan_Loai, Khoi_Luong, HH_Phat_Tra, Gia_Tri_Hang, Ma_Bc_Goc, Ma_Bc_Tra, CUOC, Ghi_Chu, Chuyen_Hoan, Id_Chuyen_Thu}
            Me.Rows.Add(rowChuyen_Thu_Di_Ban_Ke_DespatchRow)
            Return rowChuyen_Thu_Di_Ban_Ke_DespatchRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Chuyen_Thu_Di_Ban_Ke_DespatchDataTable = CType(MyBase.Clone,Chuyen_Thu_Di_Ban_Ke_DespatchDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Chuyen_Thu_Di_Ban_Ke_DespatchDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_E2 = Me.Columns("Id_E2")
            Me.columnTui_So = Me.Columns("Tui_So")
            Me.columnSTT = Me.Columns("STT")
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnPhan_Loai = Me.Columns("Phan_Loai")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnHH_Phat_Tra = Me.Columns("HH_Phat_Tra")
            Me.columnGia_Tri_Hang = Me.Columns("Gia_Tri_Hang")
            Me.columnMa_Bc_Goc = Me.Columns("Ma_Bc_Goc")
            Me.columnMa_Bc_Tra = Me.Columns("Ma_Bc_Tra")
            Me.columnCUOC = Me.Columns("CUOC")
            Me.columnGhi_Chu = Me.Columns("Ghi_Chu")
            Me.columnChuyen_Hoan = Me.Columns("Chuyen_Hoan")
            Me.columnId_Chuyen_Thu = Me.Columns("Id_Chuyen_Thu")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_E2 = New DataColumn("Id_E2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_E2)
            Me.columnTui_So = New DataColumn("Tui_So", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So)
            Me.columnSTT = New DataColumn("STT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT)
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnPhan_Loai = New DataColumn("Phan_Loai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhan_Loai)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnHH_Phat_Tra = New DataColumn("HH_Phat_Tra", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHH_Phat_Tra)
            Me.columnGia_Tri_Hang = New DataColumn("Gia_Tri_Hang", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGia_Tri_Hang)
            Me.columnMa_Bc_Goc = New DataColumn("Ma_Bc_Goc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Goc)
            Me.columnMa_Bc_Tra = New DataColumn("Ma_Bc_Tra", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Tra)
            Me.columnCUOC = New DataColumn("CUOC", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUOC)
            Me.columnGhi_Chu = New DataColumn("Ghi_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGhi_Chu)
            Me.columnChuyen_Hoan = New DataColumn("Chuyen_Hoan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChuyen_Hoan)
            Me.columnId_Chuyen_Thu = New DataColumn("Id_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Chuyen_Thu)
        End Sub
        
        Public Function NewChuyen_Thu_Di_Ban_Ke_DespatchRow() As Chuyen_Thu_Di_Ban_Ke_DespatchRow
            Return CType(Me.NewRow,Chuyen_Thu_Di_Ban_Ke_DespatchRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Chuyen_Thu_Di_Ban_Ke_DespatchRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Chuyen_Thu_Di_Ban_Ke_DespatchRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Chuyen_Thu_Di_Ban_Ke_DespatchRowChangedEvent) Is Nothing) Then
                RaiseEvent Chuyen_Thu_Di_Ban_Ke_DespatchRowChanged(Me, New Chuyen_Thu_Di_Ban_Ke_DespatchRowChangeEvent(CType(e.Row,Chuyen_Thu_Di_Ban_Ke_DespatchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Chuyen_Thu_Di_Ban_Ke_DespatchRowChangingEvent) Is Nothing) Then
                RaiseEvent Chuyen_Thu_Di_Ban_Ke_DespatchRowChanging(Me, New Chuyen_Thu_Di_Ban_Ke_DespatchRowChangeEvent(CType(e.Row,Chuyen_Thu_Di_Ban_Ke_DespatchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Chuyen_Thu_Di_Ban_Ke_DespatchRowDeletedEvent) Is Nothing) Then
                RaiseEvent Chuyen_Thu_Di_Ban_Ke_DespatchRowDeleted(Me, New Chuyen_Thu_Di_Ban_Ke_DespatchRowChangeEvent(CType(e.Row,Chuyen_Thu_Di_Ban_Ke_DespatchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Chuyen_Thu_Di_Ban_Ke_DespatchRowDeletingEvent) Is Nothing) Then
                RaiseEvent Chuyen_Thu_Di_Ban_Ke_DespatchRowDeleting(Me, New Chuyen_Thu_Di_Ban_Ke_DespatchRowChangeEvent(CType(e.Row,Chuyen_Thu_Di_Ban_Ke_DespatchRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveChuyen_Thu_Di_Ban_Ke_DespatchRow(ByVal row As Chuyen_Thu_Di_Ban_Ke_DespatchRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chuyen_Thu_Di_Ban_Ke_DespatchRow
        Inherits DataRow
        
        Private tableChuyen_Thu_Di_Ban_Ke_Despatch As Chuyen_Thu_Di_Ban_Ke_DespatchDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableChuyen_Thu_Di_Ban_Ke_Despatch = CType(Me.Table,Chuyen_Thu_Di_Ban_Ke_DespatchDataTable)
        End Sub
        
        Public Property Id_E2 As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Id_E2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Id_E2Column) = value
            End Set
        End Property
        
        Public Property Tui_So As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Tui_SoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Tui_SoColumn) = value
            End Set
        End Property
        
        Public Property STT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.STTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.STTColumn) = value
            End Set
        End Property
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Phan_Loai As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Phan_LoaiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Phan_LoaiColumn) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property HH_Phat_Tra As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.HH_Phat_TraColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.HH_Phat_TraColumn) = value
            End Set
        End Property
        
        Public Property Gia_Tri_Hang As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Gia_Tri_HangColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Gia_Tri_HangColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Goc As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ma_Bc_GocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ma_Bc_GocColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Tra As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ma_Bc_TraColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ma_Bc_TraColumn) = value
            End Set
        End Property
        
        Public Property CUOC As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.CUOCColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.CUOCColumn) = value
            End Set
        End Property
        
        Public Property Ghi_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ghi_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ghi_ChuColumn) = value
            End Set
        End Property
        
        Public Property Chuyen_Hoan As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Chuyen_HoanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Chuyen_HoanColumn) = value
            End Set
        End Property
        
        Public Property Id_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Id_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Id_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Function IsId_E2Null() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Id_E2Column)
        End Function
        
        Public Sub SetId_E2Null()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Id_E2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_SoNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Tui_SoColumn)
        End Function
        
        Public Sub SetTui_SoNull()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Tui_SoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTTNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.STTColumn)
        End Function
        
        Public Sub SetSTTNull()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.STTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhan_LoaiNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Phan_LoaiColumn)
        End Function
        
        Public Sub SetPhan_LoaiNull()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Phan_LoaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHH_Phat_TraNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.HH_Phat_TraColumn)
        End Function
        
        Public Sub SetHH_Phat_TraNull()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.HH_Phat_TraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGia_Tri_HangNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Gia_Tri_HangColumn)
        End Function
        
        Public Sub SetGia_Tri_HangNull()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Gia_Tri_HangColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_GocNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ma_Bc_GocColumn)
        End Function
        
        Public Sub SetMa_Bc_GocNull()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ma_Bc_GocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_TraNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ma_Bc_TraColumn)
        End Function
        
        Public Sub SetMa_Bc_TraNull()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ma_Bc_TraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUOCNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.CUOCColumn)
        End Function
        
        Public Sub SetCUOCNull()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.CUOCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGhi_ChuNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ghi_ChuColumn)
        End Function
        
        Public Sub SetGhi_ChuNull()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Ghi_ChuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChuyen_HoanNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Chuyen_HoanColumn)
        End Function
        
        Public Sub SetChuyen_HoanNull()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Chuyen_HoanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Id_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetId_Chuyen_ThuNull()
            Me(Me.tableChuyen_Thu_Di_Ban_Ke_Despatch.Id_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chuyen_Thu_Di_Ban_Ke_DespatchRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Chuyen_Thu_Di_Ban_Ke_DespatchRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Chuyen_Thu_Di_Ban_Ke_DespatchRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Chuyen_Thu_Di_Ban_Ke_DespatchRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_Ke_ReceptacleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_E1 As DataColumn
        
        Private columnPhan_Loai As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnGia_Tri_Hang As DataColumn
        
        Private columnMa_Bc_Goc As DataColumn
        
        Private columnMa_Bc_Tra As DataColumn
        
        Private columnCUOC As DataColumn
        
        Private columnGhi_Chu As DataColumn
        
        Private columnId_E2 As DataColumn
        
        Private columnCUOC_NO As DataColumn
        
        Private columnSTT As DataColumn
        
        Private columnMa_Bc_CH As DataColumn
        
        Private columnTui_so As DataColumn
        
        Private columnTui_F As DataColumn
        
        Private columnTransit_Airport As DataColumn
        
        Friend Sub New()
            MyBase.New("E2_Di_Ban_Ke_Receptacle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Phan_LoaiColumn As DataColumn
            Get
                Return Me.columnPhan_Loai
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Gia_Tri_HangColumn As DataColumn
            Get
                Return Me.columnGia_Tri_Hang
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_GocColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Goc
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_TraColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Tra
            End Get
        End Property
        
        Friend ReadOnly Property CUOCColumn As DataColumn
            Get
                Return Me.columnCUOC
            End Get
        End Property
        
        Friend ReadOnly Property Ghi_ChuColumn As DataColumn
            Get
                Return Me.columnGhi_Chu
            End Get
        End Property
        
        Friend ReadOnly Property Id_E2Column As DataColumn
            Get
                Return Me.columnId_E2
            End Get
        End Property
        
        Friend ReadOnly Property CUOC_NOColumn As DataColumn
            Get
                Return Me.columnCUOC_NO
            End Get
        End Property
        
        Friend ReadOnly Property STTColumn As DataColumn
            Get
                Return Me.columnSTT
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_CHColumn As DataColumn
            Get
                Return Me.columnMa_Bc_CH
            End Get
        End Property
        
        Friend ReadOnly Property Tui_soColumn As DataColumn
            Get
                Return Me.columnTui_so
            End Get
        End Property
        
        Friend ReadOnly Property Tui_FColumn As DataColumn
            Get
                Return Me.columnTui_F
            End Get
        End Property
        
        Friend ReadOnly Property Transit_AirportColumn As DataColumn
            Get
                Return Me.columnTransit_Airport
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E2_Di_Ban_Ke_ReceptacleRow
            Get
                Return CType(Me.Rows(index),E2_Di_Ban_Ke_ReceptacleRow)
            End Get
        End Property
        
        Public Event E2_Di_Ban_Ke_ReceptacleRowChanged As E2_Di_Ban_Ke_ReceptacleRowChangeEventHandler
        
        Public Event E2_Di_Ban_Ke_ReceptacleRowChanging As E2_Di_Ban_Ke_ReceptacleRowChangeEventHandler
        
        Public Event E2_Di_Ban_Ke_ReceptacleRowDeleted As E2_Di_Ban_Ke_ReceptacleRowChangeEventHandler
        
        Public Event E2_Di_Ban_Ke_ReceptacleRowDeleting As E2_Di_Ban_Ke_ReceptacleRowChangeEventHandler
        
        Public Overloads Sub AddE2_Di_Ban_Ke_ReceptacleRow(ByVal row As E2_Di_Ban_Ke_ReceptacleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE2_Di_Ban_Ke_ReceptacleRow(ByVal Ma_E1 As String, ByVal Phan_Loai As String, ByVal Khoi_Luong As Integer, ByVal Gia_Tri_Hang As Integer, ByVal Ma_Bc_Goc As String, ByVal Ma_Bc_Tra As String, ByVal CUOC As Integer, ByVal Ghi_Chu As String, ByVal Id_E2 As String, ByVal CUOC_NO As Integer, ByVal STT As Integer, ByVal Ma_Bc_CH As Integer, ByVal Tui_so As String, ByVal Tui_F As Boolean, ByVal Transit_Airport As String) As E2_Di_Ban_Ke_ReceptacleRow
            Dim rowE2_Di_Ban_Ke_ReceptacleRow As E2_Di_Ban_Ke_ReceptacleRow = CType(Me.NewRow,E2_Di_Ban_Ke_ReceptacleRow)
            rowE2_Di_Ban_Ke_ReceptacleRow.ItemArray = New Object() {Ma_E1, Phan_Loai, Khoi_Luong, Gia_Tri_Hang, Ma_Bc_Goc, Ma_Bc_Tra, CUOC, Ghi_Chu, Id_E2, CUOC_NO, STT, Ma_Bc_CH, Tui_so, Tui_F, Transit_Airport}
            Me.Rows.Add(rowE2_Di_Ban_Ke_ReceptacleRow)
            Return rowE2_Di_Ban_Ke_ReceptacleRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E2_Di_Ban_Ke_ReceptacleDataTable = CType(MyBase.Clone,E2_Di_Ban_Ke_ReceptacleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E2_Di_Ban_Ke_ReceptacleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnPhan_Loai = Me.Columns("Phan_Loai")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnGia_Tri_Hang = Me.Columns("Gia_Tri_Hang")
            Me.columnMa_Bc_Goc = Me.Columns("Ma_Bc_Goc")
            Me.columnMa_Bc_Tra = Me.Columns("Ma_Bc_Tra")
            Me.columnCUOC = Me.Columns("CUOC")
            Me.columnGhi_Chu = Me.Columns("Ghi_Chu")
            Me.columnId_E2 = Me.Columns("Id_E2")
            Me.columnCUOC_NO = Me.Columns("CUOC_NO")
            Me.columnSTT = Me.Columns("STT")
            Me.columnMa_Bc_CH = Me.Columns("Ma_Bc_CH")
            Me.columnTui_so = Me.Columns("Tui_so")
            Me.columnTui_F = Me.Columns("Tui_F")
            Me.columnTransit_Airport = Me.Columns("Transit_Airport")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnPhan_Loai = New DataColumn("Phan_Loai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhan_Loai)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnGia_Tri_Hang = New DataColumn("Gia_Tri_Hang", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGia_Tri_Hang)
            Me.columnMa_Bc_Goc = New DataColumn("Ma_Bc_Goc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Goc)
            Me.columnMa_Bc_Tra = New DataColumn("Ma_Bc_Tra", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Tra)
            Me.columnCUOC = New DataColumn("CUOC", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUOC)
            Me.columnGhi_Chu = New DataColumn("Ghi_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGhi_Chu)
            Me.columnId_E2 = New DataColumn("Id_E2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_E2)
            Me.columnCUOC_NO = New DataColumn("CUOC_NO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUOC_NO)
            Me.columnSTT = New DataColumn("STT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT)
            Me.columnMa_Bc_CH = New DataColumn("Ma_Bc_CH", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_CH)
            Me.columnTui_so = New DataColumn("Tui_so", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_so)
            Me.columnTui_F = New DataColumn("Tui_F", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_F)
            Me.columnTransit_Airport = New DataColumn("Transit_Airport", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTransit_Airport)
        End Sub
        
        Public Function NewE2_Di_Ban_Ke_ReceptacleRow() As E2_Di_Ban_Ke_ReceptacleRow
            Return CType(Me.NewRow,E2_Di_Ban_Ke_ReceptacleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E2_Di_Ban_Ke_ReceptacleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E2_Di_Ban_Ke_ReceptacleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E2_Di_Ban_Ke_ReceptacleRowChangedEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_Ke_ReceptacleRowChanged(Me, New E2_Di_Ban_Ke_ReceptacleRowChangeEvent(CType(e.Row,E2_Di_Ban_Ke_ReceptacleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E2_Di_Ban_Ke_ReceptacleRowChangingEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_Ke_ReceptacleRowChanging(Me, New E2_Di_Ban_Ke_ReceptacleRowChangeEvent(CType(e.Row,E2_Di_Ban_Ke_ReceptacleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E2_Di_Ban_Ke_ReceptacleRowDeletedEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_Ke_ReceptacleRowDeleted(Me, New E2_Di_Ban_Ke_ReceptacleRowChangeEvent(CType(e.Row,E2_Di_Ban_Ke_ReceptacleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E2_Di_Ban_Ke_ReceptacleRowDeletingEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_Ke_ReceptacleRowDeleting(Me, New E2_Di_Ban_Ke_ReceptacleRowChangeEvent(CType(e.Row,E2_Di_Ban_Ke_ReceptacleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE2_Di_Ban_Ke_ReceptacleRow(ByVal row As E2_Di_Ban_Ke_ReceptacleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_Ke_ReceptacleRow
        Inherits DataRow
        
        Private tableE2_Di_Ban_Ke_Receptacle As E2_Di_Ban_Ke_ReceptacleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE2_Di_Ban_Ke_Receptacle = CType(Me.Table,E2_Di_Ban_Ke_ReceptacleDataTable)
        End Sub
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Phan_Loai As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.Phan_LoaiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.Phan_LoaiColumn) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Gia_Tri_Hang As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.Gia_Tri_HangColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.Gia_Tri_HangColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Goc As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_Bc_GocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_Bc_GocColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Tra As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_Bc_TraColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_Bc_TraColumn) = value
            End Set
        End Property
        
        Public Property CUOC As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.CUOCColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.CUOCColumn) = value
            End Set
        End Property
        
        Public Property Ghi_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ghi_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ghi_ChuColumn) = value
            End Set
        End Property
        
        Public Property Id_E2 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.Id_E2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.Id_E2Column) = value
            End Set
        End Property
        
        Public Property CUOC_NO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.CUOC_NOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.CUOC_NOColumn) = value
            End Set
        End Property
        
        Public Property STT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.STTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.STTColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_CH As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_Bc_CHColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_Bc_CHColumn) = value
            End Set
        End Property
        
        Public Property Tui_so As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.Tui_soColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.Tui_soColumn) = value
            End Set
        End Property
        
        Public Property Tui_F As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.Tui_FColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.Tui_FColumn) = value
            End Set
        End Property
        
        Public Property Transit_Airport As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle.Transit_AirportColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle.Transit_AirportColumn) = value
            End Set
        End Property
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhan_LoaiNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.Phan_LoaiColumn)
        End Function
        
        Public Sub SetPhan_LoaiNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.Phan_LoaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGia_Tri_HangNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.Gia_Tri_HangColumn)
        End Function
        
        Public Sub SetGia_Tri_HangNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.Gia_Tri_HangColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_GocNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_Bc_GocColumn)
        End Function
        
        Public Sub SetMa_Bc_GocNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_Bc_GocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_TraNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_Bc_TraColumn)
        End Function
        
        Public Sub SetMa_Bc_TraNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_Bc_TraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUOCNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.CUOCColumn)
        End Function
        
        Public Sub SetCUOCNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.CUOCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGhi_ChuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.Ghi_ChuColumn)
        End Function
        
        Public Sub SetGhi_ChuNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ghi_ChuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_E2Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.Id_E2Column)
        End Function
        
        Public Sub SetId_E2Null()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.Id_E2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUOC_NONull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.CUOC_NOColumn)
        End Function
        
        Public Sub SetCUOC_NONull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.CUOC_NOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTTNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.STTColumn)
        End Function
        
        Public Sub SetSTTNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.STTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_CHNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_Bc_CHColumn)
        End Function
        
        Public Sub SetMa_Bc_CHNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.Ma_Bc_CHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_soNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.Tui_soColumn)
        End Function
        
        Public Sub SetTui_soNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.Tui_soColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_FNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.Tui_FColumn)
        End Function
        
        Public Sub SetTui_FNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.Tui_FColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTransit_AirportNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle.Transit_AirportColumn)
        End Function
        
        Public Sub SetTransit_AirportNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle.Transit_AirportColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_Ke_ReceptacleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E2_Di_Ban_Ke_ReceptacleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E2_Di_Ban_Ke_ReceptacleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E2_Di_Ban_Ke_ReceptacleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_Ke_Receptacle_headerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTen_Bc_Khai_Thac As DataColumn
        
        Private columnTen_Duong_Thu As DataColumn
        
        Private columnNgay_Bay As DataColumn
        
        Private columnSo_Chuyen_Thu As DataColumn
        
        Private columnTen_Nuoc As DataColumn
        
        Private columnChuyen_bay As DataColumn
        
        Private columnDespatch_id As DataColumn
        
        Private columnTong_Khoi_LuongBanKe As DataColumn
        
        Private columnLoai_Chuyen_Thu As DataColumn
        
        Private columnTong_Khoi_Luong_Bp As DataColumn
        
        Friend Sub New()
            MyBase.New("E2_Di_Ban_Ke_Receptacle_header")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Bc_Khai_ThacColumn As DataColumn
            Get
                Return Me.columnTen_Bc_Khai_Thac
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Duong_ThuColumn As DataColumn
            Get
                Return Me.columnTen_Duong_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_BayColumn As DataColumn
            Get
                Return Me.columnNgay_Bay
            End Get
        End Property
        
        Friend ReadOnly Property So_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnSo_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Ten_NuocColumn As DataColumn
            Get
                Return Me.columnTen_Nuoc
            End Get
        End Property
        
        Friend ReadOnly Property Chuyen_bayColumn As DataColumn
            Get
                Return Me.columnChuyen_bay
            End Get
        End Property
        
        Friend ReadOnly Property Despatch_idColumn As DataColumn
            Get
                Return Me.columnDespatch_id
            End Get
        End Property
        
        Friend ReadOnly Property Tong_Khoi_LuongBanKeColumn As DataColumn
            Get
                Return Me.columnTong_Khoi_LuongBanKe
            End Get
        End Property
        
        Friend ReadOnly Property Loai_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnLoai_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Tong_Khoi_Luong_BpColumn As DataColumn
            Get
                Return Me.columnTong_Khoi_Luong_Bp
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E2_Di_Ban_Ke_Receptacle_headerRow
            Get
                Return CType(Me.Rows(index),E2_Di_Ban_Ke_Receptacle_headerRow)
            End Get
        End Property
        
        Public Event E2_Di_Ban_Ke_Receptacle_headerRowChanged As E2_Di_Ban_Ke_Receptacle_headerRowChangeEventHandler
        
        Public Event E2_Di_Ban_Ke_Receptacle_headerRowChanging As E2_Di_Ban_Ke_Receptacle_headerRowChangeEventHandler
        
        Public Event E2_Di_Ban_Ke_Receptacle_headerRowDeleted As E2_Di_Ban_Ke_Receptacle_headerRowChangeEventHandler
        
        Public Event E2_Di_Ban_Ke_Receptacle_headerRowDeleting As E2_Di_Ban_Ke_Receptacle_headerRowChangeEventHandler
        
        Public Overloads Sub AddE2_Di_Ban_Ke_Receptacle_headerRow(ByVal row As E2_Di_Ban_Ke_Receptacle_headerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE2_Di_Ban_Ke_Receptacle_headerRow(ByVal Ten_Bc_Khai_Thac As String, ByVal Ten_Duong_Thu As String, ByVal Ngay_Bay As String, ByVal So_Chuyen_Thu As Integer, ByVal Ten_Nuoc As String, ByVal Chuyen_bay As String, ByVal Despatch_id As String, ByVal Tong_Khoi_LuongBanKe As Integer, ByVal Loai_Chuyen_Thu As String, ByVal Tong_Khoi_Luong_Bp As Integer) As E2_Di_Ban_Ke_Receptacle_headerRow
            Dim rowE2_Di_Ban_Ke_Receptacle_headerRow As E2_Di_Ban_Ke_Receptacle_headerRow = CType(Me.NewRow,E2_Di_Ban_Ke_Receptacle_headerRow)
            rowE2_Di_Ban_Ke_Receptacle_headerRow.ItemArray = New Object() {Ten_Bc_Khai_Thac, Ten_Duong_Thu, Ngay_Bay, So_Chuyen_Thu, Ten_Nuoc, Chuyen_bay, Despatch_id, Tong_Khoi_LuongBanKe, Loai_Chuyen_Thu, Tong_Khoi_Luong_Bp}
            Me.Rows.Add(rowE2_Di_Ban_Ke_Receptacle_headerRow)
            Return rowE2_Di_Ban_Ke_Receptacle_headerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E2_Di_Ban_Ke_Receptacle_headerDataTable = CType(MyBase.Clone,E2_Di_Ban_Ke_Receptacle_headerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E2_Di_Ban_Ke_Receptacle_headerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTen_Bc_Khai_Thac = Me.Columns("Ten_Bc_Khai_Thac")
            Me.columnTen_Duong_Thu = Me.Columns("Ten_Duong_Thu")
            Me.columnNgay_Bay = Me.Columns("Ngay_Bay")
            Me.columnSo_Chuyen_Thu = Me.Columns("So_Chuyen_Thu")
            Me.columnTen_Nuoc = Me.Columns("Ten_Nuoc")
            Me.columnChuyen_bay = Me.Columns("Chuyen_bay")
            Me.columnDespatch_id = Me.Columns("Despatch_id")
            Me.columnTong_Khoi_LuongBanKe = Me.Columns("Tong_Khoi_LuongBanKe")
            Me.columnLoai_Chuyen_Thu = Me.Columns("Loai_Chuyen_Thu")
            Me.columnTong_Khoi_Luong_Bp = Me.Columns("Tong_Khoi_Luong_Bp")
        End Sub
        
        Private Sub InitClass()
            Me.columnTen_Bc_Khai_Thac = New DataColumn("Ten_Bc_Khai_Thac", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Bc_Khai_Thac)
            Me.columnTen_Duong_Thu = New DataColumn("Ten_Duong_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Duong_Thu)
            Me.columnNgay_Bay = New DataColumn("Ngay_Bay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Bay)
            Me.columnSo_Chuyen_Thu = New DataColumn("So_Chuyen_Thu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Chuyen_Thu)
            Me.columnTen_Nuoc = New DataColumn("Ten_Nuoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Nuoc)
            Me.columnChuyen_bay = New DataColumn("Chuyen_bay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChuyen_bay)
            Me.columnDespatch_id = New DataColumn("Despatch_id", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDespatch_id)
            Me.columnTong_Khoi_LuongBanKe = New DataColumn("Tong_Khoi_LuongBanKe", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Khoi_LuongBanKe)
            Me.columnLoai_Chuyen_Thu = New DataColumn("Loai_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_Chuyen_Thu)
            Me.columnTong_Khoi_Luong_Bp = New DataColumn("Tong_Khoi_Luong_Bp", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Khoi_Luong_Bp)
        End Sub
        
        Public Function NewE2_Di_Ban_Ke_Receptacle_headerRow() As E2_Di_Ban_Ke_Receptacle_headerRow
            Return CType(Me.NewRow,E2_Di_Ban_Ke_Receptacle_headerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E2_Di_Ban_Ke_Receptacle_headerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E2_Di_Ban_Ke_Receptacle_headerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E2_Di_Ban_Ke_Receptacle_headerRowChangedEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_Ke_Receptacle_headerRowChanged(Me, New E2_Di_Ban_Ke_Receptacle_headerRowChangeEvent(CType(e.Row,E2_Di_Ban_Ke_Receptacle_headerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E2_Di_Ban_Ke_Receptacle_headerRowChangingEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_Ke_Receptacle_headerRowChanging(Me, New E2_Di_Ban_Ke_Receptacle_headerRowChangeEvent(CType(e.Row,E2_Di_Ban_Ke_Receptacle_headerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E2_Di_Ban_Ke_Receptacle_headerRowDeletedEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_Ke_Receptacle_headerRowDeleted(Me, New E2_Di_Ban_Ke_Receptacle_headerRowChangeEvent(CType(e.Row,E2_Di_Ban_Ke_Receptacle_headerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E2_Di_Ban_Ke_Receptacle_headerRowDeletingEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_Ke_Receptacle_headerRowDeleting(Me, New E2_Di_Ban_Ke_Receptacle_headerRowChangeEvent(CType(e.Row,E2_Di_Ban_Ke_Receptacle_headerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE2_Di_Ban_Ke_Receptacle_headerRow(ByVal row As E2_Di_Ban_Ke_Receptacle_headerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_Ke_Receptacle_headerRow
        Inherits DataRow
        
        Private tableE2_Di_Ban_Ke_Receptacle_header As E2_Di_Ban_Ke_Receptacle_headerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE2_Di_Ban_Ke_Receptacle_header = CType(Me.Table,E2_Di_Ban_Ke_Receptacle_headerDataTable)
        End Sub
        
        Public Property Ten_Bc_Khai_Thac As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ten_Bc_Khai_ThacColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ten_Bc_Khai_ThacColumn) = value
            End Set
        End Property
        
        Public Property Ten_Duong_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ten_Duong_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ten_Duong_ThuColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Bay As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ngay_BayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ngay_BayColumn) = value
            End Set
        End Property
        
        Public Property So_Chuyen_Thu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.So_Chuyen_ThuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.So_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Ten_Nuoc As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ten_NuocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ten_NuocColumn) = value
            End Set
        End Property
        
        Public Property Chuyen_bay As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Chuyen_bayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Chuyen_bayColumn) = value
            End Set
        End Property
        
        Public Property Despatch_id As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Despatch_idColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Despatch_idColumn) = value
            End Set
        End Property
        
        Public Property Tong_Khoi_LuongBanKe As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Tong_Khoi_LuongBanKeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Tong_Khoi_LuongBanKeColumn) = value
            End Set
        End Property
        
        Public Property Loai_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Loai_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Loai_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Tong_Khoi_Luong_Bp As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Tong_Khoi_Luong_BpColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Tong_Khoi_Luong_BpColumn) = value
            End Set
        End Property
        
        Public Function IsTen_Bc_Khai_ThacNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ten_Bc_Khai_ThacColumn)
        End Function
        
        Public Sub SetTen_Bc_Khai_ThacNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ten_Bc_Khai_ThacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Duong_ThuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ten_Duong_ThuColumn)
        End Function
        
        Public Sub SetTen_Duong_ThuNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ten_Duong_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_BayNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ngay_BayColumn)
        End Function
        
        Public Sub SetNgay_BayNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ngay_BayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle_header.So_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetSo_Chuyen_ThuNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.So_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_NuocNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ten_NuocColumn)
        End Function
        
        Public Sub SetTen_NuocNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Ten_NuocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChuyen_bayNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle_header.Chuyen_bayColumn)
        End Function
        
        Public Sub SetChuyen_bayNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Chuyen_bayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDespatch_idNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle_header.Despatch_idColumn)
        End Function
        
        Public Sub SetDespatch_idNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Despatch_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_Khoi_LuongBanKeNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle_header.Tong_Khoi_LuongBanKeColumn)
        End Function
        
        Public Sub SetTong_Khoi_LuongBanKeNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Tong_Khoi_LuongBanKeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle_header.Loai_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetLoai_Chuyen_ThuNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Loai_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_Khoi_Luong_BpNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_Receptacle_header.Tong_Khoi_Luong_BpColumn)
        End Function
        
        Public Sub SetTong_Khoi_Luong_BpNull()
            Me(Me.tableE2_Di_Ban_Ke_Receptacle_header.Tong_Khoi_Luong_BpColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_Ke_Receptacle_headerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E2_Di_Ban_Ke_Receptacle_headerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E2_Di_Ban_Ke_Receptacle_headerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E2_Di_Ban_Ke_Receptacle_headerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Den_Ban_Ke_KhaiThac_headerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTen_Bc_Khai_Thac As DataColumn
        
        Private columnma_bc As DataColumn
        
        Private columnma_bc_khai_thac As DataColumn
        
        Private columnTen_Nuoc As DataColumn
        
        Private columnLoai_Chuyen_Thu As DataColumn
        
        Private columnngay_dong As DataColumn
        
        Private columngio_dong As DataColumn
        
        Private columntui_so As DataColumn
        
        Private columnTong_Khoi_LuongBanKe_bp As DataColumn
        
        Private columnSo_chuyen_thu As DataColumn
        
        Private columnNguoi_Dung As DataColumn
        
        Private columnTong_So_Buu_Pham As DataColumn
        
        Private columnEMS_DUOI_5KG As DataColumn
        
        Private columnEMS_TREN_5KG As DataColumn
        
        Private columnTui_F As DataColumn
        
        Private columnTen_bc As DataColumn
        
        Friend Sub New()
            MyBase.New("E2_Den_Ban_Ke_KhaiThac_header")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Bc_Khai_ThacColumn As DataColumn
            Get
                Return Me.columnTen_Bc_Khai_Thac
            End Get
        End Property
        
        Friend ReadOnly Property ma_bcColumn As DataColumn
            Get
                Return Me.columnma_bc
            End Get
        End Property
        
        Friend ReadOnly Property ma_bc_khai_thacColumn As DataColumn
            Get
                Return Me.columnma_bc_khai_thac
            End Get
        End Property
        
        Friend ReadOnly Property Ten_NuocColumn As DataColumn
            Get
                Return Me.columnTen_Nuoc
            End Get
        End Property
        
        Friend ReadOnly Property Loai_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnLoai_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property ngay_dongColumn As DataColumn
            Get
                Return Me.columnngay_dong
            End Get
        End Property
        
        Friend ReadOnly Property gio_dongColumn As DataColumn
            Get
                Return Me.columngio_dong
            End Get
        End Property
        
        Friend ReadOnly Property tui_soColumn As DataColumn
            Get
                Return Me.columntui_so
            End Get
        End Property
        
        Friend ReadOnly Property Tong_Khoi_LuongBanKe_bpColumn As DataColumn
            Get
                Return Me.columnTong_Khoi_LuongBanKe_bp
            End Get
        End Property
        
        Friend ReadOnly Property So_chuyen_thuColumn As DataColumn
            Get
                Return Me.columnSo_chuyen_thu
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_DungColumn As DataColumn
            Get
                Return Me.columnNguoi_Dung
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_Buu_PhamColumn As DataColumn
            Get
                Return Me.columnTong_So_Buu_Pham
            End Get
        End Property
        
        Friend ReadOnly Property EMS_DUOI_5KGColumn As DataColumn
            Get
                Return Me.columnEMS_DUOI_5KG
            End Get
        End Property
        
        Friend ReadOnly Property EMS_TREN_5KGColumn As DataColumn
            Get
                Return Me.columnEMS_TREN_5KG
            End Get
        End Property
        
        Friend ReadOnly Property Tui_FColumn As DataColumn
            Get
                Return Me.columnTui_F
            End Get
        End Property
        
        Friend ReadOnly Property Ten_bcColumn As DataColumn
            Get
                Return Me.columnTen_bc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E2_Den_Ban_Ke_KhaiThac_headerRow
            Get
                Return CType(Me.Rows(index),E2_Den_Ban_Ke_KhaiThac_headerRow)
            End Get
        End Property
        
        Public Event E2_Den_Ban_Ke_KhaiThac_headerRowChanged As E2_Den_Ban_Ke_KhaiThac_headerRowChangeEventHandler
        
        Public Event E2_Den_Ban_Ke_KhaiThac_headerRowChanging As E2_Den_Ban_Ke_KhaiThac_headerRowChangeEventHandler
        
        Public Event E2_Den_Ban_Ke_KhaiThac_headerRowDeleted As E2_Den_Ban_Ke_KhaiThac_headerRowChangeEventHandler
        
        Public Event E2_Den_Ban_Ke_KhaiThac_headerRowDeleting As E2_Den_Ban_Ke_KhaiThac_headerRowChangeEventHandler
        
        Public Overloads Sub AddE2_Den_Ban_Ke_KhaiThac_headerRow(ByVal row As E2_Den_Ban_Ke_KhaiThac_headerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE2_Den_Ban_Ke_KhaiThac_headerRow( _
                    ByVal Ten_Bc_Khai_Thac As String,  _
                    ByVal ma_bc As String,  _
                    ByVal ma_bc_khai_thac As String,  _
                    ByVal Ten_Nuoc As String,  _
                    ByVal Loai_Chuyen_Thu As String,  _
                    ByVal ngay_dong As Integer,  _
                    ByVal gio_dong As String,  _
                    ByVal tui_so As Integer,  _
                    ByVal Tong_Khoi_LuongBanKe_bp As Integer,  _
                    ByVal So_chuyen_thu As Integer,  _
                    ByVal Nguoi_Dung As String,  _
                    ByVal Tong_So_Buu_Pham As Integer,  _
                    ByVal EMS_DUOI_5KG As Integer,  _
                    ByVal EMS_TREN_5KG As Integer,  _
                    ByVal Tui_F As Boolean,  _
                    ByVal Ten_bc As String) As E2_Den_Ban_Ke_KhaiThac_headerRow
            Dim rowE2_Den_Ban_Ke_KhaiThac_headerRow As E2_Den_Ban_Ke_KhaiThac_headerRow = CType(Me.NewRow,E2_Den_Ban_Ke_KhaiThac_headerRow)
            rowE2_Den_Ban_Ke_KhaiThac_headerRow.ItemArray = New Object() {Ten_Bc_Khai_Thac, ma_bc, ma_bc_khai_thac, Ten_Nuoc, Loai_Chuyen_Thu, ngay_dong, gio_dong, tui_so, Tong_Khoi_LuongBanKe_bp, So_chuyen_thu, Nguoi_Dung, Tong_So_Buu_Pham, EMS_DUOI_5KG, EMS_TREN_5KG, Tui_F, Ten_bc}
            Me.Rows.Add(rowE2_Den_Ban_Ke_KhaiThac_headerRow)
            Return rowE2_Den_Ban_Ke_KhaiThac_headerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E2_Den_Ban_Ke_KhaiThac_headerDataTable = CType(MyBase.Clone,E2_Den_Ban_Ke_KhaiThac_headerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E2_Den_Ban_Ke_KhaiThac_headerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTen_Bc_Khai_Thac = Me.Columns("Ten_Bc_Khai_Thac")
            Me.columnma_bc = Me.Columns("ma_bc")
            Me.columnma_bc_khai_thac = Me.Columns("ma_bc_khai_thac")
            Me.columnTen_Nuoc = Me.Columns("Ten_Nuoc")
            Me.columnLoai_Chuyen_Thu = Me.Columns("Loai_Chuyen_Thu")
            Me.columnngay_dong = Me.Columns("ngay_dong")
            Me.columngio_dong = Me.Columns("gio_dong")
            Me.columntui_so = Me.Columns("tui_so")
            Me.columnTong_Khoi_LuongBanKe_bp = Me.Columns("Tong_Khoi_LuongBanKe_bp")
            Me.columnSo_chuyen_thu = Me.Columns("So_chuyen_thu")
            Me.columnNguoi_Dung = Me.Columns("Nguoi_Dung")
            Me.columnTong_So_Buu_Pham = Me.Columns("Tong_So_Buu_Pham")
            Me.columnEMS_DUOI_5KG = Me.Columns("EMS_DUOI_5KG")
            Me.columnEMS_TREN_5KG = Me.Columns("EMS_TREN_5KG")
            Me.columnTui_F = Me.Columns("Tui_F")
            Me.columnTen_bc = Me.Columns("Ten_bc")
        End Sub
        
        Private Sub InitClass()
            Me.columnTen_Bc_Khai_Thac = New DataColumn("Ten_Bc_Khai_Thac", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Bc_Khai_Thac)
            Me.columnma_bc = New DataColumn("ma_bc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnma_bc)
            Me.columnma_bc_khai_thac = New DataColumn("ma_bc_khai_thac", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnma_bc_khai_thac)
            Me.columnTen_Nuoc = New DataColumn("Ten_Nuoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Nuoc)
            Me.columnLoai_Chuyen_Thu = New DataColumn("Loai_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_Chuyen_Thu)
            Me.columnngay_dong = New DataColumn("ngay_dong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnngay_dong)
            Me.columngio_dong = New DataColumn("gio_dong", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngio_dong)
            Me.columntui_so = New DataColumn("tui_so", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntui_so)
            Me.columnTong_Khoi_LuongBanKe_bp = New DataColumn("Tong_Khoi_LuongBanKe_bp", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Khoi_LuongBanKe_bp)
            Me.columnSo_chuyen_thu = New DataColumn("So_chuyen_thu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_chuyen_thu)
            Me.columnNguoi_Dung = New DataColumn("Nguoi_Dung", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Dung)
            Me.columnTong_So_Buu_Pham = New DataColumn("Tong_So_Buu_Pham", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_Buu_Pham)
            Me.columnEMS_DUOI_5KG = New DataColumn("EMS_DUOI_5KG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMS_DUOI_5KG)
            Me.columnEMS_TREN_5KG = New DataColumn("EMS_TREN_5KG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMS_TREN_5KG)
            Me.columnTui_F = New DataColumn("Tui_F", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_F)
            Me.columnTen_bc = New DataColumn("Ten_bc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_bc)
        End Sub
        
        Public Function NewE2_Den_Ban_Ke_KhaiThac_headerRow() As E2_Den_Ban_Ke_KhaiThac_headerRow
            Return CType(Me.NewRow,E2_Den_Ban_Ke_KhaiThac_headerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E2_Den_Ban_Ke_KhaiThac_headerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E2_Den_Ban_Ke_KhaiThac_headerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E2_Den_Ban_Ke_KhaiThac_headerRowChangedEvent) Is Nothing) Then
                RaiseEvent E2_Den_Ban_Ke_KhaiThac_headerRowChanged(Me, New E2_Den_Ban_Ke_KhaiThac_headerRowChangeEvent(CType(e.Row,E2_Den_Ban_Ke_KhaiThac_headerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E2_Den_Ban_Ke_KhaiThac_headerRowChangingEvent) Is Nothing) Then
                RaiseEvent E2_Den_Ban_Ke_KhaiThac_headerRowChanging(Me, New E2_Den_Ban_Ke_KhaiThac_headerRowChangeEvent(CType(e.Row,E2_Den_Ban_Ke_KhaiThac_headerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E2_Den_Ban_Ke_KhaiThac_headerRowDeletedEvent) Is Nothing) Then
                RaiseEvent E2_Den_Ban_Ke_KhaiThac_headerRowDeleted(Me, New E2_Den_Ban_Ke_KhaiThac_headerRowChangeEvent(CType(e.Row,E2_Den_Ban_Ke_KhaiThac_headerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E2_Den_Ban_Ke_KhaiThac_headerRowDeletingEvent) Is Nothing) Then
                RaiseEvent E2_Den_Ban_Ke_KhaiThac_headerRowDeleting(Me, New E2_Den_Ban_Ke_KhaiThac_headerRowChangeEvent(CType(e.Row,E2_Den_Ban_Ke_KhaiThac_headerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE2_Den_Ban_Ke_KhaiThac_headerRow(ByVal row As E2_Den_Ban_Ke_KhaiThac_headerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Den_Ban_Ke_KhaiThac_headerRow
        Inherits DataRow
        
        Private tableE2_Den_Ban_Ke_KhaiThac_header As E2_Den_Ban_Ke_KhaiThac_headerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE2_Den_Ban_Ke_KhaiThac_header = CType(Me.Table,E2_Den_Ban_Ke_KhaiThac_headerDataTable)
        End Sub
        
        Public Property Ten_Bc_Khai_Thac As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Ten_Bc_Khai_ThacColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Ten_Bc_Khai_ThacColumn) = value
            End Set
        End Property
        
        Public Property ma_bc As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.ma_bcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.ma_bcColumn) = value
            End Set
        End Property
        
        Public Property ma_bc_khai_thac As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.ma_bc_khai_thacColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.ma_bc_khai_thacColumn) = value
            End Set
        End Property
        
        Public Property Ten_Nuoc As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Ten_NuocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Ten_NuocColumn) = value
            End Set
        End Property
        
        Public Property Loai_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Loai_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Loai_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property ngay_dong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.ngay_dongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.ngay_dongColumn) = value
            End Set
        End Property
        
        Public Property gio_dong As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.gio_dongColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.gio_dongColumn) = value
            End Set
        End Property
        
        Public Property tui_so As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.tui_soColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.tui_soColumn) = value
            End Set
        End Property
        
        Public Property Tong_Khoi_LuongBanKe_bp As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Tong_Khoi_LuongBanKe_bpColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Tong_Khoi_LuongBanKe_bpColumn) = value
            End Set
        End Property
        
        Public Property So_chuyen_thu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.So_chuyen_thuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.So_chuyen_thuColumn) = value
            End Set
        End Property
        
        Public Property Nguoi_Dung As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Nguoi_DungColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Nguoi_DungColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_Buu_Pham As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Tong_So_Buu_PhamColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Tong_So_Buu_PhamColumn) = value
            End Set
        End Property
        
        Public Property EMS_DUOI_5KG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.EMS_DUOI_5KGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.EMS_DUOI_5KGColumn) = value
            End Set
        End Property
        
        Public Property EMS_TREN_5KG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.EMS_TREN_5KGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.EMS_TREN_5KGColumn) = value
            End Set
        End Property
        
        Public Property Tui_F As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Tui_FColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Tui_FColumn) = value
            End Set
        End Property
        
        Public Property Ten_bc As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Ten_bcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Ten_bcColumn) = value
            End Set
        End Property
        
        Public Function IsTen_Bc_Khai_ThacNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Ten_Bc_Khai_ThacColumn)
        End Function
        
        Public Sub SetTen_Bc_Khai_ThacNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Ten_Bc_Khai_ThacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isma_bcNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.ma_bcColumn)
        End Function
        
        Public Sub Setma_bcNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.ma_bcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isma_bc_khai_thacNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.ma_bc_khai_thacColumn)
        End Function
        
        Public Sub Setma_bc_khai_thacNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.ma_bc_khai_thacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_NuocNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Ten_NuocColumn)
        End Function
        
        Public Sub SetTen_NuocNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Ten_NuocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Loai_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetLoai_Chuyen_ThuNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Loai_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isngay_dongNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.ngay_dongColumn)
        End Function
        
        Public Sub Setngay_dongNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.ngay_dongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgio_dongNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.gio_dongColumn)
        End Function
        
        Public Sub Setgio_dongNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.gio_dongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istui_soNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.tui_soColumn)
        End Function
        
        Public Sub Settui_soNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.tui_soColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_Khoi_LuongBanKe_bpNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Tong_Khoi_LuongBanKe_bpColumn)
        End Function
        
        Public Sub SetTong_Khoi_LuongBanKe_bpNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Tong_Khoi_LuongBanKe_bpColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_chuyen_thuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.So_chuyen_thuColumn)
        End Function
        
        Public Sub SetSo_chuyen_thuNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.So_chuyen_thuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_DungNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Nguoi_DungColumn)
        End Function
        
        Public Sub SetNguoi_DungNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Nguoi_DungColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_Buu_PhamNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Tong_So_Buu_PhamColumn)
        End Function
        
        Public Sub SetTong_So_Buu_PhamNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Tong_So_Buu_PhamColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMS_DUOI_5KGNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.EMS_DUOI_5KGColumn)
        End Function
        
        Public Sub SetEMS_DUOI_5KGNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.EMS_DUOI_5KGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMS_TREN_5KGNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.EMS_TREN_5KGColumn)
        End Function
        
        Public Sub SetEMS_TREN_5KGNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.EMS_TREN_5KGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_FNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Tui_FColumn)
        End Function
        
        Public Sub SetTui_FNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Tui_FColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_bcNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Ten_bcColumn)
        End Function
        
        Public Sub SetTen_bcNull()
            Me(Me.tableE2_Den_Ban_Ke_KhaiThac_header.Ten_bcColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Den_Ban_Ke_KhaiThac_headerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E2_Den_Ban_Ke_KhaiThac_headerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E2_Den_Ban_Ke_KhaiThac_headerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E2_Den_Ban_Ke_KhaiThac_headerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Ban_Ke_Chi_Tiet_Tui_FDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTui_So As DataColumn
        
        Private columnSan_Luong1 As DataColumn
        
        Private columnSan_Luong2 As DataColumn
        
        Private columnKhoi_Luong1 As DataColumn
        
        Private columnKhoi_Luong2 As DataColumn
        
        Private columnHoa_Hong1 As DataColumn
        
        Private columnHoa_Hong2 As DataColumn
        
        Private columnTui_F As DataColumn
        
        Friend Sub New()
            MyBase.New("E2_Ban_Ke_Chi_Tiet_Tui_F")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Tui_SoColumn As DataColumn
            Get
                Return Me.columnTui_So
            End Get
        End Property
        
        Friend ReadOnly Property San_Luong1Column As DataColumn
            Get
                Return Me.columnSan_Luong1
            End Get
        End Property
        
        Friend ReadOnly Property San_Luong2Column As DataColumn
            Get
                Return Me.columnSan_Luong2
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_Luong1Column As DataColumn
            Get
                Return Me.columnKhoi_Luong1
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_Luong2Column As DataColumn
            Get
                Return Me.columnKhoi_Luong2
            End Get
        End Property
        
        Friend ReadOnly Property Hoa_Hong1Column As DataColumn
            Get
                Return Me.columnHoa_Hong1
            End Get
        End Property
        
        Friend ReadOnly Property Hoa_Hong2Column As DataColumn
            Get
                Return Me.columnHoa_Hong2
            End Get
        End Property
        
        Friend ReadOnly Property Tui_FColumn As DataColumn
            Get
                Return Me.columnTui_F
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E2_Ban_Ke_Chi_Tiet_Tui_FRow
            Get
                Return CType(Me.Rows(index),E2_Ban_Ke_Chi_Tiet_Tui_FRow)
            End Get
        End Property
        
        Public Event E2_Ban_Ke_Chi_Tiet_Tui_FRowChanged As E2_Ban_Ke_Chi_Tiet_Tui_FRowChangeEventHandler
        
        Public Event E2_Ban_Ke_Chi_Tiet_Tui_FRowChanging As E2_Ban_Ke_Chi_Tiet_Tui_FRowChangeEventHandler
        
        Public Event E2_Ban_Ke_Chi_Tiet_Tui_FRowDeleted As E2_Ban_Ke_Chi_Tiet_Tui_FRowChangeEventHandler
        
        Public Event E2_Ban_Ke_Chi_Tiet_Tui_FRowDeleting As E2_Ban_Ke_Chi_Tiet_Tui_FRowChangeEventHandler
        
        Public Overloads Sub AddE2_Ban_Ke_Chi_Tiet_Tui_FRow(ByVal row As E2_Ban_Ke_Chi_Tiet_Tui_FRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE2_Ban_Ke_Chi_Tiet_Tui_FRow(ByVal Tui_So As Integer, ByVal San_Luong1 As Integer, ByVal San_Luong2 As Integer, ByVal Khoi_Luong1 As Integer, ByVal Khoi_Luong2 As Integer, ByVal Hoa_Hong1 As Integer, ByVal Hoa_Hong2 As Integer, ByVal Tui_F As Boolean) As E2_Ban_Ke_Chi_Tiet_Tui_FRow
            Dim rowE2_Ban_Ke_Chi_Tiet_Tui_FRow As E2_Ban_Ke_Chi_Tiet_Tui_FRow = CType(Me.NewRow,E2_Ban_Ke_Chi_Tiet_Tui_FRow)
            rowE2_Ban_Ke_Chi_Tiet_Tui_FRow.ItemArray = New Object() {Tui_So, San_Luong1, San_Luong2, Khoi_Luong1, Khoi_Luong2, Hoa_Hong1, Hoa_Hong2, Tui_F}
            Me.Rows.Add(rowE2_Ban_Ke_Chi_Tiet_Tui_FRow)
            Return rowE2_Ban_Ke_Chi_Tiet_Tui_FRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E2_Ban_Ke_Chi_Tiet_Tui_FDataTable = CType(MyBase.Clone,E2_Ban_Ke_Chi_Tiet_Tui_FDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E2_Ban_Ke_Chi_Tiet_Tui_FDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTui_So = Me.Columns("Tui_So")
            Me.columnSan_Luong1 = Me.Columns("San_Luong1")
            Me.columnSan_Luong2 = Me.Columns("San_Luong2")
            Me.columnKhoi_Luong1 = Me.Columns("Khoi_Luong1")
            Me.columnKhoi_Luong2 = Me.Columns("Khoi_Luong2")
            Me.columnHoa_Hong1 = Me.Columns("Hoa_Hong1")
            Me.columnHoa_Hong2 = Me.Columns("Hoa_Hong2")
            Me.columnTui_F = Me.Columns("Tui_F")
        End Sub
        
        Private Sub InitClass()
            Me.columnTui_So = New DataColumn("Tui_So", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So)
            Me.columnSan_Luong1 = New DataColumn("San_Luong1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSan_Luong1)
            Me.columnSan_Luong2 = New DataColumn("San_Luong2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSan_Luong2)
            Me.columnKhoi_Luong1 = New DataColumn("Khoi_Luong1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong1)
            Me.columnKhoi_Luong2 = New DataColumn("Khoi_Luong2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong2)
            Me.columnHoa_Hong1 = New DataColumn("Hoa_Hong1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHoa_Hong1)
            Me.columnHoa_Hong2 = New DataColumn("Hoa_Hong2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHoa_Hong2)
            Me.columnTui_F = New DataColumn("Tui_F", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_F)
        End Sub
        
        Public Function NewE2_Ban_Ke_Chi_Tiet_Tui_FRow() As E2_Ban_Ke_Chi_Tiet_Tui_FRow
            Return CType(Me.NewRow,E2_Ban_Ke_Chi_Tiet_Tui_FRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E2_Ban_Ke_Chi_Tiet_Tui_FRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E2_Ban_Ke_Chi_Tiet_Tui_FRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E2_Ban_Ke_Chi_Tiet_Tui_FRowChangedEvent) Is Nothing) Then
                RaiseEvent E2_Ban_Ke_Chi_Tiet_Tui_FRowChanged(Me, New E2_Ban_Ke_Chi_Tiet_Tui_FRowChangeEvent(CType(e.Row,E2_Ban_Ke_Chi_Tiet_Tui_FRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E2_Ban_Ke_Chi_Tiet_Tui_FRowChangingEvent) Is Nothing) Then
                RaiseEvent E2_Ban_Ke_Chi_Tiet_Tui_FRowChanging(Me, New E2_Ban_Ke_Chi_Tiet_Tui_FRowChangeEvent(CType(e.Row,E2_Ban_Ke_Chi_Tiet_Tui_FRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E2_Ban_Ke_Chi_Tiet_Tui_FRowDeletedEvent) Is Nothing) Then
                RaiseEvent E2_Ban_Ke_Chi_Tiet_Tui_FRowDeleted(Me, New E2_Ban_Ke_Chi_Tiet_Tui_FRowChangeEvent(CType(e.Row,E2_Ban_Ke_Chi_Tiet_Tui_FRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E2_Ban_Ke_Chi_Tiet_Tui_FRowDeletingEvent) Is Nothing) Then
                RaiseEvent E2_Ban_Ke_Chi_Tiet_Tui_FRowDeleting(Me, New E2_Ban_Ke_Chi_Tiet_Tui_FRowChangeEvent(CType(e.Row,E2_Ban_Ke_Chi_Tiet_Tui_FRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE2_Ban_Ke_Chi_Tiet_Tui_FRow(ByVal row As E2_Ban_Ke_Chi_Tiet_Tui_FRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Ban_Ke_Chi_Tiet_Tui_FRow
        Inherits DataRow
        
        Private tableE2_Ban_Ke_Chi_Tiet_Tui_F As E2_Ban_Ke_Chi_Tiet_Tui_FDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F = CType(Me.Table,E2_Ban_Ke_Chi_Tiet_Tui_FDataTable)
        End Sub
        
        Public Property Tui_So As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Tui_SoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Tui_SoColumn) = value
            End Set
        End Property
        
        Public Property San_Luong1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.San_Luong1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.San_Luong1Column) = value
            End Set
        End Property
        
        Public Property San_Luong2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.San_Luong2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.San_Luong2Column) = value
            End Set
        End Property
        
        Public Property Khoi_Luong1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Khoi_Luong1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Khoi_Luong1Column) = value
            End Set
        End Property
        
        Public Property Khoi_Luong2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Khoi_Luong2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Khoi_Luong2Column) = value
            End Set
        End Property
        
        Public Property Hoa_Hong1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Hoa_Hong1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Hoa_Hong1Column) = value
            End Set
        End Property
        
        Public Property Hoa_Hong2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Hoa_Hong2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Hoa_Hong2Column) = value
            End Set
        End Property
        
        Public Property Tui_F As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Tui_FColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Tui_FColumn) = value
            End Set
        End Property
        
        Public Function IsTui_SoNull() As Boolean
            Return Me.IsNull(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Tui_SoColumn)
        End Function
        
        Public Sub SetTui_SoNull()
            Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Tui_SoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSan_Luong1Null() As Boolean
            Return Me.IsNull(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.San_Luong1Column)
        End Function
        
        Public Sub SetSan_Luong1Null()
            Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.San_Luong1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSan_Luong2Null() As Boolean
            Return Me.IsNull(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.San_Luong2Column)
        End Function
        
        Public Sub SetSan_Luong2Null()
            Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.San_Luong2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_Luong1Null() As Boolean
            Return Me.IsNull(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Khoi_Luong1Column)
        End Function
        
        Public Sub SetKhoi_Luong1Null()
            Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Khoi_Luong1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_Luong2Null() As Boolean
            Return Me.IsNull(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Khoi_Luong2Column)
        End Function
        
        Public Sub SetKhoi_Luong2Null()
            Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Khoi_Luong2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsHoa_Hong1Null() As Boolean
            Return Me.IsNull(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Hoa_Hong1Column)
        End Function
        
        Public Sub SetHoa_Hong1Null()
            Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Hoa_Hong1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsHoa_Hong2Null() As Boolean
            Return Me.IsNull(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Hoa_Hong2Column)
        End Function
        
        Public Sub SetHoa_Hong2Null()
            Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Hoa_Hong2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_FNull() As Boolean
            Return Me.IsNull(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Tui_FColumn)
        End Function
        
        Public Sub SetTui_FNull()
            Me(Me.tableE2_Ban_Ke_Chi_Tiet_Tui_F.Tui_FColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Ban_Ke_Chi_Tiet_Tui_FRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E2_Ban_Ke_Chi_Tiet_Tui_FRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E2_Ban_Ke_Chi_Tiet_Tui_FRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E2_Ban_Ke_Chi_Tiet_Tui_FRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Den_Ban_Ke_TKDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTong_Ket_F As DataColumn
        
        Friend Sub New()
            MyBase.New("E2_Den_Ban_Ke_TK")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Tong_Ket_FColumn As DataColumn
            Get
                Return Me.columnTong_Ket_F
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E2_Den_Ban_Ke_TKRow
            Get
                Return CType(Me.Rows(index),E2_Den_Ban_Ke_TKRow)
            End Get
        End Property
        
        Public Event E2_Den_Ban_Ke_TKRowChanged As E2_Den_Ban_Ke_TKRowChangeEventHandler
        
        Public Event E2_Den_Ban_Ke_TKRowChanging As E2_Den_Ban_Ke_TKRowChangeEventHandler
        
        Public Event E2_Den_Ban_Ke_TKRowDeleted As E2_Den_Ban_Ke_TKRowChangeEventHandler
        
        Public Event E2_Den_Ban_Ke_TKRowDeleting As E2_Den_Ban_Ke_TKRowChangeEventHandler
        
        Public Overloads Sub AddE2_Den_Ban_Ke_TKRow(ByVal row As E2_Den_Ban_Ke_TKRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE2_Den_Ban_Ke_TKRow(ByVal Tong_Ket_F As String) As E2_Den_Ban_Ke_TKRow
            Dim rowE2_Den_Ban_Ke_TKRow As E2_Den_Ban_Ke_TKRow = CType(Me.NewRow,E2_Den_Ban_Ke_TKRow)
            rowE2_Den_Ban_Ke_TKRow.ItemArray = New Object() {Tong_Ket_F}
            Me.Rows.Add(rowE2_Den_Ban_Ke_TKRow)
            Return rowE2_Den_Ban_Ke_TKRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E2_Den_Ban_Ke_TKDataTable = CType(MyBase.Clone,E2_Den_Ban_Ke_TKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E2_Den_Ban_Ke_TKDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTong_Ket_F = Me.Columns("Tong_Ket_F")
        End Sub
        
        Private Sub InitClass()
            Me.columnTong_Ket_F = New DataColumn("Tong_Ket_F", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Ket_F)
        End Sub
        
        Public Function NewE2_Den_Ban_Ke_TKRow() As E2_Den_Ban_Ke_TKRow
            Return CType(Me.NewRow,E2_Den_Ban_Ke_TKRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E2_Den_Ban_Ke_TKRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E2_Den_Ban_Ke_TKRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E2_Den_Ban_Ke_TKRowChangedEvent) Is Nothing) Then
                RaiseEvent E2_Den_Ban_Ke_TKRowChanged(Me, New E2_Den_Ban_Ke_TKRowChangeEvent(CType(e.Row,E2_Den_Ban_Ke_TKRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E2_Den_Ban_Ke_TKRowChangingEvent) Is Nothing) Then
                RaiseEvent E2_Den_Ban_Ke_TKRowChanging(Me, New E2_Den_Ban_Ke_TKRowChangeEvent(CType(e.Row,E2_Den_Ban_Ke_TKRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E2_Den_Ban_Ke_TKRowDeletedEvent) Is Nothing) Then
                RaiseEvent E2_Den_Ban_Ke_TKRowDeleted(Me, New E2_Den_Ban_Ke_TKRowChangeEvent(CType(e.Row,E2_Den_Ban_Ke_TKRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E2_Den_Ban_Ke_TKRowDeletingEvent) Is Nothing) Then
                RaiseEvent E2_Den_Ban_Ke_TKRowDeleting(Me, New E2_Den_Ban_Ke_TKRowChangeEvent(CType(e.Row,E2_Den_Ban_Ke_TKRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE2_Den_Ban_Ke_TKRow(ByVal row As E2_Den_Ban_Ke_TKRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Den_Ban_Ke_TKRow
        Inherits DataRow
        
        Private tableE2_Den_Ban_Ke_TK As E2_Den_Ban_Ke_TKDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE2_Den_Ban_Ke_TK = CType(Me.Table,E2_Den_Ban_Ke_TKDataTable)
        End Sub
        
        Public Property Tong_Ket_F As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Den_Ban_Ke_TK.Tong_Ket_FColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Den_Ban_Ke_TK.Tong_Ket_FColumn) = value
            End Set
        End Property
        
        Public Function IsTong_Ket_FNull() As Boolean
            Return Me.IsNull(Me.tableE2_Den_Ban_Ke_TK.Tong_Ket_FColumn)
        End Function
        
        Public Sub SetTong_Ket_FNull()
            Me(Me.tableE2_Den_Ban_Ke_TK.Tong_Ket_FColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Den_Ban_Ke_TKRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E2_Den_Ban_Ke_TKRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E2_Den_Ban_Ke_TKRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E2_Den_Ban_Ke_TKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_ke_khai_thacDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_E1 As DataColumn
        
        Private columnPhan_Loai As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnGia_Tri_Hang As DataColumn
        
        Private columnMa_Bc_Goc As DataColumn
        
        Private columnMa_Bc_Tra As DataColumn
        
        Private columnCUOC As DataColumn
        
        Private columnGhi_Chu As DataColumn
        
        Private columnId_E2 As DataColumn
        
        Friend Sub New()
            MyBase.New("E2_Di_Ban_ke_khai_thac")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Phan_LoaiColumn As DataColumn
            Get
                Return Me.columnPhan_Loai
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Gia_Tri_HangColumn As DataColumn
            Get
                Return Me.columnGia_Tri_Hang
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_GocColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Goc
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_TraColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Tra
            End Get
        End Property
        
        Friend ReadOnly Property CUOCColumn As DataColumn
            Get
                Return Me.columnCUOC
            End Get
        End Property
        
        Friend ReadOnly Property Ghi_ChuColumn As DataColumn
            Get
                Return Me.columnGhi_Chu
            End Get
        End Property
        
        Friend ReadOnly Property Id_E2Column As DataColumn
            Get
                Return Me.columnId_E2
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E2_Di_Ban_ke_khai_thacRow
            Get
                Return CType(Me.Rows(index),E2_Di_Ban_ke_khai_thacRow)
            End Get
        End Property
        
        Public Event E2_Di_Ban_ke_khai_thacRowChanged As E2_Di_Ban_ke_khai_thacRowChangeEventHandler
        
        Public Event E2_Di_Ban_ke_khai_thacRowChanging As E2_Di_Ban_ke_khai_thacRowChangeEventHandler
        
        Public Event E2_Di_Ban_ke_khai_thacRowDeleted As E2_Di_Ban_ke_khai_thacRowChangeEventHandler
        
        Public Event E2_Di_Ban_ke_khai_thacRowDeleting As E2_Di_Ban_ke_khai_thacRowChangeEventHandler
        
        Public Overloads Sub AddE2_Di_Ban_ke_khai_thacRow(ByVal row As E2_Di_Ban_ke_khai_thacRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE2_Di_Ban_ke_khai_thacRow(ByVal Ma_E1 As String, ByVal Phan_Loai As String, ByVal Khoi_Luong As String, ByVal Gia_Tri_Hang As String, ByVal Ma_Bc_Goc As String, ByVal Ma_Bc_Tra As String, ByVal CUOC As String, ByVal Ghi_Chu As String, ByVal Id_E2 As String) As E2_Di_Ban_ke_khai_thacRow
            Dim rowE2_Di_Ban_ke_khai_thacRow As E2_Di_Ban_ke_khai_thacRow = CType(Me.NewRow,E2_Di_Ban_ke_khai_thacRow)
            rowE2_Di_Ban_ke_khai_thacRow.ItemArray = New Object() {Ma_E1, Phan_Loai, Khoi_Luong, Gia_Tri_Hang, Ma_Bc_Goc, Ma_Bc_Tra, CUOC, Ghi_Chu, Id_E2}
            Me.Rows.Add(rowE2_Di_Ban_ke_khai_thacRow)
            Return rowE2_Di_Ban_ke_khai_thacRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E2_Di_Ban_ke_khai_thacDataTable = CType(MyBase.Clone,E2_Di_Ban_ke_khai_thacDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E2_Di_Ban_ke_khai_thacDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnPhan_Loai = Me.Columns("Phan_Loai")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnGia_Tri_Hang = Me.Columns("Gia_Tri_Hang")
            Me.columnMa_Bc_Goc = Me.Columns("Ma_Bc_Goc")
            Me.columnMa_Bc_Tra = Me.Columns("Ma_Bc_Tra")
            Me.columnCUOC = Me.Columns("CUOC")
            Me.columnGhi_Chu = Me.Columns("Ghi_Chu")
            Me.columnId_E2 = Me.Columns("Id_E2")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnPhan_Loai = New DataColumn("Phan_Loai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhan_Loai)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnGia_Tri_Hang = New DataColumn("Gia_Tri_Hang", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGia_Tri_Hang)
            Me.columnMa_Bc_Goc = New DataColumn("Ma_Bc_Goc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Goc)
            Me.columnMa_Bc_Tra = New DataColumn("Ma_Bc_Tra", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Tra)
            Me.columnCUOC = New DataColumn("CUOC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCUOC)
            Me.columnGhi_Chu = New DataColumn("Ghi_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGhi_Chu)
            Me.columnId_E2 = New DataColumn("Id_E2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_E2)
        End Sub
        
        Public Function NewE2_Di_Ban_ke_khai_thacRow() As E2_Di_Ban_ke_khai_thacRow
            Return CType(Me.NewRow,E2_Di_Ban_ke_khai_thacRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E2_Di_Ban_ke_khai_thacRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E2_Di_Ban_ke_khai_thacRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E2_Di_Ban_ke_khai_thacRowChangedEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_ke_khai_thacRowChanged(Me, New E2_Di_Ban_ke_khai_thacRowChangeEvent(CType(e.Row,E2_Di_Ban_ke_khai_thacRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E2_Di_Ban_ke_khai_thacRowChangingEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_ke_khai_thacRowChanging(Me, New E2_Di_Ban_ke_khai_thacRowChangeEvent(CType(e.Row,E2_Di_Ban_ke_khai_thacRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E2_Di_Ban_ke_khai_thacRowDeletedEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_ke_khai_thacRowDeleted(Me, New E2_Di_Ban_ke_khai_thacRowChangeEvent(CType(e.Row,E2_Di_Ban_ke_khai_thacRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E2_Di_Ban_ke_khai_thacRowDeletingEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_ke_khai_thacRowDeleting(Me, New E2_Di_Ban_ke_khai_thacRowChangeEvent(CType(e.Row,E2_Di_Ban_ke_khai_thacRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE2_Di_Ban_ke_khai_thacRow(ByVal row As E2_Di_Ban_ke_khai_thacRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_ke_khai_thacRow
        Inherits DataRow
        
        Private tableE2_Di_Ban_ke_khai_thac As E2_Di_Ban_ke_khai_thacDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE2_Di_Ban_ke_khai_thac = CType(Me.Table,E2_Di_Ban_ke_khai_thacDataTable)
        End Sub
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke_khai_thac.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke_khai_thac.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Phan_Loai As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke_khai_thac.Phan_LoaiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke_khai_thac.Phan_LoaiColumn) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke_khai_thac.Khoi_LuongColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke_khai_thac.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Gia_Tri_Hang As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke_khai_thac.Gia_Tri_HangColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke_khai_thac.Gia_Tri_HangColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Goc As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke_khai_thac.Ma_Bc_GocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke_khai_thac.Ma_Bc_GocColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Tra As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke_khai_thac.Ma_Bc_TraColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke_khai_thac.Ma_Bc_TraColumn) = value
            End Set
        End Property
        
        Public Property CUOC As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke_khai_thac.CUOCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke_khai_thac.CUOCColumn) = value
            End Set
        End Property
        
        Public Property Ghi_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke_khai_thac.Ghi_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke_khai_thac.Ghi_ChuColumn) = value
            End Set
        End Property
        
        Public Property Id_E2 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_ke_khai_thac.Id_E2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_ke_khai_thac.Id_E2Column) = value
            End Set
        End Property
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke_khai_thac.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableE2_Di_Ban_ke_khai_thac.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhan_LoaiNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke_khai_thac.Phan_LoaiColumn)
        End Function
        
        Public Sub SetPhan_LoaiNull()
            Me(Me.tableE2_Di_Ban_ke_khai_thac.Phan_LoaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke_khai_thac.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableE2_Di_Ban_ke_khai_thac.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGia_Tri_HangNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke_khai_thac.Gia_Tri_HangColumn)
        End Function
        
        Public Sub SetGia_Tri_HangNull()
            Me(Me.tableE2_Di_Ban_ke_khai_thac.Gia_Tri_HangColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_GocNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke_khai_thac.Ma_Bc_GocColumn)
        End Function
        
        Public Sub SetMa_Bc_GocNull()
            Me(Me.tableE2_Di_Ban_ke_khai_thac.Ma_Bc_GocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_TraNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke_khai_thac.Ma_Bc_TraColumn)
        End Function
        
        Public Sub SetMa_Bc_TraNull()
            Me(Me.tableE2_Di_Ban_ke_khai_thac.Ma_Bc_TraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCUOCNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke_khai_thac.CUOCColumn)
        End Function
        
        Public Sub SetCUOCNull()
            Me(Me.tableE2_Di_Ban_ke_khai_thac.CUOCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGhi_ChuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke_khai_thac.Ghi_ChuColumn)
        End Function
        
        Public Sub SetGhi_ChuNull()
            Me(Me.tableE2_Di_Ban_ke_khai_thac.Ghi_ChuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_E2Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_ke_khai_thac.Id_E2Column)
        End Function
        
        Public Sub SetId_E2Null()
            Me(Me.tableE2_Di_Ban_ke_khai_thac.Id_E2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_ke_khai_thacRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E2_Di_Ban_ke_khai_thacRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E2_Di_Ban_ke_khai_thacRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E2_Di_Ban_ke_khai_thacRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_Ke_KhaiThac_headerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTen_Bc_Khai_Thac As DataColumn
        
        Private columnma_bc As DataColumn
        
        Private columnma_bc_khai_thac As DataColumn
        
        Private columnTen_Nuoc As DataColumn
        
        Private columnLoai_Chuyen_Thu As DataColumn
        
        Private columnngay_dong As DataColumn
        
        Private columngio_dong As DataColumn
        
        Private columntui_so As DataColumn
        
        Private columnTong_Khoi_LuongBanKe_bp As DataColumn
        
        Private columnSo_chuyen_thu As DataColumn
        
        Private columnNguoi_Dung As DataColumn
        
        Private columnTong_So_Buu_Pham As DataColumn
        
        Private columnEMS_DUOI_5KG As DataColumn
        
        Private columnEMS_TREN_5KG As DataColumn
        
        Private columnTui_F As DataColumn
        
        Private columnTen_bc As DataColumn
        
        Friend Sub New()
            MyBase.New("E2_Di_Ban_Ke_KhaiThac_header")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Bc_Khai_ThacColumn As DataColumn
            Get
                Return Me.columnTen_Bc_Khai_Thac
            End Get
        End Property
        
        Friend ReadOnly Property ma_bcColumn As DataColumn
            Get
                Return Me.columnma_bc
            End Get
        End Property
        
        Friend ReadOnly Property ma_bc_khai_thacColumn As DataColumn
            Get
                Return Me.columnma_bc_khai_thac
            End Get
        End Property
        
        Friend ReadOnly Property Ten_NuocColumn As DataColumn
            Get
                Return Me.columnTen_Nuoc
            End Get
        End Property
        
        Friend ReadOnly Property Loai_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnLoai_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property ngay_dongColumn As DataColumn
            Get
                Return Me.columnngay_dong
            End Get
        End Property
        
        Friend ReadOnly Property gio_dongColumn As DataColumn
            Get
                Return Me.columngio_dong
            End Get
        End Property
        
        Friend ReadOnly Property tui_soColumn As DataColumn
            Get
                Return Me.columntui_so
            End Get
        End Property
        
        Friend ReadOnly Property Tong_Khoi_LuongBanKe_bpColumn As DataColumn
            Get
                Return Me.columnTong_Khoi_LuongBanKe_bp
            End Get
        End Property
        
        Friend ReadOnly Property So_chuyen_thuColumn As DataColumn
            Get
                Return Me.columnSo_chuyen_thu
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_DungColumn As DataColumn
            Get
                Return Me.columnNguoi_Dung
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_Buu_PhamColumn As DataColumn
            Get
                Return Me.columnTong_So_Buu_Pham
            End Get
        End Property
        
        Friend ReadOnly Property EMS_DUOI_5KGColumn As DataColumn
            Get
                Return Me.columnEMS_DUOI_5KG
            End Get
        End Property
        
        Friend ReadOnly Property EMS_TREN_5KGColumn As DataColumn
            Get
                Return Me.columnEMS_TREN_5KG
            End Get
        End Property
        
        Friend ReadOnly Property Tui_FColumn As DataColumn
            Get
                Return Me.columnTui_F
            End Get
        End Property
        
        Friend ReadOnly Property Ten_bcColumn As DataColumn
            Get
                Return Me.columnTen_bc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E2_Di_Ban_Ke_KhaiThac_headerRow
            Get
                Return CType(Me.Rows(index),E2_Di_Ban_Ke_KhaiThac_headerRow)
            End Get
        End Property
        
        Public Event E2_Di_Ban_Ke_KhaiThac_headerRowChanged As E2_Di_Ban_Ke_KhaiThac_headerRowChangeEventHandler
        
        Public Event E2_Di_Ban_Ke_KhaiThac_headerRowChanging As E2_Di_Ban_Ke_KhaiThac_headerRowChangeEventHandler
        
        Public Event E2_Di_Ban_Ke_KhaiThac_headerRowDeleted As E2_Di_Ban_Ke_KhaiThac_headerRowChangeEventHandler
        
        Public Event E2_Di_Ban_Ke_KhaiThac_headerRowDeleting As E2_Di_Ban_Ke_KhaiThac_headerRowChangeEventHandler
        
        Public Overloads Sub AddE2_Di_Ban_Ke_KhaiThac_headerRow(ByVal row As E2_Di_Ban_Ke_KhaiThac_headerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE2_Di_Ban_Ke_KhaiThac_headerRow( _
                    ByVal Ten_Bc_Khai_Thac As String,  _
                    ByVal ma_bc As String,  _
                    ByVal ma_bc_khai_thac As String,  _
                    ByVal Ten_Nuoc As String,  _
                    ByVal Loai_Chuyen_Thu As String,  _
                    ByVal ngay_dong As Integer,  _
                    ByVal gio_dong As String,  _
                    ByVal tui_so As Integer,  _
                    ByVal Tong_Khoi_LuongBanKe_bp As Integer,  _
                    ByVal So_chuyen_thu As Integer,  _
                    ByVal Nguoi_Dung As String,  _
                    ByVal Tong_So_Buu_Pham As Integer,  _
                    ByVal EMS_DUOI_5KG As Integer,  _
                    ByVal EMS_TREN_5KG As Integer,  _
                    ByVal Tui_F As Boolean,  _
                    ByVal Ten_bc As String) As E2_Di_Ban_Ke_KhaiThac_headerRow
            Dim rowE2_Di_Ban_Ke_KhaiThac_headerRow As E2_Di_Ban_Ke_KhaiThac_headerRow = CType(Me.NewRow,E2_Di_Ban_Ke_KhaiThac_headerRow)
            rowE2_Di_Ban_Ke_KhaiThac_headerRow.ItemArray = New Object() {Ten_Bc_Khai_Thac, ma_bc, ma_bc_khai_thac, Ten_Nuoc, Loai_Chuyen_Thu, ngay_dong, gio_dong, tui_so, Tong_Khoi_LuongBanKe_bp, So_chuyen_thu, Nguoi_Dung, Tong_So_Buu_Pham, EMS_DUOI_5KG, EMS_TREN_5KG, Tui_F, Ten_bc}
            Me.Rows.Add(rowE2_Di_Ban_Ke_KhaiThac_headerRow)
            Return rowE2_Di_Ban_Ke_KhaiThac_headerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E2_Di_Ban_Ke_KhaiThac_headerDataTable = CType(MyBase.Clone,E2_Di_Ban_Ke_KhaiThac_headerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E2_Di_Ban_Ke_KhaiThac_headerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTen_Bc_Khai_Thac = Me.Columns("Ten_Bc_Khai_Thac")
            Me.columnma_bc = Me.Columns("ma_bc")
            Me.columnma_bc_khai_thac = Me.Columns("ma_bc_khai_thac")
            Me.columnTen_Nuoc = Me.Columns("Ten_Nuoc")
            Me.columnLoai_Chuyen_Thu = Me.Columns("Loai_Chuyen_Thu")
            Me.columnngay_dong = Me.Columns("ngay_dong")
            Me.columngio_dong = Me.Columns("gio_dong")
            Me.columntui_so = Me.Columns("tui_so")
            Me.columnTong_Khoi_LuongBanKe_bp = Me.Columns("Tong_Khoi_LuongBanKe_bp")
            Me.columnSo_chuyen_thu = Me.Columns("So_chuyen_thu")
            Me.columnNguoi_Dung = Me.Columns("Nguoi_Dung")
            Me.columnTong_So_Buu_Pham = Me.Columns("Tong_So_Buu_Pham")
            Me.columnEMS_DUOI_5KG = Me.Columns("EMS_DUOI_5KG")
            Me.columnEMS_TREN_5KG = Me.Columns("EMS_TREN_5KG")
            Me.columnTui_F = Me.Columns("Tui_F")
            Me.columnTen_bc = Me.Columns("Ten_bc")
        End Sub
        
        Private Sub InitClass()
            Me.columnTen_Bc_Khai_Thac = New DataColumn("Ten_Bc_Khai_Thac", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Bc_Khai_Thac)
            Me.columnma_bc = New DataColumn("ma_bc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnma_bc)
            Me.columnma_bc_khai_thac = New DataColumn("ma_bc_khai_thac", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnma_bc_khai_thac)
            Me.columnTen_Nuoc = New DataColumn("Ten_Nuoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Nuoc)
            Me.columnLoai_Chuyen_Thu = New DataColumn("Loai_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_Chuyen_Thu)
            Me.columnngay_dong = New DataColumn("ngay_dong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnngay_dong)
            Me.columngio_dong = New DataColumn("gio_dong", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngio_dong)
            Me.columntui_so = New DataColumn("tui_so", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntui_so)
            Me.columnTong_Khoi_LuongBanKe_bp = New DataColumn("Tong_Khoi_LuongBanKe_bp", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Khoi_LuongBanKe_bp)
            Me.columnSo_chuyen_thu = New DataColumn("So_chuyen_thu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_chuyen_thu)
            Me.columnNguoi_Dung = New DataColumn("Nguoi_Dung", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Dung)
            Me.columnTong_So_Buu_Pham = New DataColumn("Tong_So_Buu_Pham", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_Buu_Pham)
            Me.columnEMS_DUOI_5KG = New DataColumn("EMS_DUOI_5KG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMS_DUOI_5KG)
            Me.columnEMS_TREN_5KG = New DataColumn("EMS_TREN_5KG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMS_TREN_5KG)
            Me.columnTui_F = New DataColumn("Tui_F", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_F)
            Me.columnTen_bc = New DataColumn("Ten_bc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_bc)
        End Sub
        
        Public Function NewE2_Di_Ban_Ke_KhaiThac_headerRow() As E2_Di_Ban_Ke_KhaiThac_headerRow
            Return CType(Me.NewRow,E2_Di_Ban_Ke_KhaiThac_headerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E2_Di_Ban_Ke_KhaiThac_headerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E2_Di_Ban_Ke_KhaiThac_headerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E2_Di_Ban_Ke_KhaiThac_headerRowChangedEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_Ke_KhaiThac_headerRowChanged(Me, New E2_Di_Ban_Ke_KhaiThac_headerRowChangeEvent(CType(e.Row,E2_Di_Ban_Ke_KhaiThac_headerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E2_Di_Ban_Ke_KhaiThac_headerRowChangingEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_Ke_KhaiThac_headerRowChanging(Me, New E2_Di_Ban_Ke_KhaiThac_headerRowChangeEvent(CType(e.Row,E2_Di_Ban_Ke_KhaiThac_headerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E2_Di_Ban_Ke_KhaiThac_headerRowDeletedEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_Ke_KhaiThac_headerRowDeleted(Me, New E2_Di_Ban_Ke_KhaiThac_headerRowChangeEvent(CType(e.Row,E2_Di_Ban_Ke_KhaiThac_headerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E2_Di_Ban_Ke_KhaiThac_headerRowDeletingEvent) Is Nothing) Then
                RaiseEvent E2_Di_Ban_Ke_KhaiThac_headerRowDeleting(Me, New E2_Di_Ban_Ke_KhaiThac_headerRowChangeEvent(CType(e.Row,E2_Di_Ban_Ke_KhaiThac_headerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE2_Di_Ban_Ke_KhaiThac_headerRow(ByVal row As E2_Di_Ban_Ke_KhaiThac_headerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_Ke_KhaiThac_headerRow
        Inherits DataRow
        
        Private tableE2_Di_Ban_Ke_KhaiThac_header As E2_Di_Ban_Ke_KhaiThac_headerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE2_Di_Ban_Ke_KhaiThac_header = CType(Me.Table,E2_Di_Ban_Ke_KhaiThac_headerDataTable)
        End Sub
        
        Public Property Ten_Bc_Khai_Thac As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Ten_Bc_Khai_ThacColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Ten_Bc_Khai_ThacColumn) = value
            End Set
        End Property
        
        Public Property ma_bc As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.ma_bcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.ma_bcColumn) = value
            End Set
        End Property
        
        Public Property ma_bc_khai_thac As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.ma_bc_khai_thacColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.ma_bc_khai_thacColumn) = value
            End Set
        End Property
        
        Public Property Ten_Nuoc As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Ten_NuocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Ten_NuocColumn) = value
            End Set
        End Property
        
        Public Property Loai_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Loai_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Loai_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property ngay_dong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.ngay_dongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.ngay_dongColumn) = value
            End Set
        End Property
        
        Public Property gio_dong As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.gio_dongColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.gio_dongColumn) = value
            End Set
        End Property
        
        Public Property tui_so As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.tui_soColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.tui_soColumn) = value
            End Set
        End Property
        
        Public Property Tong_Khoi_LuongBanKe_bp As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Tong_Khoi_LuongBanKe_bpColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Tong_Khoi_LuongBanKe_bpColumn) = value
            End Set
        End Property
        
        Public Property So_chuyen_thu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.So_chuyen_thuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.So_chuyen_thuColumn) = value
            End Set
        End Property
        
        Public Property Nguoi_Dung As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Nguoi_DungColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Nguoi_DungColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_Buu_Pham As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Tong_So_Buu_PhamColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Tong_So_Buu_PhamColumn) = value
            End Set
        End Property
        
        Public Property EMS_DUOI_5KG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.EMS_DUOI_5KGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.EMS_DUOI_5KGColumn) = value
            End Set
        End Property
        
        Public Property EMS_TREN_5KG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.EMS_TREN_5KGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.EMS_TREN_5KGColumn) = value
            End Set
        End Property
        
        Public Property Tui_F As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Tui_FColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Tui_FColumn) = value
            End Set
        End Property
        
        Public Property Ten_bc As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Ten_bcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Ten_bcColumn) = value
            End Set
        End Property
        
        Public Function IsTen_Bc_Khai_ThacNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Ten_Bc_Khai_ThacColumn)
        End Function
        
        Public Sub SetTen_Bc_Khai_ThacNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Ten_Bc_Khai_ThacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isma_bcNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.ma_bcColumn)
        End Function
        
        Public Sub Setma_bcNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.ma_bcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isma_bc_khai_thacNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.ma_bc_khai_thacColumn)
        End Function
        
        Public Sub Setma_bc_khai_thacNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.ma_bc_khai_thacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_NuocNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Ten_NuocColumn)
        End Function
        
        Public Sub SetTen_NuocNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Ten_NuocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Loai_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetLoai_Chuyen_ThuNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Loai_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isngay_dongNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.ngay_dongColumn)
        End Function
        
        Public Sub Setngay_dongNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.ngay_dongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isgio_dongNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.gio_dongColumn)
        End Function
        
        Public Sub Setgio_dongNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.gio_dongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istui_soNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.tui_soColumn)
        End Function
        
        Public Sub Settui_soNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.tui_soColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_Khoi_LuongBanKe_bpNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Tong_Khoi_LuongBanKe_bpColumn)
        End Function
        
        Public Sub SetTong_Khoi_LuongBanKe_bpNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Tong_Khoi_LuongBanKe_bpColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_chuyen_thuNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.So_chuyen_thuColumn)
        End Function
        
        Public Sub SetSo_chuyen_thuNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.So_chuyen_thuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_DungNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Nguoi_DungColumn)
        End Function
        
        Public Sub SetNguoi_DungNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Nguoi_DungColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_Buu_PhamNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Tong_So_Buu_PhamColumn)
        End Function
        
        Public Sub SetTong_So_Buu_PhamNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Tong_So_Buu_PhamColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMS_DUOI_5KGNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.EMS_DUOI_5KGColumn)
        End Function
        
        Public Sub SetEMS_DUOI_5KGNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.EMS_DUOI_5KGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMS_TREN_5KGNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.EMS_TREN_5KGColumn)
        End Function
        
        Public Sub SetEMS_TREN_5KGNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.EMS_TREN_5KGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_FNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Tui_FColumn)
        End Function
        
        Public Sub SetTui_FNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Tui_FColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_bcNull() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Ten_bcColumn)
        End Function
        
        Public Sub SetTen_bcNull()
            Me(Me.tableE2_Di_Ban_Ke_KhaiThac_header.Ten_bcColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Ban_Ke_KhaiThac_headerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E2_Di_Ban_Ke_KhaiThac_headerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E2_Di_Ban_Ke_KhaiThac_headerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E2_Di_Ban_Ke_KhaiThac_headerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_Di_Bang_Ke_Hai_QuanDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_E1 As DataColumn
        
        Private columnNguoi_Nhan As DataColumn
        
        Private columnDia_Chi_Nhan As DataColumn
        
        Private columnNgay_Dong As DataColumn
        
        Private columnSo_TKHQ As DataColumn
        
        Private columnSo_Bien_Lai As DataColumn
        
        Private columnLe_Phi_HQ As DataColumn
        
        Private columnThue_NK_VAT As DataColumn
        
        Private columnCong As DataColumn
        
        Private columnThue_NK As DataColumn
        
        Private columnThue_VAT As DataColumn
        
        Private columnLe_Phi_Khac As DataColumn
        
        Private columnChuyen_Hoan As DataColumn
        
        Friend Sub New()
            MyBase.New("E1_Di_Bang_Ke_Hai_Quan")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_NhanColumn As DataColumn
            Get
                Return Me.columnNguoi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Dia_Chi_NhanColumn As DataColumn
            Get
                Return Me.columnDia_Chi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_DongColumn As DataColumn
            Get
                Return Me.columnNgay_Dong
            End Get
        End Property
        
        Friend ReadOnly Property So_TKHQColumn As DataColumn
            Get
                Return Me.columnSo_TKHQ
            End Get
        End Property
        
        Friend ReadOnly Property So_Bien_LaiColumn As DataColumn
            Get
                Return Me.columnSo_Bien_Lai
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_HQColumn As DataColumn
            Get
                Return Me.columnLe_Phi_HQ
            End Get
        End Property
        
        Friend ReadOnly Property Thue_NK_VATColumn As DataColumn
            Get
                Return Me.columnThue_NK_VAT
            End Get
        End Property
        
        Friend ReadOnly Property CongColumn As DataColumn
            Get
                Return Me.columnCong
            End Get
        End Property
        
        Friend ReadOnly Property Thue_NKColumn As DataColumn
            Get
                Return Me.columnThue_NK
            End Get
        End Property
        
        Friend ReadOnly Property Thue_VATColumn As DataColumn
            Get
                Return Me.columnThue_VAT
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_KhacColumn As DataColumn
            Get
                Return Me.columnLe_Phi_Khac
            End Get
        End Property
        
        Friend ReadOnly Property Chuyen_HoanColumn As DataColumn
            Get
                Return Me.columnChuyen_Hoan
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E1_Di_Bang_Ke_Hai_QuanRow
            Get
                Return CType(Me.Rows(index),E1_Di_Bang_Ke_Hai_QuanRow)
            End Get
        End Property
        
        Public Event E1_Di_Bang_Ke_Hai_QuanRowChanged As E1_Di_Bang_Ke_Hai_QuanRowChangeEventHandler
        
        Public Event E1_Di_Bang_Ke_Hai_QuanRowChanging As E1_Di_Bang_Ke_Hai_QuanRowChangeEventHandler
        
        Public Event E1_Di_Bang_Ke_Hai_QuanRowDeleted As E1_Di_Bang_Ke_Hai_QuanRowChangeEventHandler
        
        Public Event E1_Di_Bang_Ke_Hai_QuanRowDeleting As E1_Di_Bang_Ke_Hai_QuanRowChangeEventHandler
        
        Public Overloads Sub AddE1_Di_Bang_Ke_Hai_QuanRow(ByVal row As E1_Di_Bang_Ke_Hai_QuanRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE1_Di_Bang_Ke_Hai_QuanRow(ByVal Ma_E1 As String, ByVal Nguoi_Nhan As String, ByVal Dia_Chi_Nhan As String, ByVal Ngay_Dong As Date, ByVal So_TKHQ As String, ByVal So_Bien_Lai As String, ByVal Le_Phi_HQ As Integer, ByVal Thue_NK_VAT As Integer, ByVal Cong As Integer, ByVal Thue_NK As Integer, ByVal Thue_VAT As Integer, ByVal Le_Phi_Khac As Integer, ByVal Chuyen_Hoan As String) As E1_Di_Bang_Ke_Hai_QuanRow
            Dim rowE1_Di_Bang_Ke_Hai_QuanRow As E1_Di_Bang_Ke_Hai_QuanRow = CType(Me.NewRow,E1_Di_Bang_Ke_Hai_QuanRow)
            rowE1_Di_Bang_Ke_Hai_QuanRow.ItemArray = New Object() {Ma_E1, Nguoi_Nhan, Dia_Chi_Nhan, Ngay_Dong, So_TKHQ, So_Bien_Lai, Le_Phi_HQ, Thue_NK_VAT, Cong, Thue_NK, Thue_VAT, Le_Phi_Khac, Chuyen_Hoan}
            Me.Rows.Add(rowE1_Di_Bang_Ke_Hai_QuanRow)
            Return rowE1_Di_Bang_Ke_Hai_QuanRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E1_Di_Bang_Ke_Hai_QuanDataTable = CType(MyBase.Clone,E1_Di_Bang_Ke_Hai_QuanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E1_Di_Bang_Ke_Hai_QuanDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnNguoi_Nhan = Me.Columns("Nguoi_Nhan")
            Me.columnDia_Chi_Nhan = Me.Columns("Dia_Chi_Nhan")
            Me.columnNgay_Dong = Me.Columns("Ngay_Dong")
            Me.columnSo_TKHQ = Me.Columns("So_TKHQ")
            Me.columnSo_Bien_Lai = Me.Columns("So_Bien_Lai")
            Me.columnLe_Phi_HQ = Me.Columns("Le_Phi_HQ")
            Me.columnThue_NK_VAT = Me.Columns("Thue_NK_VAT")
            Me.columnCong = Me.Columns("Cong")
            Me.columnThue_NK = Me.Columns("Thue_NK")
            Me.columnThue_VAT = Me.Columns("Thue_VAT")
            Me.columnLe_Phi_Khac = Me.Columns("Le_Phi_Khac")
            Me.columnChuyen_Hoan = Me.Columns("Chuyen_Hoan")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnNguoi_Nhan = New DataColumn("Nguoi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Nhan)
            Me.columnDia_Chi_Nhan = New DataColumn("Dia_Chi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia_Chi_Nhan)
            Me.columnNgay_Dong = New DataColumn("Ngay_Dong", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Dong)
            Me.columnSo_TKHQ = New DataColumn("So_TKHQ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_TKHQ)
            Me.columnSo_Bien_Lai = New DataColumn("So_Bien_Lai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Bien_Lai)
            Me.columnLe_Phi_HQ = New DataColumn("Le_Phi_HQ", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_HQ)
            Me.columnThue_NK_VAT = New DataColumn("Thue_NK_VAT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThue_NK_VAT)
            Me.columnCong = New DataColumn("Cong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCong)
            Me.columnThue_NK = New DataColumn("Thue_NK", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThue_NK)
            Me.columnThue_VAT = New DataColumn("Thue_VAT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThue_VAT)
            Me.columnLe_Phi_Khac = New DataColumn("Le_Phi_Khac", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_Khac)
            Me.columnChuyen_Hoan = New DataColumn("Chuyen_Hoan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChuyen_Hoan)
        End Sub
        
        Public Function NewE1_Di_Bang_Ke_Hai_QuanRow() As E1_Di_Bang_Ke_Hai_QuanRow
            Return CType(Me.NewRow,E1_Di_Bang_Ke_Hai_QuanRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E1_Di_Bang_Ke_Hai_QuanRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E1_Di_Bang_Ke_Hai_QuanRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E1_Di_Bang_Ke_Hai_QuanRowChangedEvent) Is Nothing) Then
                RaiseEvent E1_Di_Bang_Ke_Hai_QuanRowChanged(Me, New E1_Di_Bang_Ke_Hai_QuanRowChangeEvent(CType(e.Row,E1_Di_Bang_Ke_Hai_QuanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E1_Di_Bang_Ke_Hai_QuanRowChangingEvent) Is Nothing) Then
                RaiseEvent E1_Di_Bang_Ke_Hai_QuanRowChanging(Me, New E1_Di_Bang_Ke_Hai_QuanRowChangeEvent(CType(e.Row,E1_Di_Bang_Ke_Hai_QuanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E1_Di_Bang_Ke_Hai_QuanRowDeletedEvent) Is Nothing) Then
                RaiseEvent E1_Di_Bang_Ke_Hai_QuanRowDeleted(Me, New E1_Di_Bang_Ke_Hai_QuanRowChangeEvent(CType(e.Row,E1_Di_Bang_Ke_Hai_QuanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E1_Di_Bang_Ke_Hai_QuanRowDeletingEvent) Is Nothing) Then
                RaiseEvent E1_Di_Bang_Ke_Hai_QuanRowDeleting(Me, New E1_Di_Bang_Ke_Hai_QuanRowChangeEvent(CType(e.Row,E1_Di_Bang_Ke_Hai_QuanRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE1_Di_Bang_Ke_Hai_QuanRow(ByVal row As E1_Di_Bang_Ke_Hai_QuanRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_Di_Bang_Ke_Hai_QuanRow
        Inherits DataRow
        
        Private tableE1_Di_Bang_Ke_Hai_Quan As E1_Di_Bang_Ke_Hai_QuanDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE1_Di_Bang_Ke_Hai_Quan = CType(Me.Table,E1_Di_Bang_Ke_Hai_QuanDataTable)
        End Sub
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Nguoi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Nguoi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Nguoi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Dia_Chi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Dia_Chi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Dia_Chi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Dong As Date
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Ngay_DongColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Ngay_DongColumn) = value
            End Set
        End Property
        
        Public Property So_TKHQ As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.So_TKHQColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.So_TKHQColumn) = value
            End Set
        End Property
        
        Public Property So_Bien_Lai As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.So_Bien_LaiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.So_Bien_LaiColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_HQ As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Le_Phi_HQColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Le_Phi_HQColumn) = value
            End Set
        End Property
        
        Public Property Thue_NK_VAT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Thue_NK_VATColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Thue_NK_VATColumn) = value
            End Set
        End Property
        
        Public Property Cong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.CongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.CongColumn) = value
            End Set
        End Property
        
        Public Property Thue_NK As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Thue_NKColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Thue_NKColumn) = value
            End Set
        End Property
        
        Public Property Thue_VAT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Thue_VATColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Thue_VATColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_Khac As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Le_Phi_KhacColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Le_Phi_KhacColumn) = value
            End Set
        End Property
        
        Public Property Chuyen_Hoan As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Chuyen_HoanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Chuyen_HoanColumn) = value
            End Set
        End Property
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.Nguoi_NhanColumn)
        End Function
        
        Public Sub SetNguoi_NhanNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Nguoi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDia_Chi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.Dia_Chi_NhanColumn)
        End Function
        
        Public Sub SetDia_Chi_NhanNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Dia_Chi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_DongNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.Ngay_DongColumn)
        End Function
        
        Public Sub SetNgay_DongNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Ngay_DongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_TKHQNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.So_TKHQColumn)
        End Function
        
        Public Sub SetSo_TKHQNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.So_TKHQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Bien_LaiNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.So_Bien_LaiColumn)
        End Function
        
        Public Sub SetSo_Bien_LaiNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.So_Bien_LaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_HQNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.Le_Phi_HQColumn)
        End Function
        
        Public Sub SetLe_Phi_HQNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Le_Phi_HQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThue_NK_VATNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.Thue_NK_VATColumn)
        End Function
        
        Public Sub SetThue_NK_VATNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Thue_NK_VATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCongNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.CongColumn)
        End Function
        
        Public Sub SetCongNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.CongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThue_NKNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.Thue_NKColumn)
        End Function
        
        Public Sub SetThue_NKNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Thue_NKColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThue_VATNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.Thue_VATColumn)
        End Function
        
        Public Sub SetThue_VATNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Thue_VATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_KhacNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.Le_Phi_KhacColumn)
        End Function
        
        Public Sub SetLe_Phi_KhacNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Le_Phi_KhacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChuyen_HoanNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan.Chuyen_HoanColumn)
        End Function
        
        Public Sub SetChuyen_HoanNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan.Chuyen_HoanColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_Di_Bang_Ke_Hai_QuanRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E1_Di_Bang_Ke_Hai_QuanRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E1_Di_Bang_Ke_Hai_QuanRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E1_Di_Bang_Ke_Hai_QuanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Hai_Quan_Buu_DienDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTen_Bc As DataColumn
        
        Private columnSo_Chuyen_Thu As DataColumn
        
        Private columnTong_So_Tui As DataColumn
        
        Private columnTong_Khoi_Luong As DataColumn
        
        Private columnGhi_Chu As DataColumn
        
        Private columnLoai_D As DataColumn
        
        Private columnLoai_M As DataColumn
        
        Friend Sub New()
            MyBase.New("Hai_Quan_Buu_Dien")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ten_BcColumn As DataColumn
            Get
                Return Me.columnTen_Bc
            End Get
        End Property
        
        Friend ReadOnly Property So_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnSo_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_TuiColumn As DataColumn
            Get
                Return Me.columnTong_So_Tui
            End Get
        End Property
        
        Friend ReadOnly Property Tong_Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnTong_Khoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Ghi_ChuColumn As DataColumn
            Get
                Return Me.columnGhi_Chu
            End Get
        End Property
        
        Friend ReadOnly Property Loai_DColumn As DataColumn
            Get
                Return Me.columnLoai_D
            End Get
        End Property
        
        Friend ReadOnly Property Loai_MColumn As DataColumn
            Get
                Return Me.columnLoai_M
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Hai_Quan_Buu_DienRow
            Get
                Return CType(Me.Rows(index),Hai_Quan_Buu_DienRow)
            End Get
        End Property
        
        Public Event Hai_Quan_Buu_DienRowChanged As Hai_Quan_Buu_DienRowChangeEventHandler
        
        Public Event Hai_Quan_Buu_DienRowChanging As Hai_Quan_Buu_DienRowChangeEventHandler
        
        Public Event Hai_Quan_Buu_DienRowDeleted As Hai_Quan_Buu_DienRowChangeEventHandler
        
        Public Event Hai_Quan_Buu_DienRowDeleting As Hai_Quan_Buu_DienRowChangeEventHandler
        
        Public Overloads Sub AddHai_Quan_Buu_DienRow(ByVal row As Hai_Quan_Buu_DienRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddHai_Quan_Buu_DienRow(ByVal Ten_Bc As String, ByVal So_Chuyen_Thu As Integer, ByVal Tong_So_Tui As Integer, ByVal Tong_Khoi_Luong As Single, ByVal Ghi_Chu As String, ByVal Loai_D As Integer, ByVal Loai_M As Integer) As Hai_Quan_Buu_DienRow
            Dim rowHai_Quan_Buu_DienRow As Hai_Quan_Buu_DienRow = CType(Me.NewRow,Hai_Quan_Buu_DienRow)
            rowHai_Quan_Buu_DienRow.ItemArray = New Object() {Ten_Bc, So_Chuyen_Thu, Tong_So_Tui, Tong_Khoi_Luong, Ghi_Chu, Loai_D, Loai_M}
            Me.Rows.Add(rowHai_Quan_Buu_DienRow)
            Return rowHai_Quan_Buu_DienRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Hai_Quan_Buu_DienDataTable = CType(MyBase.Clone,Hai_Quan_Buu_DienDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Hai_Quan_Buu_DienDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTen_Bc = Me.Columns("Ten_Bc")
            Me.columnSo_Chuyen_Thu = Me.Columns("So_Chuyen_Thu")
            Me.columnTong_So_Tui = Me.Columns("Tong_So_Tui")
            Me.columnTong_Khoi_Luong = Me.Columns("Tong_Khoi_Luong")
            Me.columnGhi_Chu = Me.Columns("Ghi_Chu")
            Me.columnLoai_D = Me.Columns("Loai_D")
            Me.columnLoai_M = Me.Columns("Loai_M")
        End Sub
        
        Private Sub InitClass()
            Me.columnTen_Bc = New DataColumn("Ten_Bc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Bc)
            Me.columnSo_Chuyen_Thu = New DataColumn("So_Chuyen_Thu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Chuyen_Thu)
            Me.columnTong_So_Tui = New DataColumn("Tong_So_Tui", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_Tui)
            Me.columnTong_Khoi_Luong = New DataColumn("Tong_Khoi_Luong", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Khoi_Luong)
            Me.columnGhi_Chu = New DataColumn("Ghi_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGhi_Chu)
            Me.columnLoai_D = New DataColumn("Loai_D", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_D)
            Me.columnLoai_M = New DataColumn("Loai_M", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_M)
        End Sub
        
        Public Function NewHai_Quan_Buu_DienRow() As Hai_Quan_Buu_DienRow
            Return CType(Me.NewRow,Hai_Quan_Buu_DienRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Hai_Quan_Buu_DienRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Hai_Quan_Buu_DienRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Hai_Quan_Buu_DienRowChangedEvent) Is Nothing) Then
                RaiseEvent Hai_Quan_Buu_DienRowChanged(Me, New Hai_Quan_Buu_DienRowChangeEvent(CType(e.Row,Hai_Quan_Buu_DienRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Hai_Quan_Buu_DienRowChangingEvent) Is Nothing) Then
                RaiseEvent Hai_Quan_Buu_DienRowChanging(Me, New Hai_Quan_Buu_DienRowChangeEvent(CType(e.Row,Hai_Quan_Buu_DienRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Hai_Quan_Buu_DienRowDeletedEvent) Is Nothing) Then
                RaiseEvent Hai_Quan_Buu_DienRowDeleted(Me, New Hai_Quan_Buu_DienRowChangeEvent(CType(e.Row,Hai_Quan_Buu_DienRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Hai_Quan_Buu_DienRowDeletingEvent) Is Nothing) Then
                RaiseEvent Hai_Quan_Buu_DienRowDeleting(Me, New Hai_Quan_Buu_DienRowChangeEvent(CType(e.Row,Hai_Quan_Buu_DienRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveHai_Quan_Buu_DienRow(ByVal row As Hai_Quan_Buu_DienRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Hai_Quan_Buu_DienRow
        Inherits DataRow
        
        Private tableHai_Quan_Buu_Dien As Hai_Quan_Buu_DienDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableHai_Quan_Buu_Dien = CType(Me.Table,Hai_Quan_Buu_DienDataTable)
        End Sub
        
        Public Property Ten_Bc As String
            Get
                Try 
                    Return CType(Me(Me.tableHai_Quan_Buu_Dien.Ten_BcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHai_Quan_Buu_Dien.Ten_BcColumn) = value
            End Set
        End Property
        
        Public Property So_Chuyen_Thu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableHai_Quan_Buu_Dien.So_Chuyen_ThuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHai_Quan_Buu_Dien.So_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_Tui As Integer
            Get
                Try 
                    Return CType(Me(Me.tableHai_Quan_Buu_Dien.Tong_So_TuiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHai_Quan_Buu_Dien.Tong_So_TuiColumn) = value
            End Set
        End Property
        
        Public Property Tong_Khoi_Luong As Single
            Get
                Try 
                    Return CType(Me(Me.tableHai_Quan_Buu_Dien.Tong_Khoi_LuongColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHai_Quan_Buu_Dien.Tong_Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Ghi_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableHai_Quan_Buu_Dien.Ghi_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHai_Quan_Buu_Dien.Ghi_ChuColumn) = value
            End Set
        End Property
        
        Public Property Loai_D As Integer
            Get
                Try 
                    Return CType(Me(Me.tableHai_Quan_Buu_Dien.Loai_DColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHai_Quan_Buu_Dien.Loai_DColumn) = value
            End Set
        End Property
        
        Public Property Loai_M As Integer
            Get
                Try 
                    Return CType(Me(Me.tableHai_Quan_Buu_Dien.Loai_MColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHai_Quan_Buu_Dien.Loai_MColumn) = value
            End Set
        End Property
        
        Public Function IsTen_BcNull() As Boolean
            Return Me.IsNull(Me.tableHai_Quan_Buu_Dien.Ten_BcColumn)
        End Function
        
        Public Sub SetTen_BcNull()
            Me(Me.tableHai_Quan_Buu_Dien.Ten_BcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableHai_Quan_Buu_Dien.So_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetSo_Chuyen_ThuNull()
            Me(Me.tableHai_Quan_Buu_Dien.So_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_TuiNull() As Boolean
            Return Me.IsNull(Me.tableHai_Quan_Buu_Dien.Tong_So_TuiColumn)
        End Function
        
        Public Sub SetTong_So_TuiNull()
            Me(Me.tableHai_Quan_Buu_Dien.Tong_So_TuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_Khoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableHai_Quan_Buu_Dien.Tong_Khoi_LuongColumn)
        End Function
        
        Public Sub SetTong_Khoi_LuongNull()
            Me(Me.tableHai_Quan_Buu_Dien.Tong_Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGhi_ChuNull() As Boolean
            Return Me.IsNull(Me.tableHai_Quan_Buu_Dien.Ghi_ChuColumn)
        End Function
        
        Public Sub SetGhi_ChuNull()
            Me(Me.tableHai_Quan_Buu_Dien.Ghi_ChuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_DNull() As Boolean
            Return Me.IsNull(Me.tableHai_Quan_Buu_Dien.Loai_DColumn)
        End Function
        
        Public Sub SetLoai_DNull()
            Me(Me.tableHai_Quan_Buu_Dien.Loai_DColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_MNull() As Boolean
            Return Me.IsNull(Me.tableHai_Quan_Buu_Dien.Loai_MColumn)
        End Function
        
        Public Sub SetLoai_MNull()
            Me(Me.tableHai_Quan_Buu_Dien.Loai_MColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Hai_Quan_Buu_DienRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Hai_Quan_Buu_DienRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Hai_Quan_Buu_DienRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Hai_Quan_Buu_DienRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Despatch_3ColDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTT_1 As DataColumn
        
        Private columnMa_E1_1 As DataColumn
        
        Private columnTui_So_1 As DataColumn
        
        Private columnSTT_2 As DataColumn
        
        Private columnMa_E1_2 As DataColumn
        
        Private columnTui_So_2 As DataColumn
        
        Private columnSTT_3 As DataColumn
        
        Private columnMa_E1_3 As DataColumn
        
        Private columnTui_So_3 As DataColumn
        
        Friend Sub New()
            MyBase.New("E2_Di_Despatch_3Col")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STT_1Column As DataColumn
            Get
                Return Me.columnSTT_1
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1_1Column As DataColumn
            Get
                Return Me.columnMa_E1_1
            End Get
        End Property
        
        Friend ReadOnly Property Tui_So_1Column As DataColumn
            Get
                Return Me.columnTui_So_1
            End Get
        End Property
        
        Friend ReadOnly Property STT_2Column As DataColumn
            Get
                Return Me.columnSTT_2
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1_2Column As DataColumn
            Get
                Return Me.columnMa_E1_2
            End Get
        End Property
        
        Friend ReadOnly Property Tui_So_2Column As DataColumn
            Get
                Return Me.columnTui_So_2
            End Get
        End Property
        
        Friend ReadOnly Property STT_3Column As DataColumn
            Get
                Return Me.columnSTT_3
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1_3Column As DataColumn
            Get
                Return Me.columnMa_E1_3
            End Get
        End Property
        
        Friend ReadOnly Property Tui_So_3Column As DataColumn
            Get
                Return Me.columnTui_So_3
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E2_Di_Despatch_3ColRow
            Get
                Return CType(Me.Rows(index),E2_Di_Despatch_3ColRow)
            End Get
        End Property
        
        Public Event E2_Di_Despatch_3ColRowChanged As E2_Di_Despatch_3ColRowChangeEventHandler
        
        Public Event E2_Di_Despatch_3ColRowChanging As E2_Di_Despatch_3ColRowChangeEventHandler
        
        Public Event E2_Di_Despatch_3ColRowDeleted As E2_Di_Despatch_3ColRowChangeEventHandler
        
        Public Event E2_Di_Despatch_3ColRowDeleting As E2_Di_Despatch_3ColRowChangeEventHandler
        
        Public Overloads Sub AddE2_Di_Despatch_3ColRow(ByVal row As E2_Di_Despatch_3ColRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE2_Di_Despatch_3ColRow(ByVal STT_1 As String, ByVal Ma_E1_1 As String, ByVal Tui_So_1 As String, ByVal STT_2 As String, ByVal Ma_E1_2 As String, ByVal Tui_So_2 As String, ByVal STT_3 As String, ByVal Ma_E1_3 As String, ByVal Tui_So_3 As String) As E2_Di_Despatch_3ColRow
            Dim rowE2_Di_Despatch_3ColRow As E2_Di_Despatch_3ColRow = CType(Me.NewRow,E2_Di_Despatch_3ColRow)
            rowE2_Di_Despatch_3ColRow.ItemArray = New Object() {STT_1, Ma_E1_1, Tui_So_1, STT_2, Ma_E1_2, Tui_So_2, STT_3, Ma_E1_3, Tui_So_3}
            Me.Rows.Add(rowE2_Di_Despatch_3ColRow)
            Return rowE2_Di_Despatch_3ColRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E2_Di_Despatch_3ColDataTable = CType(MyBase.Clone,E2_Di_Despatch_3ColDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E2_Di_Despatch_3ColDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTT_1 = Me.Columns("STT_1")
            Me.columnMa_E1_1 = Me.Columns("Ma_E1_1")
            Me.columnTui_So_1 = Me.Columns("Tui_So_1")
            Me.columnSTT_2 = Me.Columns("STT_2")
            Me.columnMa_E1_2 = Me.Columns("Ma_E1_2")
            Me.columnTui_So_2 = Me.Columns("Tui_So_2")
            Me.columnSTT_3 = Me.Columns("STT_3")
            Me.columnMa_E1_3 = Me.Columns("Ma_E1_3")
            Me.columnTui_So_3 = Me.Columns("Tui_So_3")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTT_1 = New DataColumn("STT_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT_1)
            Me.columnMa_E1_1 = New DataColumn("Ma_E1_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1_1)
            Me.columnTui_So_1 = New DataColumn("Tui_So_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So_1)
            Me.columnSTT_2 = New DataColumn("STT_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT_2)
            Me.columnMa_E1_2 = New DataColumn("Ma_E1_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1_2)
            Me.columnTui_So_2 = New DataColumn("Tui_So_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So_2)
            Me.columnSTT_3 = New DataColumn("STT_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT_3)
            Me.columnMa_E1_3 = New DataColumn("Ma_E1_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1_3)
            Me.columnTui_So_3 = New DataColumn("Tui_So_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So_3)
        End Sub
        
        Public Function NewE2_Di_Despatch_3ColRow() As E2_Di_Despatch_3ColRow
            Return CType(Me.NewRow,E2_Di_Despatch_3ColRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E2_Di_Despatch_3ColRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E2_Di_Despatch_3ColRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E2_Di_Despatch_3ColRowChangedEvent) Is Nothing) Then
                RaiseEvent E2_Di_Despatch_3ColRowChanged(Me, New E2_Di_Despatch_3ColRowChangeEvent(CType(e.Row,E2_Di_Despatch_3ColRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E2_Di_Despatch_3ColRowChangingEvent) Is Nothing) Then
                RaiseEvent E2_Di_Despatch_3ColRowChanging(Me, New E2_Di_Despatch_3ColRowChangeEvent(CType(e.Row,E2_Di_Despatch_3ColRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E2_Di_Despatch_3ColRowDeletedEvent) Is Nothing) Then
                RaiseEvent E2_Di_Despatch_3ColRowDeleted(Me, New E2_Di_Despatch_3ColRowChangeEvent(CType(e.Row,E2_Di_Despatch_3ColRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E2_Di_Despatch_3ColRowDeletingEvent) Is Nothing) Then
                RaiseEvent E2_Di_Despatch_3ColRowDeleting(Me, New E2_Di_Despatch_3ColRowChangeEvent(CType(e.Row,E2_Di_Despatch_3ColRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE2_Di_Despatch_3ColRow(ByVal row As E2_Di_Despatch_3ColRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Despatch_3ColRow
        Inherits DataRow
        
        Private tableE2_Di_Despatch_3Col As E2_Di_Despatch_3ColDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE2_Di_Despatch_3Col = CType(Me.Table,E2_Di_Despatch_3ColDataTable)
        End Sub
        
        Public Property STT_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Despatch_3Col.STT_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Despatch_3Col.STT_1Column) = value
            End Set
        End Property
        
        Public Property Ma_E1_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Despatch_3Col.Ma_E1_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Despatch_3Col.Ma_E1_1Column) = value
            End Set
        End Property
        
        Public Property Tui_So_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Despatch_3Col.Tui_So_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Despatch_3Col.Tui_So_1Column) = value
            End Set
        End Property
        
        Public Property STT_2 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Despatch_3Col.STT_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Despatch_3Col.STT_2Column) = value
            End Set
        End Property
        
        Public Property Ma_E1_2 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Despatch_3Col.Ma_E1_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Despatch_3Col.Ma_E1_2Column) = value
            End Set
        End Property
        
        Public Property Tui_So_2 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Despatch_3Col.Tui_So_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Despatch_3Col.Tui_So_2Column) = value
            End Set
        End Property
        
        Public Property STT_3 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Despatch_3Col.STT_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Despatch_3Col.STT_3Column) = value
            End Set
        End Property
        
        Public Property Ma_E1_3 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Despatch_3Col.Ma_E1_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Despatch_3Col.Ma_E1_3Column) = value
            End Set
        End Property
        
        Public Property Tui_So_3 As String
            Get
                Try 
                    Return CType(Me(Me.tableE2_Di_Despatch_3Col.Tui_So_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE2_Di_Despatch_3Col.Tui_So_3Column) = value
            End Set
        End Property
        
        Public Function IsSTT_1Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Despatch_3Col.STT_1Column)
        End Function
        
        Public Sub SetSTT_1Null()
            Me(Me.tableE2_Di_Despatch_3Col.STT_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1_1Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Despatch_3Col.Ma_E1_1Column)
        End Function
        
        Public Sub SetMa_E1_1Null()
            Me(Me.tableE2_Di_Despatch_3Col.Ma_E1_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_So_1Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Despatch_3Col.Tui_So_1Column)
        End Function
        
        Public Sub SetTui_So_1Null()
            Me(Me.tableE2_Di_Despatch_3Col.Tui_So_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTT_2Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Despatch_3Col.STT_2Column)
        End Function
        
        Public Sub SetSTT_2Null()
            Me(Me.tableE2_Di_Despatch_3Col.STT_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1_2Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Despatch_3Col.Ma_E1_2Column)
        End Function
        
        Public Sub SetMa_E1_2Null()
            Me(Me.tableE2_Di_Despatch_3Col.Ma_E1_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_So_2Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Despatch_3Col.Tui_So_2Column)
        End Function
        
        Public Sub SetTui_So_2Null()
            Me(Me.tableE2_Di_Despatch_3Col.Tui_So_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTT_3Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Despatch_3Col.STT_3Column)
        End Function
        
        Public Sub SetSTT_3Null()
            Me(Me.tableE2_Di_Despatch_3Col.STT_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1_3Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Despatch_3Col.Ma_E1_3Column)
        End Function
        
        Public Sub SetMa_E1_3Null()
            Me(Me.tableE2_Di_Despatch_3Col.Ma_E1_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_So_3Null() As Boolean
            Return Me.IsNull(Me.tableE2_Di_Despatch_3Col.Tui_So_3Column)
        End Function
        
        Public Sub SetTui_So_3Null()
            Me(Me.tableE2_Di_Despatch_3Col.Tui_So_3Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E2_Di_Despatch_3ColRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E2_Di_Despatch_3ColRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E2_Di_Despatch_3ColRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E2_Di_Despatch_3ColRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccountingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAcc_Key As DataColumn
        
        Private columnID As DataColumn
        
        Private columnNgay As DataColumn
        
        Private columnSCT As DataColumn
        
        Private columnBCG As DataColumn
        
        Private columnBCN As DataColumn
        
        Private columnKL_EMS As DataColumn
        
        Private columnLOAI_D As DataColumn
        
        Private columnLOAI_M As DataColumn
        
        Private columnLOAI_R As DataColumn
        
        Private columnNOTICE As DataColumn
        
        Private columnHVC As DataColumn
        
        Private columnI_O As DataColumn
        
        Private columnTEN_BCG As DataColumn
        
        Private columnTEN_BCN As DataColumn
        
        Friend Sub New()
            MyBase.New("Accounting")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Acc_KeyColumn As DataColumn
            Get
                Return Me.columnAcc_Key
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NgayColumn As DataColumn
            Get
                Return Me.columnNgay
            End Get
        End Property
        
        Friend ReadOnly Property SCTColumn As DataColumn
            Get
                Return Me.columnSCT
            End Get
        End Property
        
        Friend ReadOnly Property BCGColumn As DataColumn
            Get
                Return Me.columnBCG
            End Get
        End Property
        
        Friend ReadOnly Property BCNColumn As DataColumn
            Get
                Return Me.columnBCN
            End Get
        End Property
        
        Friend ReadOnly Property KL_EMSColumn As DataColumn
            Get
                Return Me.columnKL_EMS
            End Get
        End Property
        
        Friend ReadOnly Property LOAI_DColumn As DataColumn
            Get
                Return Me.columnLOAI_D
            End Get
        End Property
        
        Friend ReadOnly Property LOAI_MColumn As DataColumn
            Get
                Return Me.columnLOAI_M
            End Get
        End Property
        
        Friend ReadOnly Property LOAI_RColumn As DataColumn
            Get
                Return Me.columnLOAI_R
            End Get
        End Property
        
        Friend ReadOnly Property NOTICEColumn As DataColumn
            Get
                Return Me.columnNOTICE
            End Get
        End Property
        
        Friend ReadOnly Property HVCColumn As DataColumn
            Get
                Return Me.columnHVC
            End Get
        End Property
        
        Friend ReadOnly Property I_OColumn As DataColumn
            Get
                Return Me.columnI_O
            End Get
        End Property
        
        Friend ReadOnly Property TEN_BCGColumn As DataColumn
            Get
                Return Me.columnTEN_BCG
            End Get
        End Property
        
        Friend ReadOnly Property TEN_BCNColumn As DataColumn
            Get
                Return Me.columnTEN_BCN
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccountingRow
            Get
                Return CType(Me.Rows(index),AccountingRow)
            End Get
        End Property
        
        Public Event AccountingRowChanged As AccountingRowChangeEventHandler
        
        Public Event AccountingRowChanging As AccountingRowChangeEventHandler
        
        Public Event AccountingRowDeleted As AccountingRowChangeEventHandler
        
        Public Event AccountingRowDeleting As AccountingRowChangeEventHandler
        
        Public Overloads Sub AddAccountingRow(ByVal row As AccountingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccountingRow(ByVal ID As Integer, ByVal Ngay As Date, ByVal SCT As String, ByVal BCG As String, ByVal BCN As String, ByVal KL_EMS As Decimal, ByVal LOAI_D As Decimal, ByVal LOAI_M As Decimal, ByVal LOAI_R As Decimal, ByVal NOTICE As String, ByVal HVC As String, ByVal I_O As Decimal, ByVal TEN_BCG As String, ByVal TEN_BCN As String) As AccountingRow
            Dim rowAccountingRow As AccountingRow = CType(Me.NewRow,AccountingRow)
            rowAccountingRow.ItemArray = New Object() {Nothing, ID, Ngay, SCT, BCG, BCN, KL_EMS, LOAI_D, LOAI_M, LOAI_R, NOTICE, HVC, I_O, TEN_BCG, TEN_BCN}
            Me.Rows.Add(rowAccountingRow)
            Return rowAccountingRow
        End Function
        
        Public Function FindByAcc_Key(ByVal Acc_Key As Integer) As AccountingRow
            Return CType(Me.Rows.Find(New Object() {Acc_Key}),AccountingRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AccountingDataTable = CType(MyBase.Clone,AccountingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AccountingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAcc_Key = Me.Columns("Acc_Key")
            Me.columnID = Me.Columns("ID")
            Me.columnNgay = Me.Columns("Ngay")
            Me.columnSCT = Me.Columns("SCT")
            Me.columnBCG = Me.Columns("BCG")
            Me.columnBCN = Me.Columns("BCN")
            Me.columnKL_EMS = Me.Columns("KL_EMS")
            Me.columnLOAI_D = Me.Columns("LOAI_D")
            Me.columnLOAI_M = Me.Columns("LOAI_M")
            Me.columnLOAI_R = Me.Columns("LOAI_R")
            Me.columnNOTICE = Me.Columns("NOTICE")
            Me.columnHVC = Me.Columns("HVC")
            Me.columnI_O = Me.Columns("I_O")
            Me.columnTEN_BCG = Me.Columns("TEN_BCG")
            Me.columnTEN_BCN = Me.Columns("TEN_BCN")
        End Sub
        
        Private Sub InitClass()
            Me.columnAcc_Key = New DataColumn("Acc_Key", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcc_Key)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNgay = New DataColumn("Ngay", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay)
            Me.columnSCT = New DataColumn("SCT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSCT)
            Me.columnBCG = New DataColumn("BCG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBCG)
            Me.columnBCN = New DataColumn("BCN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBCN)
            Me.columnKL_EMS = New DataColumn("KL_EMS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKL_EMS)
            Me.columnLOAI_D = New DataColumn("LOAI_D", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOAI_D)
            Me.columnLOAI_M = New DataColumn("LOAI_M", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOAI_M)
            Me.columnLOAI_R = New DataColumn("LOAI_R", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOAI_R)
            Me.columnNOTICE = New DataColumn("NOTICE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOTICE)
            Me.columnHVC = New DataColumn("HVC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHVC)
            Me.columnI_O = New DataColumn("I_O", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_O)
            Me.columnTEN_BCG = New DataColumn("TEN_BCG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTEN_BCG)
            Me.columnTEN_BCN = New DataColumn("TEN_BCN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTEN_BCN)
            Me.Constraints.Add(New UniqueConstraint("dsReportsKey1", New DataColumn() {Me.columnAcc_Key}, true))
            Me.columnAcc_Key.AutoIncrement = true
            Me.columnAcc_Key.AllowDBNull = false
            Me.columnAcc_Key.ReadOnly = true
            Me.columnAcc_Key.Unique = true
            Me.columnID.AllowDBNull = false
            Me.columnNgay.AllowDBNull = false
            Me.columnSCT.AllowDBNull = false
            Me.columnBCG.AllowDBNull = false
            Me.columnBCN.AllowDBNull = false
            Me.columnKL_EMS.AllowDBNull = false
            Me.columnLOAI_D.AllowDBNull = false
            Me.columnLOAI_M.AllowDBNull = false
            Me.columnLOAI_R.AllowDBNull = false
            Me.columnNOTICE.AllowDBNull = false
            Me.columnHVC.AllowDBNull = false
            Me.columnI_O.AllowDBNull = false
        End Sub
        
        Public Function NewAccountingRow() As AccountingRow
            Return CType(Me.NewRow,AccountingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AccountingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AccountingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccountingRowChangedEvent) Is Nothing) Then
                RaiseEvent AccountingRowChanged(Me, New AccountingRowChangeEvent(CType(e.Row,AccountingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccountingRowChangingEvent) Is Nothing) Then
                RaiseEvent AccountingRowChanging(Me, New AccountingRowChangeEvent(CType(e.Row,AccountingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccountingRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccountingRowDeleted(Me, New AccountingRowChangeEvent(CType(e.Row,AccountingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccountingRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccountingRowDeleting(Me, New AccountingRowChangeEvent(CType(e.Row,AccountingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccountingRow(ByVal row As AccountingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccountingRow
        Inherits DataRow
        
        Private tableAccounting As AccountingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccounting = CType(Me.Table,AccountingDataTable)
        End Sub
        
        Public Property Acc_Key As Integer
            Get
                Return CType(Me(Me.tableAccounting.Acc_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tableAccounting.Acc_KeyColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableAccounting.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableAccounting.IDColumn) = value
            End Set
        End Property
        
        Public Property Ngay As Date
            Get
                Return CType(Me(Me.tableAccounting.NgayColumn),Date)
            End Get
            Set
                Me(Me.tableAccounting.NgayColumn) = value
            End Set
        End Property
        
        Public Property SCT As String
            Get
                Return CType(Me(Me.tableAccounting.SCTColumn),String)
            End Get
            Set
                Me(Me.tableAccounting.SCTColumn) = value
            End Set
        End Property
        
        Public Property BCG As String
            Get
                Return CType(Me(Me.tableAccounting.BCGColumn),String)
            End Get
            Set
                Me(Me.tableAccounting.BCGColumn) = value
            End Set
        End Property
        
        Public Property BCN As String
            Get
                Return CType(Me(Me.tableAccounting.BCNColumn),String)
            End Get
            Set
                Me(Me.tableAccounting.BCNColumn) = value
            End Set
        End Property
        
        Public Property KL_EMS As Decimal
            Get
                Return CType(Me(Me.tableAccounting.KL_EMSColumn),Decimal)
            End Get
            Set
                Me(Me.tableAccounting.KL_EMSColumn) = value
            End Set
        End Property
        
        Public Property LOAI_D As Decimal
            Get
                Return CType(Me(Me.tableAccounting.LOAI_DColumn),Decimal)
            End Get
            Set
                Me(Me.tableAccounting.LOAI_DColumn) = value
            End Set
        End Property
        
        Public Property LOAI_M As Decimal
            Get
                Return CType(Me(Me.tableAccounting.LOAI_MColumn),Decimal)
            End Get
            Set
                Me(Me.tableAccounting.LOAI_MColumn) = value
            End Set
        End Property
        
        Public Property LOAI_R As Decimal
            Get
                Return CType(Me(Me.tableAccounting.LOAI_RColumn),Decimal)
            End Get
            Set
                Me(Me.tableAccounting.LOAI_RColumn) = value
            End Set
        End Property
        
        Public Property NOTICE As String
            Get
                Return CType(Me(Me.tableAccounting.NOTICEColumn),String)
            End Get
            Set
                Me(Me.tableAccounting.NOTICEColumn) = value
            End Set
        End Property
        
        Public Property HVC As String
            Get
                Return CType(Me(Me.tableAccounting.HVCColumn),String)
            End Get
            Set
                Me(Me.tableAccounting.HVCColumn) = value
            End Set
        End Property
        
        Public Property I_O As Decimal
            Get
                Return CType(Me(Me.tableAccounting.I_OColumn),Decimal)
            End Get
            Set
                Me(Me.tableAccounting.I_OColumn) = value
            End Set
        End Property
        
        Public Property TEN_BCG As String
            Get
                Try 
                    Return CType(Me(Me.tableAccounting.TEN_BCGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccounting.TEN_BCGColumn) = value
            End Set
        End Property
        
        Public Property TEN_BCN As String
            Get
                Try 
                    Return CType(Me(Me.tableAccounting.TEN_BCNColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccounting.TEN_BCNColumn) = value
            End Set
        End Property
        
        Public Function IsTEN_BCGNull() As Boolean
            Return Me.IsNull(Me.tableAccounting.TEN_BCGColumn)
        End Function
        
        Public Sub SetTEN_BCGNull()
            Me(Me.tableAccounting.TEN_BCGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTEN_BCNNull() As Boolean
            Return Me.IsNull(Me.tableAccounting.TEN_BCNColumn)
        End Function
        
        Public Sub SetTEN_BCNNull()
            Me(Me.tableAccounting.TEN_BCNColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccountingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AccountingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AccountingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AccountingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accounting_TransitDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnNgay As DataColumn
        
        Private columnSCT As DataColumn
        
        Private columnSH_EMS As DataColumn
        
        Private columnBC_GUI As DataColumn
        
        Private columnNuoc_QG As DataColumn
        
        Private columnNUOC_NHAN As DataColumn
        
        Private columnKL_EMS As DataColumn
        
        Private columnLoai As DataColumn
        
        Private columnVan_don As DataColumn
        
        Private columnCuoc As DataColumn
        
        Private columnNotice As DataColumn
        
        Friend Sub New()
            MyBase.New("Accounting_Transit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NgayColumn As DataColumn
            Get
                Return Me.columnNgay
            End Get
        End Property
        
        Friend ReadOnly Property SCTColumn As DataColumn
            Get
                Return Me.columnSCT
            End Get
        End Property
        
        Friend ReadOnly Property SH_EMSColumn As DataColumn
            Get
                Return Me.columnSH_EMS
            End Get
        End Property
        
        Friend ReadOnly Property BC_GUIColumn As DataColumn
            Get
                Return Me.columnBC_GUI
            End Get
        End Property
        
        Friend ReadOnly Property Nuoc_QGColumn As DataColumn
            Get
                Return Me.columnNuoc_QG
            End Get
        End Property
        
        Friend ReadOnly Property NUOC_NHANColumn As DataColumn
            Get
                Return Me.columnNUOC_NHAN
            End Get
        End Property
        
        Friend ReadOnly Property KL_EMSColumn As DataColumn
            Get
                Return Me.columnKL_EMS
            End Get
        End Property
        
        Friend ReadOnly Property LoaiColumn As DataColumn
            Get
                Return Me.columnLoai
            End Get
        End Property
        
        Friend ReadOnly Property Van_donColumn As DataColumn
            Get
                Return Me.columnVan_don
            End Get
        End Property
        
        Friend ReadOnly Property CuocColumn As DataColumn
            Get
                Return Me.columnCuoc
            End Get
        End Property
        
        Friend ReadOnly Property NoticeColumn As DataColumn
            Get
                Return Me.columnNotice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Accounting_TransitRow
            Get
                Return CType(Me.Rows(index),Accounting_TransitRow)
            End Get
        End Property
        
        Public Event Accounting_TransitRowChanged As Accounting_TransitRowChangeEventHandler
        
        Public Event Accounting_TransitRowChanging As Accounting_TransitRowChangeEventHandler
        
        Public Event Accounting_TransitRowDeleted As Accounting_TransitRowChangeEventHandler
        
        Public Event Accounting_TransitRowDeleting As Accounting_TransitRowChangeEventHandler
        
        Public Overloads Sub AddAccounting_TransitRow(ByVal row As Accounting_TransitRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccounting_TransitRow(ByVal Ngay As Date, ByVal SCT As String, ByVal SH_EMS As String, ByVal BC_GUI As String, ByVal Nuoc_QG As String, ByVal NUOC_NHAN As String, ByVal KL_EMS As Decimal, ByVal Loai As String, ByVal Van_don As String, ByVal Cuoc As Decimal, ByVal Notice As String) As Accounting_TransitRow
            Dim rowAccounting_TransitRow As Accounting_TransitRow = CType(Me.NewRow,Accounting_TransitRow)
            rowAccounting_TransitRow.ItemArray = New Object() {Nothing, Ngay, SCT, SH_EMS, BC_GUI, Nuoc_QG, NUOC_NHAN, KL_EMS, Loai, Van_don, Cuoc, Notice}
            Me.Rows.Add(rowAccounting_TransitRow)
            Return rowAccounting_TransitRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Accounting_TransitDataTable = CType(MyBase.Clone,Accounting_TransitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Accounting_TransitDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnNgay = Me.Columns("Ngay")
            Me.columnSCT = Me.Columns("SCT")
            Me.columnSH_EMS = Me.Columns("SH_EMS")
            Me.columnBC_GUI = Me.Columns("BC_GUI")
            Me.columnNuoc_QG = Me.Columns("Nuoc_QG")
            Me.columnNUOC_NHAN = Me.Columns("NUOC_NHAN")
            Me.columnKL_EMS = Me.Columns("KL_EMS")
            Me.columnLoai = Me.Columns("Loai")
            Me.columnVan_don = Me.Columns("Van_don")
            Me.columnCuoc = Me.Columns("Cuoc")
            Me.columnNotice = Me.Columns("Notice")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNgay = New DataColumn("Ngay", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay)
            Me.columnSCT = New DataColumn("SCT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSCT)
            Me.columnSH_EMS = New DataColumn("SH_EMS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSH_EMS)
            Me.columnBC_GUI = New DataColumn("BC_GUI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBC_GUI)
            Me.columnNuoc_QG = New DataColumn("Nuoc_QG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNuoc_QG)
            Me.columnNUOC_NHAN = New DataColumn("NUOC_NHAN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNUOC_NHAN)
            Me.columnKL_EMS = New DataColumn("KL_EMS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKL_EMS)
            Me.columnLoai = New DataColumn("Loai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai)
            Me.columnVan_don = New DataColumn("Van_don", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVan_don)
            Me.columnCuoc = New DataColumn("Cuoc", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuoc)
            Me.columnNotice = New DataColumn("Notice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotice)
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnNgay.AllowDBNull = false
            Me.columnSCT.AllowDBNull = false
            Me.columnSH_EMS.AllowDBNull = false
            Me.columnBC_GUI.AllowDBNull = false
            Me.columnNuoc_QG.AllowDBNull = false
            Me.columnNUOC_NHAN.AllowDBNull = false
            Me.columnKL_EMS.AllowDBNull = false
            Me.columnLoai.AllowDBNull = false
            Me.columnVan_don.AllowDBNull = false
            Me.columnCuoc.AllowDBNull = false
            Me.columnNotice.AllowDBNull = false
        End Sub
        
        Public Function NewAccounting_TransitRow() As Accounting_TransitRow
            Return CType(Me.NewRow,Accounting_TransitRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Accounting_TransitRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Accounting_TransitRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Accounting_TransitRowChangedEvent) Is Nothing) Then
                RaiseEvent Accounting_TransitRowChanged(Me, New Accounting_TransitRowChangeEvent(CType(e.Row,Accounting_TransitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Accounting_TransitRowChangingEvent) Is Nothing) Then
                RaiseEvent Accounting_TransitRowChanging(Me, New Accounting_TransitRowChangeEvent(CType(e.Row,Accounting_TransitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Accounting_TransitRowDeletedEvent) Is Nothing) Then
                RaiseEvent Accounting_TransitRowDeleted(Me, New Accounting_TransitRowChangeEvent(CType(e.Row,Accounting_TransitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Accounting_TransitRowDeletingEvent) Is Nothing) Then
                RaiseEvent Accounting_TransitRowDeleting(Me, New Accounting_TransitRowChangeEvent(CType(e.Row,Accounting_TransitRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccounting_TransitRow(ByVal row As Accounting_TransitRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accounting_TransitRow
        Inherits DataRow
        
        Private tableAccounting_Transit As Accounting_TransitDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccounting_Transit = CType(Me.Table,Accounting_TransitDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableAccounting_Transit.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableAccounting_Transit.IDColumn) = value
            End Set
        End Property
        
        Public Property Ngay As Date
            Get
                Return CType(Me(Me.tableAccounting_Transit.NgayColumn),Date)
            End Get
            Set
                Me(Me.tableAccounting_Transit.NgayColumn) = value
            End Set
        End Property
        
        Public Property SCT As String
            Get
                Return CType(Me(Me.tableAccounting_Transit.SCTColumn),String)
            End Get
            Set
                Me(Me.tableAccounting_Transit.SCTColumn) = value
            End Set
        End Property
        
        Public Property SH_EMS As String
            Get
                Return CType(Me(Me.tableAccounting_Transit.SH_EMSColumn),String)
            End Get
            Set
                Me(Me.tableAccounting_Transit.SH_EMSColumn) = value
            End Set
        End Property
        
        Public Property BC_GUI As String
            Get
                Return CType(Me(Me.tableAccounting_Transit.BC_GUIColumn),String)
            End Get
            Set
                Me(Me.tableAccounting_Transit.BC_GUIColumn) = value
            End Set
        End Property
        
        Public Property Nuoc_QG As String
            Get
                Return CType(Me(Me.tableAccounting_Transit.Nuoc_QGColumn),String)
            End Get
            Set
                Me(Me.tableAccounting_Transit.Nuoc_QGColumn) = value
            End Set
        End Property
        
        Public Property NUOC_NHAN As String
            Get
                Return CType(Me(Me.tableAccounting_Transit.NUOC_NHANColumn),String)
            End Get
            Set
                Me(Me.tableAccounting_Transit.NUOC_NHANColumn) = value
            End Set
        End Property
        
        Public Property KL_EMS As Decimal
            Get
                Return CType(Me(Me.tableAccounting_Transit.KL_EMSColumn),Decimal)
            End Get
            Set
                Me(Me.tableAccounting_Transit.KL_EMSColumn) = value
            End Set
        End Property
        
        Public Property Loai As String
            Get
                Return CType(Me(Me.tableAccounting_Transit.LoaiColumn),String)
            End Get
            Set
                Me(Me.tableAccounting_Transit.LoaiColumn) = value
            End Set
        End Property
        
        Public Property Van_don As String
            Get
                Return CType(Me(Me.tableAccounting_Transit.Van_donColumn),String)
            End Get
            Set
                Me(Me.tableAccounting_Transit.Van_donColumn) = value
            End Set
        End Property
        
        Public Property Cuoc As Decimal
            Get
                Return CType(Me(Me.tableAccounting_Transit.CuocColumn),Decimal)
            End Get
            Set
                Me(Me.tableAccounting_Transit.CuocColumn) = value
            End Set
        End Property
        
        Public Property Notice As String
            Get
                Return CType(Me(Me.tableAccounting_Transit.NoticeColumn),String)
            End Get
            Set
                Me(Me.tableAccounting_Transit.NoticeColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Accounting_TransitRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Accounting_TransitRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Accounting_TransitRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Accounting_TransitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ke_Toan_QT_THDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTT As DataColumn
        
        Private columnTen_Dich_Vu As DataColumn
        
        Private columnKL_EMS As DataColumn
        
        Private columnED As DataColumn
        
        Private columnEM As DataColumn
        
        Private columnER As DataColumn
        
        Friend Sub New()
            MyBase.New("Ke_Toan_QT_TH")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STTColumn As DataColumn
            Get
                Return Me.columnSTT
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Dich_VuColumn As DataColumn
            Get
                Return Me.columnTen_Dich_Vu
            End Get
        End Property
        
        Friend ReadOnly Property KL_EMSColumn As DataColumn
            Get
                Return Me.columnKL_EMS
            End Get
        End Property
        
        Friend ReadOnly Property EDColumn As DataColumn
            Get
                Return Me.columnED
            End Get
        End Property
        
        Friend ReadOnly Property EMColumn As DataColumn
            Get
                Return Me.columnEM
            End Get
        End Property
        
        Friend ReadOnly Property ERColumn As DataColumn
            Get
                Return Me.columnER
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ke_Toan_QT_THRow
            Get
                Return CType(Me.Rows(index),Ke_Toan_QT_THRow)
            End Get
        End Property
        
        Public Event Ke_Toan_QT_THRowChanged As Ke_Toan_QT_THRowChangeEventHandler
        
        Public Event Ke_Toan_QT_THRowChanging As Ke_Toan_QT_THRowChangeEventHandler
        
        Public Event Ke_Toan_QT_THRowDeleted As Ke_Toan_QT_THRowChangeEventHandler
        
        Public Event Ke_Toan_QT_THRowDeleting As Ke_Toan_QT_THRowChangeEventHandler
        
        Public Overloads Sub AddKe_Toan_QT_THRow(ByVal row As Ke_Toan_QT_THRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddKe_Toan_QT_THRow(ByVal STT As String, ByVal Ten_Dich_Vu As String, ByVal KL_EMS As Decimal, ByVal ED As Integer, ByVal EM As Integer, ByVal ER As Integer) As Ke_Toan_QT_THRow
            Dim rowKe_Toan_QT_THRow As Ke_Toan_QT_THRow = CType(Me.NewRow,Ke_Toan_QT_THRow)
            rowKe_Toan_QT_THRow.ItemArray = New Object() {STT, Ten_Dich_Vu, KL_EMS, ED, EM, ER}
            Me.Rows.Add(rowKe_Toan_QT_THRow)
            Return rowKe_Toan_QT_THRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Ke_Toan_QT_THDataTable = CType(MyBase.Clone,Ke_Toan_QT_THDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Ke_Toan_QT_THDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTT = Me.Columns("STT")
            Me.columnTen_Dich_Vu = Me.Columns("Ten_Dich_Vu")
            Me.columnKL_EMS = Me.Columns("KL_EMS")
            Me.columnED = Me.Columns("ED")
            Me.columnEM = Me.Columns("EM")
            Me.columnER = Me.Columns("ER")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTT = New DataColumn("STT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT)
            Me.columnTen_Dich_Vu = New DataColumn("Ten_Dich_Vu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Dich_Vu)
            Me.columnKL_EMS = New DataColumn("KL_EMS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKL_EMS)
            Me.columnED = New DataColumn("ED", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnED)
            Me.columnEM = New DataColumn("EM", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEM)
            Me.columnER = New DataColumn("ER", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnER)
        End Sub
        
        Public Function NewKe_Toan_QT_THRow() As Ke_Toan_QT_THRow
            Return CType(Me.NewRow,Ke_Toan_QT_THRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Ke_Toan_QT_THRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Ke_Toan_QT_THRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ke_Toan_QT_THRowChangedEvent) Is Nothing) Then
                RaiseEvent Ke_Toan_QT_THRowChanged(Me, New Ke_Toan_QT_THRowChangeEvent(CType(e.Row,Ke_Toan_QT_THRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ke_Toan_QT_THRowChangingEvent) Is Nothing) Then
                RaiseEvent Ke_Toan_QT_THRowChanging(Me, New Ke_Toan_QT_THRowChangeEvent(CType(e.Row,Ke_Toan_QT_THRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ke_Toan_QT_THRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ke_Toan_QT_THRowDeleted(Me, New Ke_Toan_QT_THRowChangeEvent(CType(e.Row,Ke_Toan_QT_THRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ke_Toan_QT_THRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ke_Toan_QT_THRowDeleting(Me, New Ke_Toan_QT_THRowChangeEvent(CType(e.Row,Ke_Toan_QT_THRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveKe_Toan_QT_THRow(ByVal row As Ke_Toan_QT_THRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ke_Toan_QT_THRow
        Inherits DataRow
        
        Private tableKe_Toan_QT_TH As Ke_Toan_QT_THDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableKe_Toan_QT_TH = CType(Me.Table,Ke_Toan_QT_THDataTable)
        End Sub
        
        Public Property STT As String
            Get
                Try 
                    Return CType(Me(Me.tableKe_Toan_QT_TH.STTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKe_Toan_QT_TH.STTColumn) = value
            End Set
        End Property
        
        Public Property Ten_Dich_Vu As String
            Get
                Try 
                    Return CType(Me(Me.tableKe_Toan_QT_TH.Ten_Dich_VuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKe_Toan_QT_TH.Ten_Dich_VuColumn) = value
            End Set
        End Property
        
        Public Property KL_EMS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKe_Toan_QT_TH.KL_EMSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKe_Toan_QT_TH.KL_EMSColumn) = value
            End Set
        End Property
        
        Public Property ED As Integer
            Get
                Try 
                    Return CType(Me(Me.tableKe_Toan_QT_TH.EDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKe_Toan_QT_TH.EDColumn) = value
            End Set
        End Property
        
        Public Property EM As Integer
            Get
                Try 
                    Return CType(Me(Me.tableKe_Toan_QT_TH.EMColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKe_Toan_QT_TH.EMColumn) = value
            End Set
        End Property
        
        Public Property ER As Integer
            Get
                Try 
                    Return CType(Me(Me.tableKe_Toan_QT_TH.ERColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKe_Toan_QT_TH.ERColumn) = value
            End Set
        End Property
        
        Public Function IsSTTNull() As Boolean
            Return Me.IsNull(Me.tableKe_Toan_QT_TH.STTColumn)
        End Function
        
        Public Sub SetSTTNull()
            Me(Me.tableKe_Toan_QT_TH.STTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Dich_VuNull() As Boolean
            Return Me.IsNull(Me.tableKe_Toan_QT_TH.Ten_Dich_VuColumn)
        End Function
        
        Public Sub SetTen_Dich_VuNull()
            Me(Me.tableKe_Toan_QT_TH.Ten_Dich_VuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKL_EMSNull() As Boolean
            Return Me.IsNull(Me.tableKe_Toan_QT_TH.KL_EMSColumn)
        End Function
        
        Public Sub SetKL_EMSNull()
            Me(Me.tableKe_Toan_QT_TH.KL_EMSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEDNull() As Boolean
            Return Me.IsNull(Me.tableKe_Toan_QT_TH.EDColumn)
        End Function
        
        Public Sub SetEDNull()
            Me(Me.tableKe_Toan_QT_TH.EDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMNull() As Boolean
            Return Me.IsNull(Me.tableKe_Toan_QT_TH.EMColumn)
        End Function
        
        Public Sub SetEMNull()
            Me(Me.tableKe_Toan_QT_TH.EMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsERNull() As Boolean
            Return Me.IsNull(Me.tableKe_Toan_QT_TH.ERColumn)
        End Function
        
        Public Sub SetERNull()
            Me(Me.tableKe_Toan_QT_TH.ERColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ke_Toan_QT_THRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Ke_Toan_QT_THRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Ke_Toan_QT_THRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Ke_Toan_QT_THRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_San_Luong_QTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_BC As DataColumn
        
        Private columnTen_Buu_Cuc As DataColumn
        
        Private columnSo_Luong_D As DataColumn
        
        Private columnKhoi_Luong_D As DataColumn
        
        Private columnSo_Luong_M As DataColumn
        
        Private columnKhoi_Luong_M As DataColumn
        
        Friend Sub New()
            MyBase.New("E1_San_Luong_QT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_BCColumn As DataColumn
            Get
                Return Me.columnMa_BC
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Buu_CucColumn As DataColumn
            Get
                Return Me.columnTen_Buu_Cuc
            End Get
        End Property
        
        Friend ReadOnly Property So_Luong_DColumn As DataColumn
            Get
                Return Me.columnSo_Luong_D
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_Luong_DColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong_D
            End Get
        End Property
        
        Friend ReadOnly Property So_Luong_MColumn As DataColumn
            Get
                Return Me.columnSo_Luong_M
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_Luong_MColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong_M
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E1_San_Luong_QTRow
            Get
                Return CType(Me.Rows(index),E1_San_Luong_QTRow)
            End Get
        End Property
        
        Public Event E1_San_Luong_QTRowChanged As E1_San_Luong_QTRowChangeEventHandler
        
        Public Event E1_San_Luong_QTRowChanging As E1_San_Luong_QTRowChangeEventHandler
        
        Public Event E1_San_Luong_QTRowDeleted As E1_San_Luong_QTRowChangeEventHandler
        
        Public Event E1_San_Luong_QTRowDeleting As E1_San_Luong_QTRowChangeEventHandler
        
        Public Overloads Sub AddE1_San_Luong_QTRow(ByVal row As E1_San_Luong_QTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE1_San_Luong_QTRow(ByVal Ma_BC As String, ByVal Ten_Buu_Cuc As String, ByVal So_Luong_D As Long, ByVal Khoi_Luong_D As Decimal, ByVal So_Luong_M As Long, ByVal Khoi_Luong_M As Decimal) As E1_San_Luong_QTRow
            Dim rowE1_San_Luong_QTRow As E1_San_Luong_QTRow = CType(Me.NewRow,E1_San_Luong_QTRow)
            rowE1_San_Luong_QTRow.ItemArray = New Object() {Ma_BC, Ten_Buu_Cuc, So_Luong_D, Khoi_Luong_D, So_Luong_M, Khoi_Luong_M}
            Me.Rows.Add(rowE1_San_Luong_QTRow)
            Return rowE1_San_Luong_QTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E1_San_Luong_QTDataTable = CType(MyBase.Clone,E1_San_Luong_QTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E1_San_Luong_QTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_BC = Me.Columns("Ma_BC")
            Me.columnTen_Buu_Cuc = Me.Columns("Ten_Buu_Cuc")
            Me.columnSo_Luong_D = Me.Columns("So_Luong_D")
            Me.columnKhoi_Luong_D = Me.Columns("Khoi_Luong_D")
            Me.columnSo_Luong_M = Me.Columns("So_Luong_M")
            Me.columnKhoi_Luong_M = Me.Columns("Khoi_Luong_M")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_BC = New DataColumn("Ma_BC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_BC)
            Me.columnTen_Buu_Cuc = New DataColumn("Ten_Buu_Cuc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Buu_Cuc)
            Me.columnSo_Luong_D = New DataColumn("So_Luong_D", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Luong_D)
            Me.columnKhoi_Luong_D = New DataColumn("Khoi_Luong_D", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong_D)
            Me.columnSo_Luong_M = New DataColumn("So_Luong_M", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Luong_M)
            Me.columnKhoi_Luong_M = New DataColumn("Khoi_Luong_M", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong_M)
        End Sub
        
        Public Function NewE1_San_Luong_QTRow() As E1_San_Luong_QTRow
            Return CType(Me.NewRow,E1_San_Luong_QTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E1_San_Luong_QTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E1_San_Luong_QTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E1_San_Luong_QTRowChangedEvent) Is Nothing) Then
                RaiseEvent E1_San_Luong_QTRowChanged(Me, New E1_San_Luong_QTRowChangeEvent(CType(e.Row,E1_San_Luong_QTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E1_San_Luong_QTRowChangingEvent) Is Nothing) Then
                RaiseEvent E1_San_Luong_QTRowChanging(Me, New E1_San_Luong_QTRowChangeEvent(CType(e.Row,E1_San_Luong_QTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E1_San_Luong_QTRowDeletedEvent) Is Nothing) Then
                RaiseEvent E1_San_Luong_QTRowDeleted(Me, New E1_San_Luong_QTRowChangeEvent(CType(e.Row,E1_San_Luong_QTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E1_San_Luong_QTRowDeletingEvent) Is Nothing) Then
                RaiseEvent E1_San_Luong_QTRowDeleting(Me, New E1_San_Luong_QTRowChangeEvent(CType(e.Row,E1_San_Luong_QTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE1_San_Luong_QTRow(ByVal row As E1_San_Luong_QTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_San_Luong_QTRow
        Inherits DataRow
        
        Private tableE1_San_Luong_QT As E1_San_Luong_QTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE1_San_Luong_QT = CType(Me.Table,E1_San_Luong_QTDataTable)
        End Sub
        
        Public Property Ma_BC As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_San_Luong_QT.Ma_BCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_San_Luong_QT.Ma_BCColumn) = value
            End Set
        End Property
        
        Public Property Ten_Buu_Cuc As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_San_Luong_QT.Ten_Buu_CucColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_San_Luong_QT.Ten_Buu_CucColumn) = value
            End Set
        End Property
        
        Public Property So_Luong_D As Long
            Get
                Try 
                    Return CType(Me(Me.tableE1_San_Luong_QT.So_Luong_DColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_San_Luong_QT.So_Luong_DColumn) = value
            End Set
        End Property
        
        Public Property Khoi_Luong_D As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableE1_San_Luong_QT.Khoi_Luong_DColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_San_Luong_QT.Khoi_Luong_DColumn) = value
            End Set
        End Property
        
        Public Property So_Luong_M As Long
            Get
                Try 
                    Return CType(Me(Me.tableE1_San_Luong_QT.So_Luong_MColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_San_Luong_QT.So_Luong_MColumn) = value
            End Set
        End Property
        
        Public Property Khoi_Luong_M As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableE1_San_Luong_QT.Khoi_Luong_MColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_San_Luong_QT.Khoi_Luong_MColumn) = value
            End Set
        End Property
        
        Public Function IsMa_BCNull() As Boolean
            Return Me.IsNull(Me.tableE1_San_Luong_QT.Ma_BCColumn)
        End Function
        
        Public Sub SetMa_BCNull()
            Me(Me.tableE1_San_Luong_QT.Ma_BCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Buu_CucNull() As Boolean
            Return Me.IsNull(Me.tableE1_San_Luong_QT.Ten_Buu_CucColumn)
        End Function
        
        Public Sub SetTen_Buu_CucNull()
            Me(Me.tableE1_San_Luong_QT.Ten_Buu_CucColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Luong_DNull() As Boolean
            Return Me.IsNull(Me.tableE1_San_Luong_QT.So_Luong_DColumn)
        End Function
        
        Public Sub SetSo_Luong_DNull()
            Me(Me.tableE1_San_Luong_QT.So_Luong_DColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_Luong_DNull() As Boolean
            Return Me.IsNull(Me.tableE1_San_Luong_QT.Khoi_Luong_DColumn)
        End Function
        
        Public Sub SetKhoi_Luong_DNull()
            Me(Me.tableE1_San_Luong_QT.Khoi_Luong_DColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Luong_MNull() As Boolean
            Return Me.IsNull(Me.tableE1_San_Luong_QT.So_Luong_MColumn)
        End Function
        
        Public Sub SetSo_Luong_MNull()
            Me(Me.tableE1_San_Luong_QT.So_Luong_MColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_Luong_MNull() As Boolean
            Return Me.IsNull(Me.tableE1_San_Luong_QT.Khoi_Luong_MColumn)
        End Function
        
        Public Sub SetKhoi_Luong_MNull()
            Me(Me.tableE1_San_Luong_QT.Khoi_Luong_MColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_San_Luong_QTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E1_San_Luong_QTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E1_San_Luong_QTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E1_San_Luong_QTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_E1 As DataColumn
        
        Private columnNguoi_Nhan As DataColumn
        
        Private columnDia_Chi_Nhan As DataColumn
        
        Private columnNgay_Dong As DataColumn
        
        Private columnSo_TKHQ As DataColumn
        
        Private columnSo_Bien_Lai As DataColumn
        
        Private columnLe_Phi_HQ As DataColumn
        
        Private columnThue_NK_VAT As DataColumn
        
        Private columnCong As DataColumn
        
        Private columnThue_NK As DataColumn
        
        Private columnThue_VAT As DataColumn
        
        Private columnNgay_CH As DataColumn
        
        Private columnSo_CT As DataColumn
        
        Private columnTui_So As DataColumn
        
        Private columnMa_Tinh_CH As DataColumn
        
        Private columnTen_Tinh_CH As DataColumn
        
        Private columnDuong_Thu_CH As DataColumn
        
        Friend Sub New()
            MyBase.New("E1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_NhanColumn As DataColumn
            Get
                Return Me.columnNguoi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Dia_Chi_NhanColumn As DataColumn
            Get
                Return Me.columnDia_Chi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_DongColumn As DataColumn
            Get
                Return Me.columnNgay_Dong
            End Get
        End Property
        
        Friend ReadOnly Property So_TKHQColumn As DataColumn
            Get
                Return Me.columnSo_TKHQ
            End Get
        End Property
        
        Friend ReadOnly Property So_Bien_LaiColumn As DataColumn
            Get
                Return Me.columnSo_Bien_Lai
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_HQColumn As DataColumn
            Get
                Return Me.columnLe_Phi_HQ
            End Get
        End Property
        
        Friend ReadOnly Property Thue_NK_VATColumn As DataColumn
            Get
                Return Me.columnThue_NK_VAT
            End Get
        End Property
        
        Friend ReadOnly Property CongColumn As DataColumn
            Get
                Return Me.columnCong
            End Get
        End Property
        
        Friend ReadOnly Property Thue_NKColumn As DataColumn
            Get
                Return Me.columnThue_NK
            End Get
        End Property
        
        Friend ReadOnly Property Thue_VATColumn As DataColumn
            Get
                Return Me.columnThue_VAT
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_CHColumn As DataColumn
            Get
                Return Me.columnNgay_CH
            End Get
        End Property
        
        Friend ReadOnly Property So_CTColumn As DataColumn
            Get
                Return Me.columnSo_CT
            End Get
        End Property
        
        Friend ReadOnly Property Tui_SoColumn As DataColumn
            Get
                Return Me.columnTui_So
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Tinh_CHColumn As DataColumn
            Get
                Return Me.columnMa_Tinh_CH
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Tinh_CHColumn As DataColumn
            Get
                Return Me.columnTen_Tinh_CH
            End Get
        End Property
        
        Friend ReadOnly Property Duong_Thu_CHColumn As DataColumn
            Get
                Return Me.columnDuong_Thu_CH
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow
            Get
                Return CType(Me.Rows(index),E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow)
            End Get
        End Property
        
        Public Event E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChanged As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangeEventHandler
        
        Public Event E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChanging As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangeEventHandler
        
        Public Event E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowDeleted As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangeEventHandler
        
        Public Event E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowDeleting As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangeEventHandler
        
        Public Overloads Sub AddE1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow(ByVal row As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow( _
                    ByVal Ma_E1 As String,  _
                    ByVal Nguoi_Nhan As String,  _
                    ByVal Dia_Chi_Nhan As String,  _
                    ByVal Ngay_Dong As Date,  _
                    ByVal So_TKHQ As String,  _
                    ByVal So_Bien_Lai As String,  _
                    ByVal Le_Phi_HQ As Integer,  _
                    ByVal Thue_NK_VAT As Integer,  _
                    ByVal Cong As Integer,  _
                    ByVal Thue_NK As Integer,  _
                    ByVal Thue_VAT As Integer,  _
                    ByVal Ngay_CH As Date,  _
                    ByVal So_CT As String,  _
                    ByVal Tui_So As String,  _
                    ByVal Ma_Tinh_CH As String,  _
                    ByVal Ten_Tinh_CH As String,  _
                    ByVal Duong_Thu_CH As String) As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow
            Dim rowE1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow = CType(Me.NewRow,E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow)
            rowE1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow.ItemArray = New Object() {Ma_E1, Nguoi_Nhan, Dia_Chi_Nhan, Ngay_Dong, So_TKHQ, So_Bien_Lai, Le_Phi_HQ, Thue_NK_VAT, Cong, Thue_NK, Thue_VAT, Ngay_CH, So_CT, Tui_So, Ma_Tinh_CH, Ten_Tinh_CH, Duong_Thu_CH}
            Me.Rows.Add(rowE1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow)
            Return rowE1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanDataTable = CType(MyBase.Clone,E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnNguoi_Nhan = Me.Columns("Nguoi_Nhan")
            Me.columnDia_Chi_Nhan = Me.Columns("Dia_Chi_Nhan")
            Me.columnNgay_Dong = Me.Columns("Ngay_Dong")
            Me.columnSo_TKHQ = Me.Columns("So_TKHQ")
            Me.columnSo_Bien_Lai = Me.Columns("So_Bien_Lai")
            Me.columnLe_Phi_HQ = Me.Columns("Le_Phi_HQ")
            Me.columnThue_NK_VAT = Me.Columns("Thue_NK_VAT")
            Me.columnCong = Me.Columns("Cong")
            Me.columnThue_NK = Me.Columns("Thue_NK")
            Me.columnThue_VAT = Me.Columns("Thue_VAT")
            Me.columnNgay_CH = Me.Columns("Ngay_CH")
            Me.columnSo_CT = Me.Columns("So_CT")
            Me.columnTui_So = Me.Columns("Tui_So")
            Me.columnMa_Tinh_CH = Me.Columns("Ma_Tinh_CH")
            Me.columnTen_Tinh_CH = Me.Columns("Ten_Tinh_CH")
            Me.columnDuong_Thu_CH = Me.Columns("Duong_Thu_CH")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnNguoi_Nhan = New DataColumn("Nguoi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Nhan)
            Me.columnDia_Chi_Nhan = New DataColumn("Dia_Chi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia_Chi_Nhan)
            Me.columnNgay_Dong = New DataColumn("Ngay_Dong", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Dong)
            Me.columnSo_TKHQ = New DataColumn("So_TKHQ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_TKHQ)
            Me.columnSo_Bien_Lai = New DataColumn("So_Bien_Lai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Bien_Lai)
            Me.columnLe_Phi_HQ = New DataColumn("Le_Phi_HQ", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_HQ)
            Me.columnThue_NK_VAT = New DataColumn("Thue_NK_VAT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThue_NK_VAT)
            Me.columnCong = New DataColumn("Cong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCong)
            Me.columnThue_NK = New DataColumn("Thue_NK", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThue_NK)
            Me.columnThue_VAT = New DataColumn("Thue_VAT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThue_VAT)
            Me.columnNgay_CH = New DataColumn("Ngay_CH", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_CH)
            Me.columnSo_CT = New DataColumn("So_CT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_CT)
            Me.columnTui_So = New DataColumn("Tui_So", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So)
            Me.columnMa_Tinh_CH = New DataColumn("Ma_Tinh_CH", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Tinh_CH)
            Me.columnTen_Tinh_CH = New DataColumn("Ten_Tinh_CH", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Tinh_CH)
            Me.columnDuong_Thu_CH = New DataColumn("Duong_Thu_CH", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDuong_Thu_CH)
            Me.columnNgay_CH.AllowDBNull = false
        End Sub
        
        Public Function NewE1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow() As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow
            Return CType(Me.NewRow,E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangedEvent) Is Nothing) Then
                RaiseEvent E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChanged(Me, New E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangeEvent(CType(e.Row,E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangingEvent) Is Nothing) Then
                RaiseEvent E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChanging(Me, New E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangeEvent(CType(e.Row,E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowDeletedEvent) Is Nothing) Then
                RaiseEvent E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowDeleted(Me, New E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangeEvent(CType(e.Row,E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowDeletingEvent) Is Nothing) Then
                RaiseEvent E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowDeleting(Me, New E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangeEvent(CType(e.Row,E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow(ByVal row As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow
        Inherits DataRow
        
        Private tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan = CType(Me.Table,E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanDataTable)
        End Sub
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Nguoi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Nguoi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Nguoi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Dia_Chi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Dia_Chi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Dia_Chi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Dong As Date
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ngay_DongColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ngay_DongColumn) = value
            End Set
        End Property
        
        Public Property So_TKHQ As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.So_TKHQColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.So_TKHQColumn) = value
            End Set
        End Property
        
        Public Property So_Bien_Lai As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.So_Bien_LaiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.So_Bien_LaiColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_HQ As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Le_Phi_HQColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Le_Phi_HQColumn) = value
            End Set
        End Property
        
        Public Property Thue_NK_VAT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Thue_NK_VATColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Thue_NK_VATColumn) = value
            End Set
        End Property
        
        Public Property Cong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.CongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.CongColumn) = value
            End Set
        End Property
        
        Public Property Thue_NK As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Thue_NKColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Thue_NKColumn) = value
            End Set
        End Property
        
        Public Property Thue_VAT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Thue_VATColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Thue_VATColumn) = value
            End Set
        End Property
        
        Public Property Ngay_CH As Date
            Get
                Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ngay_CHColumn),Date)
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ngay_CHColumn) = value
            End Set
        End Property
        
        Public Property So_CT As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.So_CTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.So_CTColumn) = value
            End Set
        End Property
        
        Public Property Tui_So As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Tui_SoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Tui_SoColumn) = value
            End Set
        End Property
        
        Public Property Ma_Tinh_CH As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ma_Tinh_CHColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ma_Tinh_CHColumn) = value
            End Set
        End Property
        
        Public Property Ten_Tinh_CH As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ten_Tinh_CHColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ten_Tinh_CHColumn) = value
            End Set
        End Property
        
        Public Property Duong_Thu_CH As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Duong_Thu_CHColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Duong_Thu_CHColumn) = value
            End Set
        End Property
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Nguoi_NhanColumn)
        End Function
        
        Public Sub SetNguoi_NhanNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Nguoi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDia_Chi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Dia_Chi_NhanColumn)
        End Function
        
        Public Sub SetDia_Chi_NhanNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Dia_Chi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_DongNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ngay_DongColumn)
        End Function
        
        Public Sub SetNgay_DongNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ngay_DongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_TKHQNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.So_TKHQColumn)
        End Function
        
        Public Sub SetSo_TKHQNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.So_TKHQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Bien_LaiNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.So_Bien_LaiColumn)
        End Function
        
        Public Sub SetSo_Bien_LaiNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.So_Bien_LaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_HQNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Le_Phi_HQColumn)
        End Function
        
        Public Sub SetLe_Phi_HQNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Le_Phi_HQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThue_NK_VATNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Thue_NK_VATColumn)
        End Function
        
        Public Sub SetThue_NK_VATNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Thue_NK_VATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCongNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.CongColumn)
        End Function
        
        Public Sub SetCongNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.CongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThue_NKNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Thue_NKColumn)
        End Function
        
        Public Sub SetThue_NKNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Thue_NKColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThue_VATNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Thue_VATColumn)
        End Function
        
        Public Sub SetThue_VATNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Thue_VATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_CTNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.So_CTColumn)
        End Function
        
        Public Sub SetSo_CTNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.So_CTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_SoNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Tui_SoColumn)
        End Function
        
        Public Sub SetTui_SoNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Tui_SoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Tinh_CHNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ma_Tinh_CHColumn)
        End Function
        
        Public Sub SetMa_Tinh_CHNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ma_Tinh_CHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Tinh_CHNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ten_Tinh_CHColumn)
        End Function
        
        Public Sub SetTen_Tinh_CHNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Ten_Tinh_CHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDuong_Thu_CHNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Duong_Thu_CHColumn)
        End Function
        
        Public Sub SetDuong_Thu_CHNull()
            Me(Me.tableE1_Di_Bang_Ke_Hai_Quan_Chuyen_Hoan.Duong_Thu_CHColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E1_Di_Bang_Ke_Hai_Quan_Chuyen_HoanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_CN55_Chi_TietDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNgay_Dong As DataColumn
        
        Private columnSo_CT_Den As DataColumn
        
        Private columnLoai_CT_Den As DataColumn
        
        Private columnSo_Luong_D As DataColumn
        
        Private columnSo_Luong_M As DataColumn
        
        Private columnGhi_Chu As DataColumn
        
        Friend Sub New()
            MyBase.New("Ban_Ke_CN55_Chi_Tiet")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_DongColumn As DataColumn
            Get
                Return Me.columnNgay_Dong
            End Get
        End Property
        
        Friend ReadOnly Property So_CT_DenColumn As DataColumn
            Get
                Return Me.columnSo_CT_Den
            End Get
        End Property
        
        Friend ReadOnly Property Loai_CT_DenColumn As DataColumn
            Get
                Return Me.columnLoai_CT_Den
            End Get
        End Property
        
        Friend ReadOnly Property So_Luong_DColumn As DataColumn
            Get
                Return Me.columnSo_Luong_D
            End Get
        End Property
        
        Friend ReadOnly Property So_Luong_MColumn As DataColumn
            Get
                Return Me.columnSo_Luong_M
            End Get
        End Property
        
        Friend ReadOnly Property Ghi_ChuColumn As DataColumn
            Get
                Return Me.columnGhi_Chu
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ban_Ke_CN55_Chi_TietRow
            Get
                Return CType(Me.Rows(index),Ban_Ke_CN55_Chi_TietRow)
            End Get
        End Property
        
        Public Event Ban_Ke_CN55_Chi_TietRowChanged As Ban_Ke_CN55_Chi_TietRowChangeEventHandler
        
        Public Event Ban_Ke_CN55_Chi_TietRowChanging As Ban_Ke_CN55_Chi_TietRowChangeEventHandler
        
        Public Event Ban_Ke_CN55_Chi_TietRowDeleted As Ban_Ke_CN55_Chi_TietRowChangeEventHandler
        
        Public Event Ban_Ke_CN55_Chi_TietRowDeleting As Ban_Ke_CN55_Chi_TietRowChangeEventHandler
        
        Public Overloads Sub AddBan_Ke_CN55_Chi_TietRow(ByVal row As Ban_Ke_CN55_Chi_TietRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBan_Ke_CN55_Chi_TietRow(ByVal Ngay_Dong As Date, ByVal So_CT_Den As Integer, ByVal Loai_CT_Den As String, ByVal So_Luong_D As Integer, ByVal So_Luong_M As Integer, ByVal Ghi_Chu As String) As Ban_Ke_CN55_Chi_TietRow
            Dim rowBan_Ke_CN55_Chi_TietRow As Ban_Ke_CN55_Chi_TietRow = CType(Me.NewRow,Ban_Ke_CN55_Chi_TietRow)
            rowBan_Ke_CN55_Chi_TietRow.ItemArray = New Object() {Ngay_Dong, So_CT_Den, Loai_CT_Den, So_Luong_D, So_Luong_M, Ghi_Chu}
            Me.Rows.Add(rowBan_Ke_CN55_Chi_TietRow)
            Return rowBan_Ke_CN55_Chi_TietRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Ban_Ke_CN55_Chi_TietDataTable = CType(MyBase.Clone,Ban_Ke_CN55_Chi_TietDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Ban_Ke_CN55_Chi_TietDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNgay_Dong = Me.Columns("Ngay_Dong")
            Me.columnSo_CT_Den = Me.Columns("So_CT_Den")
            Me.columnLoai_CT_Den = Me.Columns("Loai_CT_Den")
            Me.columnSo_Luong_D = Me.Columns("So_Luong_D")
            Me.columnSo_Luong_M = Me.Columns("So_Luong_M")
            Me.columnGhi_Chu = Me.Columns("Ghi_Chu")
        End Sub
        
        Private Sub InitClass()
            Me.columnNgay_Dong = New DataColumn("Ngay_Dong", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Dong)
            Me.columnSo_CT_Den = New DataColumn("So_CT_Den", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_CT_Den)
            Me.columnLoai_CT_Den = New DataColumn("Loai_CT_Den", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_CT_Den)
            Me.columnSo_Luong_D = New DataColumn("So_Luong_D", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Luong_D)
            Me.columnSo_Luong_M = New DataColumn("So_Luong_M", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Luong_M)
            Me.columnGhi_Chu = New DataColumn("Ghi_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGhi_Chu)
            Me.columnLoai_CT_Den.AllowDBNull = false
        End Sub
        
        Public Function NewBan_Ke_CN55_Chi_TietRow() As Ban_Ke_CN55_Chi_TietRow
            Return CType(Me.NewRow,Ban_Ke_CN55_Chi_TietRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Ban_Ke_CN55_Chi_TietRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Ban_Ke_CN55_Chi_TietRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ban_Ke_CN55_Chi_TietRowChangedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_CN55_Chi_TietRowChanged(Me, New Ban_Ke_CN55_Chi_TietRowChangeEvent(CType(e.Row,Ban_Ke_CN55_Chi_TietRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ban_Ke_CN55_Chi_TietRowChangingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_CN55_Chi_TietRowChanging(Me, New Ban_Ke_CN55_Chi_TietRowChangeEvent(CType(e.Row,Ban_Ke_CN55_Chi_TietRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ban_Ke_CN55_Chi_TietRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_CN55_Chi_TietRowDeleted(Me, New Ban_Ke_CN55_Chi_TietRowChangeEvent(CType(e.Row,Ban_Ke_CN55_Chi_TietRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ban_Ke_CN55_Chi_TietRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_CN55_Chi_TietRowDeleting(Me, New Ban_Ke_CN55_Chi_TietRowChangeEvent(CType(e.Row,Ban_Ke_CN55_Chi_TietRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBan_Ke_CN55_Chi_TietRow(ByVal row As Ban_Ke_CN55_Chi_TietRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_CN55_Chi_TietRow
        Inherits DataRow
        
        Private tableBan_Ke_CN55_Chi_Tiet As Ban_Ke_CN55_Chi_TietDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBan_Ke_CN55_Chi_Tiet = CType(Me.Table,Ban_Ke_CN55_Chi_TietDataTable)
        End Sub
        
        Public Property Ngay_Dong As Date
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN55_Chi_Tiet.Ngay_DongColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN55_Chi_Tiet.Ngay_DongColumn) = value
            End Set
        End Property
        
        Public Property So_CT_Den As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN55_Chi_Tiet.So_CT_DenColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN55_Chi_Tiet.So_CT_DenColumn) = value
            End Set
        End Property
        
        Public Property Loai_CT_Den As String
            Get
                Return CType(Me(Me.tableBan_Ke_CN55_Chi_Tiet.Loai_CT_DenColumn),String)
            End Get
            Set
                Me(Me.tableBan_Ke_CN55_Chi_Tiet.Loai_CT_DenColumn) = value
            End Set
        End Property
        
        Public Property So_Luong_D As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN55_Chi_Tiet.So_Luong_DColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN55_Chi_Tiet.So_Luong_DColumn) = value
            End Set
        End Property
        
        Public Property So_Luong_M As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN55_Chi_Tiet.So_Luong_MColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN55_Chi_Tiet.So_Luong_MColumn) = value
            End Set
        End Property
        
        Public Property Ghi_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN55_Chi_Tiet.Ghi_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN55_Chi_Tiet.Ghi_ChuColumn) = value
            End Set
        End Property
        
        Public Function IsNgay_DongNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN55_Chi_Tiet.Ngay_DongColumn)
        End Function
        
        Public Sub SetNgay_DongNull()
            Me(Me.tableBan_Ke_CN55_Chi_Tiet.Ngay_DongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_CT_DenNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN55_Chi_Tiet.So_CT_DenColumn)
        End Function
        
        Public Sub SetSo_CT_DenNull()
            Me(Me.tableBan_Ke_CN55_Chi_Tiet.So_CT_DenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Luong_DNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN55_Chi_Tiet.So_Luong_DColumn)
        End Function
        
        Public Sub SetSo_Luong_DNull()
            Me(Me.tableBan_Ke_CN55_Chi_Tiet.So_Luong_DColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Luong_MNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN55_Chi_Tiet.So_Luong_MColumn)
        End Function
        
        Public Sub SetSo_Luong_MNull()
            Me(Me.tableBan_Ke_CN55_Chi_Tiet.So_Luong_MColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGhi_ChuNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN55_Chi_Tiet.Ghi_ChuColumn)
        End Function
        
        Public Sub SetGhi_ChuNull()
            Me(Me.tableBan_Ke_CN55_Chi_Tiet.Ghi_ChuColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_CN55_Chi_TietRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Ban_Ke_CN55_Chi_TietRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Ban_Ke_CN55_Chi_TietRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Ban_Ke_CN55_Chi_TietRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_CN56_Chi_TietDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_Bc_Den As DataColumn
        
        Private columnTen_Duong_Thu_Den As DataColumn
        
        Private columnLoai_CT_Den As DataColumn
        
        Private columnMa_Bc_KT_Den As DataColumn
        
        Private columnTen_Ma_Bc_KT_Den As DataColumn
        
        Private columnSL_D_Col_1 As DataColumn
        
        Private columnSL_M_Col_1 As DataColumn
        
        Private columnSL_D_Col_2 As DataColumn
        
        Private columnSL_M_Col_2 As DataColumn
        
        Private columnSL_D_Col_3 As DataColumn
        
        Private columnSL_M_Col_3 As DataColumn
        
        Friend Sub New()
            MyBase.New("Ban_Ke_CN56_Chi_Tiet")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_DenColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Den
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Duong_Thu_DenColumn As DataColumn
            Get
                Return Me.columnTen_Duong_Thu_Den
            End Get
        End Property
        
        Friend ReadOnly Property Loai_CT_DenColumn As DataColumn
            Get
                Return Me.columnLoai_CT_Den
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_KT_DenColumn As DataColumn
            Get
                Return Me.columnMa_Bc_KT_Den
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Ma_Bc_KT_DenColumn As DataColumn
            Get
                Return Me.columnTen_Ma_Bc_KT_Den
            End Get
        End Property
        
        Friend ReadOnly Property SL_D_Col_1Column As DataColumn
            Get
                Return Me.columnSL_D_Col_1
            End Get
        End Property
        
        Friend ReadOnly Property SL_M_Col_1Column As DataColumn
            Get
                Return Me.columnSL_M_Col_1
            End Get
        End Property
        
        Friend ReadOnly Property SL_D_Col_2Column As DataColumn
            Get
                Return Me.columnSL_D_Col_2
            End Get
        End Property
        
        Friend ReadOnly Property SL_M_Col_2Column As DataColumn
            Get
                Return Me.columnSL_M_Col_2
            End Get
        End Property
        
        Friend ReadOnly Property SL_D_Col_3Column As DataColumn
            Get
                Return Me.columnSL_D_Col_3
            End Get
        End Property
        
        Friend ReadOnly Property SL_M_Col_3Column As DataColumn
            Get
                Return Me.columnSL_M_Col_3
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ban_Ke_CN56_Chi_TietRow
            Get
                Return CType(Me.Rows(index),Ban_Ke_CN56_Chi_TietRow)
            End Get
        End Property
        
        Public Event Ban_Ke_CN56_Chi_TietRowChanged As Ban_Ke_CN56_Chi_TietRowChangeEventHandler
        
        Public Event Ban_Ke_CN56_Chi_TietRowChanging As Ban_Ke_CN56_Chi_TietRowChangeEventHandler
        
        Public Event Ban_Ke_CN56_Chi_TietRowDeleted As Ban_Ke_CN56_Chi_TietRowChangeEventHandler
        
        Public Event Ban_Ke_CN56_Chi_TietRowDeleting As Ban_Ke_CN56_Chi_TietRowChangeEventHandler
        
        Public Overloads Sub AddBan_Ke_CN56_Chi_TietRow(ByVal row As Ban_Ke_CN56_Chi_TietRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBan_Ke_CN56_Chi_TietRow(ByVal Ma_Bc_Den As String, ByVal Ten_Duong_Thu_Den As String, ByVal Loai_CT_Den As String, ByVal Ma_Bc_KT_Den As String, ByVal Ten_Ma_Bc_KT_Den As String, ByVal SL_D_Col_1 As Integer, ByVal SL_M_Col_1 As Integer, ByVal SL_D_Col_2 As Integer, ByVal SL_M_Col_2 As Integer, ByVal SL_D_Col_3 As Integer, ByVal SL_M_Col_3 As Integer) As Ban_Ke_CN56_Chi_TietRow
            Dim rowBan_Ke_CN56_Chi_TietRow As Ban_Ke_CN56_Chi_TietRow = CType(Me.NewRow,Ban_Ke_CN56_Chi_TietRow)
            rowBan_Ke_CN56_Chi_TietRow.ItemArray = New Object() {Ma_Bc_Den, Ten_Duong_Thu_Den, Loai_CT_Den, Ma_Bc_KT_Den, Ten_Ma_Bc_KT_Den, SL_D_Col_1, SL_M_Col_1, SL_D_Col_2, SL_M_Col_2, SL_D_Col_3, SL_M_Col_3}
            Me.Rows.Add(rowBan_Ke_CN56_Chi_TietRow)
            Return rowBan_Ke_CN56_Chi_TietRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Ban_Ke_CN56_Chi_TietDataTable = CType(MyBase.Clone,Ban_Ke_CN56_Chi_TietDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Ban_Ke_CN56_Chi_TietDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_Bc_Den = Me.Columns("Ma_Bc_Den")
            Me.columnTen_Duong_Thu_Den = Me.Columns("Ten_Duong_Thu_Den")
            Me.columnLoai_CT_Den = Me.Columns("Loai_CT_Den")
            Me.columnMa_Bc_KT_Den = Me.Columns("Ma_Bc_KT_Den")
            Me.columnTen_Ma_Bc_KT_Den = Me.Columns("Ten_Ma_Bc_KT_Den")
            Me.columnSL_D_Col_1 = Me.Columns("SL_D_Col_1")
            Me.columnSL_M_Col_1 = Me.Columns("SL_M_Col_1")
            Me.columnSL_D_Col_2 = Me.Columns("SL_D_Col_2")
            Me.columnSL_M_Col_2 = Me.Columns("SL_M_Col_2")
            Me.columnSL_D_Col_3 = Me.Columns("SL_D_Col_3")
            Me.columnSL_M_Col_3 = Me.Columns("SL_M_Col_3")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_Bc_Den = New DataColumn("Ma_Bc_Den", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Den)
            Me.columnTen_Duong_Thu_Den = New DataColumn("Ten_Duong_Thu_Den", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Duong_Thu_Den)
            Me.columnLoai_CT_Den = New DataColumn("Loai_CT_Den", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_CT_Den)
            Me.columnMa_Bc_KT_Den = New DataColumn("Ma_Bc_KT_Den", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_KT_Den)
            Me.columnTen_Ma_Bc_KT_Den = New DataColumn("Ten_Ma_Bc_KT_Den", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Ma_Bc_KT_Den)
            Me.columnSL_D_Col_1 = New DataColumn("SL_D_Col_1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSL_D_Col_1)
            Me.columnSL_M_Col_1 = New DataColumn("SL_M_Col_1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSL_M_Col_1)
            Me.columnSL_D_Col_2 = New DataColumn("SL_D_Col_2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSL_D_Col_2)
            Me.columnSL_M_Col_2 = New DataColumn("SL_M_Col_2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSL_M_Col_2)
            Me.columnSL_D_Col_3 = New DataColumn("SL_D_Col_3", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSL_D_Col_3)
            Me.columnSL_M_Col_3 = New DataColumn("SL_M_Col_3", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSL_M_Col_3)
        End Sub
        
        Public Function NewBan_Ke_CN56_Chi_TietRow() As Ban_Ke_CN56_Chi_TietRow
            Return CType(Me.NewRow,Ban_Ke_CN56_Chi_TietRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Ban_Ke_CN56_Chi_TietRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Ban_Ke_CN56_Chi_TietRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ban_Ke_CN56_Chi_TietRowChangedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_CN56_Chi_TietRowChanged(Me, New Ban_Ke_CN56_Chi_TietRowChangeEvent(CType(e.Row,Ban_Ke_CN56_Chi_TietRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ban_Ke_CN56_Chi_TietRowChangingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_CN56_Chi_TietRowChanging(Me, New Ban_Ke_CN56_Chi_TietRowChangeEvent(CType(e.Row,Ban_Ke_CN56_Chi_TietRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ban_Ke_CN56_Chi_TietRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_CN56_Chi_TietRowDeleted(Me, New Ban_Ke_CN56_Chi_TietRowChangeEvent(CType(e.Row,Ban_Ke_CN56_Chi_TietRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ban_Ke_CN56_Chi_TietRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_CN56_Chi_TietRowDeleting(Me, New Ban_Ke_CN56_Chi_TietRowChangeEvent(CType(e.Row,Ban_Ke_CN56_Chi_TietRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBan_Ke_CN56_Chi_TietRow(ByVal row As Ban_Ke_CN56_Chi_TietRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_CN56_Chi_TietRow
        Inherits DataRow
        
        Private tableBan_Ke_CN56_Chi_Tiet As Ban_Ke_CN56_Chi_TietDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBan_Ke_CN56_Chi_Tiet = CType(Me.Table,Ban_Ke_CN56_Chi_TietDataTable)
        End Sub
        
        Public Property Ma_Bc_Den As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN56_Chi_Tiet.Ma_Bc_DenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN56_Chi_Tiet.Ma_Bc_DenColumn) = value
            End Set
        End Property
        
        Public Property Ten_Duong_Thu_Den As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN56_Chi_Tiet.Ten_Duong_Thu_DenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN56_Chi_Tiet.Ten_Duong_Thu_DenColumn) = value
            End Set
        End Property
        
        Public Property Loai_CT_Den As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN56_Chi_Tiet.Loai_CT_DenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN56_Chi_Tiet.Loai_CT_DenColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_KT_Den As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN56_Chi_Tiet.Ma_Bc_KT_DenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN56_Chi_Tiet.Ma_Bc_KT_DenColumn) = value
            End Set
        End Property
        
        Public Property Ten_Ma_Bc_KT_Den As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN56_Chi_Tiet.Ten_Ma_Bc_KT_DenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN56_Chi_Tiet.Ten_Ma_Bc_KT_DenColumn) = value
            End Set
        End Property
        
        Public Property SL_D_Col_1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_D_Col_1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_D_Col_1Column) = value
            End Set
        End Property
        
        Public Property SL_M_Col_1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_M_Col_1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_M_Col_1Column) = value
            End Set
        End Property
        
        Public Property SL_D_Col_2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_D_Col_2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_D_Col_2Column) = value
            End Set
        End Property
        
        Public Property SL_M_Col_2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_M_Col_2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_M_Col_2Column) = value
            End Set
        End Property
        
        Public Property SL_D_Col_3 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_D_Col_3Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_D_Col_3Column) = value
            End Set
        End Property
        
        Public Property SL_M_Col_3 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_M_Col_3Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_M_Col_3Column) = value
            End Set
        End Property
        
        Public Function IsMa_Bc_DenNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN56_Chi_Tiet.Ma_Bc_DenColumn)
        End Function
        
        Public Sub SetMa_Bc_DenNull()
            Me(Me.tableBan_Ke_CN56_Chi_Tiet.Ma_Bc_DenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Duong_Thu_DenNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN56_Chi_Tiet.Ten_Duong_Thu_DenColumn)
        End Function
        
        Public Sub SetTen_Duong_Thu_DenNull()
            Me(Me.tableBan_Ke_CN56_Chi_Tiet.Ten_Duong_Thu_DenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_CT_DenNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN56_Chi_Tiet.Loai_CT_DenColumn)
        End Function
        
        Public Sub SetLoai_CT_DenNull()
            Me(Me.tableBan_Ke_CN56_Chi_Tiet.Loai_CT_DenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_KT_DenNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN56_Chi_Tiet.Ma_Bc_KT_DenColumn)
        End Function
        
        Public Sub SetMa_Bc_KT_DenNull()
            Me(Me.tableBan_Ke_CN56_Chi_Tiet.Ma_Bc_KT_DenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Ma_Bc_KT_DenNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN56_Chi_Tiet.Ten_Ma_Bc_KT_DenColumn)
        End Function
        
        Public Sub SetTen_Ma_Bc_KT_DenNull()
            Me(Me.tableBan_Ke_CN56_Chi_Tiet.Ten_Ma_Bc_KT_DenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSL_D_Col_1Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN56_Chi_Tiet.SL_D_Col_1Column)
        End Function
        
        Public Sub SetSL_D_Col_1Null()
            Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_D_Col_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSL_M_Col_1Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN56_Chi_Tiet.SL_M_Col_1Column)
        End Function
        
        Public Sub SetSL_M_Col_1Null()
            Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_M_Col_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSL_D_Col_2Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN56_Chi_Tiet.SL_D_Col_2Column)
        End Function
        
        Public Sub SetSL_D_Col_2Null()
            Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_D_Col_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSL_M_Col_2Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN56_Chi_Tiet.SL_M_Col_2Column)
        End Function
        
        Public Sub SetSL_M_Col_2Null()
            Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_M_Col_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSL_D_Col_3Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN56_Chi_Tiet.SL_D_Col_3Column)
        End Function
        
        Public Sub SetSL_D_Col_3Null()
            Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_D_Col_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSL_M_Col_3Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_CN56_Chi_Tiet.SL_M_Col_3Column)
        End Function
        
        Public Sub SetSL_M_Col_3Null()
            Me(Me.tableBan_Ke_CN56_Chi_Tiet.SL_M_Col_3Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_CN56_Chi_TietRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Ban_Ke_CN56_Chi_TietRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Ban_Ke_CN56_Chi_TietRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Ban_Ke_CN56_Chi_TietRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_E1 As DataColumn
        
        Private columnSo_TKHQ As DataColumn
        
        Private columnSo_Bien_Lai As DataColumn
        
        Private columnSo_Kho As DataColumn
        
        Private columnNguoi_Nhan As DataColumn
        
        Private columnDia_Chi_Nhan As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnTong_Tien As DataColumn
        
        Private columnId_Duong_Thu As DataColumn
        
        Private columnTen_Duong_Thu As DataColumn
        
        Private columnId_Chuyen_Thu As DataColumn
        
        Private columnSo_Chuyen_Thu As DataColumn
        
        Private columnId_E2 As DataColumn
        
        Private columnTui_So As DataColumn
        
        Private columnMa_Bc_Khai_Thac As DataColumn
        
        Friend Sub New()
            MyBase.New("E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property So_TKHQColumn As DataColumn
            Get
                Return Me.columnSo_TKHQ
            End Get
        End Property
        
        Friend ReadOnly Property So_Bien_LaiColumn As DataColumn
            Get
                Return Me.columnSo_Bien_Lai
            End Get
        End Property
        
        Friend ReadOnly Property So_KhoColumn As DataColumn
            Get
                Return Me.columnSo_Kho
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_NhanColumn As DataColumn
            Get
                Return Me.columnNguoi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Dia_Chi_NhanColumn As DataColumn
            Get
                Return Me.columnDia_Chi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Tong_TienColumn As DataColumn
            Get
                Return Me.columnTong_Tien
            End Get
        End Property
        
        Friend ReadOnly Property Id_Duong_ThuColumn As DataColumn
            Get
                Return Me.columnId_Duong_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Duong_ThuColumn As DataColumn
            Get
                Return Me.columnTen_Duong_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Id_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnId_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property So_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnSo_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Id_E2Column As DataColumn
            Get
                Return Me.columnId_E2
            End Get
        End Property
        
        Friend ReadOnly Property Tui_SoColumn As DataColumn
            Get
                Return Me.columnTui_So
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_Khai_ThacColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Khai_Thac
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow
            Get
                Return CType(Me.Rows(index),E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow)
            End Get
        End Property
        
        Public Event E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChanged As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangeEventHandler
        
        Public Event E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChanging As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangeEventHandler
        
        Public Event E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowDeleted As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangeEventHandler
        
        Public Event E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowDeleting As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangeEventHandler
        
        Public Overloads Sub AddE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow(ByVal row As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow(ByVal Ma_E1 As String, ByVal So_TKHQ As String, ByVal So_Bien_Lai As String, ByVal So_Kho As String, ByVal Nguoi_Nhan As String, ByVal Dia_Chi_Nhan As String, ByVal Khoi_Luong As Integer, ByVal Tong_Tien As Integer, ByVal Id_Duong_Thu As String, ByVal Ten_Duong_Thu As String, ByVal Id_Chuyen_Thu As String, ByVal So_Chuyen_Thu As String, ByVal Id_E2 As String, ByVal Tui_So As String, ByVal Ma_Bc_Khai_Thac As Integer) As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow
            Dim rowE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow = CType(Me.NewRow,E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow)
            rowE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow.ItemArray = New Object() {Ma_E1, So_TKHQ, So_Bien_Lai, So_Kho, Nguoi_Nhan, Dia_Chi_Nhan, Khoi_Luong, Tong_Tien, Id_Duong_Thu, Ten_Duong_Thu, Id_Chuyen_Thu, So_Chuyen_Thu, Id_E2, Tui_So, Ma_Bc_Khai_Thac}
            Me.Rows.Add(rowE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow)
            Return rowE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoDataTable = CType(MyBase.Clone,E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnSo_TKHQ = Me.Columns("So_TKHQ")
            Me.columnSo_Bien_Lai = Me.Columns("So_Bien_Lai")
            Me.columnSo_Kho = Me.Columns("So_Kho")
            Me.columnNguoi_Nhan = Me.Columns("Nguoi_Nhan")
            Me.columnDia_Chi_Nhan = Me.Columns("Dia_Chi_Nhan")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnTong_Tien = Me.Columns("Tong_Tien")
            Me.columnId_Duong_Thu = Me.Columns("Id_Duong_Thu")
            Me.columnTen_Duong_Thu = Me.Columns("Ten_Duong_Thu")
            Me.columnId_Chuyen_Thu = Me.Columns("Id_Chuyen_Thu")
            Me.columnSo_Chuyen_Thu = Me.Columns("So_Chuyen_Thu")
            Me.columnId_E2 = Me.Columns("Id_E2")
            Me.columnTui_So = Me.Columns("Tui_So")
            Me.columnMa_Bc_Khai_Thac = Me.Columns("Ma_Bc_Khai_Thac")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnSo_TKHQ = New DataColumn("So_TKHQ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_TKHQ)
            Me.columnSo_Bien_Lai = New DataColumn("So_Bien_Lai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Bien_Lai)
            Me.columnSo_Kho = New DataColumn("So_Kho", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Kho)
            Me.columnNguoi_Nhan = New DataColumn("Nguoi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Nhan)
            Me.columnDia_Chi_Nhan = New DataColumn("Dia_Chi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia_Chi_Nhan)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnTong_Tien = New DataColumn("Tong_Tien", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Tien)
            Me.columnId_Duong_Thu = New DataColumn("Id_Duong_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Duong_Thu)
            Me.columnTen_Duong_Thu = New DataColumn("Ten_Duong_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Duong_Thu)
            Me.columnId_Chuyen_Thu = New DataColumn("Id_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Chuyen_Thu)
            Me.columnSo_Chuyen_Thu = New DataColumn("So_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Chuyen_Thu)
            Me.columnId_E2 = New DataColumn("Id_E2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_E2)
            Me.columnTui_So = New DataColumn("Tui_So", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So)
            Me.columnMa_Bc_Khai_Thac = New DataColumn("Ma_Bc_Khai_Thac", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Khai_Thac)
        End Sub
        
        Public Function NewE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow() As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow
            Return CType(Me.NewRow,E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangedEvent) Is Nothing) Then
                RaiseEvent E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChanged(Me, New E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangeEvent(CType(e.Row,E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangingEvent) Is Nothing) Then
                RaiseEvent E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChanging(Me, New E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangeEvent(CType(e.Row,E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowDeletedEvent) Is Nothing) Then
                RaiseEvent E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowDeleted(Me, New E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangeEvent(CType(e.Row,E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowDeletingEvent) Is Nothing) Then
                RaiseEvent E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowDeleting(Me, New E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangeEvent(CType(e.Row,E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow(ByVal row As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow
        Inherits DataRow
        
        Private tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo = CType(Me.Table,E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoDataTable)
        End Sub
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property So_TKHQ As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_TKHQColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_TKHQColumn) = value
            End Set
        End Property
        
        Public Property So_Bien_Lai As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_Bien_LaiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_Bien_LaiColumn) = value
            End Set
        End Property
        
        Public Property So_Kho As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_KhoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_KhoColumn) = value
            End Set
        End Property
        
        Public Property Nguoi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Nguoi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Nguoi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Dia_Chi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Dia_Chi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Dia_Chi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Tong_Tien As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Tong_TienColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Tong_TienColumn) = value
            End Set
        End Property
        
        Public Property Id_Duong_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Id_Duong_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Id_Duong_ThuColumn) = value
            End Set
        End Property
        
        Public Property Ten_Duong_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Ten_Duong_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Ten_Duong_ThuColumn) = value
            End Set
        End Property
        
        Public Property Id_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Id_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Id_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property So_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Id_E2 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Id_E2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Id_E2Column) = value
            End Set
        End Property
        
        Public Property Tui_So As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Tui_SoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Tui_SoColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Khai_Thac As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Ma_Bc_Khai_ThacColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Ma_Bc_Khai_ThacColumn) = value
            End Set
        End Property
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_TKHQNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_TKHQColumn)
        End Function
        
        Public Sub SetSo_TKHQNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_TKHQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Bien_LaiNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_Bien_LaiColumn)
        End Function
        
        Public Sub SetSo_Bien_LaiNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_Bien_LaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_KhoNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_KhoColumn)
        End Function
        
        Public Sub SetSo_KhoNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_KhoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Nguoi_NhanColumn)
        End Function
        
        Public Sub SetNguoi_NhanNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Nguoi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDia_Chi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Dia_Chi_NhanColumn)
        End Function
        
        Public Sub SetDia_Chi_NhanNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Dia_Chi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_TienNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Tong_TienColumn)
        End Function
        
        Public Sub SetTong_TienNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Tong_TienColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_Duong_ThuNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Id_Duong_ThuColumn)
        End Function
        
        Public Sub SetId_Duong_ThuNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Id_Duong_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Duong_ThuNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Ten_Duong_ThuColumn)
        End Function
        
        Public Sub SetTen_Duong_ThuNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Ten_Duong_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Id_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetId_Chuyen_ThuNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Id_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetSo_Chuyen_ThuNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.So_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_E2Null() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Id_E2Column)
        End Function
        
        Public Sub SetId_E2Null()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Id_E2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_SoNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Tui_SoColumn)
        End Function
        
        Public Sub SetTui_SoNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Tui_SoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_Khai_ThacNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Ma_Bc_Khai_ThacColumn)
        End Function
        
        Public Sub SetMa_Bc_Khai_ThacNull()
            Me(Me.tableE1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_Bo.Ma_Bc_Khai_ThacColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E1_Di_Giay_Bien_Nhan_Buu_Ta_Noi_BoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_A1_Noi_BaiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTT_Cot_1 As DataColumn
        
        Private columnMa_E1_Cot_1 As DataColumn
        
        Private columnHuong_Chuyen_Cot_1 As DataColumn
        
        Private columnSTT_Cot_2 As DataColumn
        
        Private columnMa_E1_Cot_2 As DataColumn
        
        Private columnHuong_Chuyen_Cot_2 As DataColumn
        
        Private columnSTT_Cot_3 As DataColumn
        
        Private columnMa_E1_Cot_3 As DataColumn
        
        Private columnHuong_Chuyen_Cot_3 As DataColumn
        
        Friend Sub New()
            MyBase.New("Ban_Ke_A1_Noi_Bai")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STT_Cot_1Column As DataColumn
            Get
                Return Me.columnSTT_Cot_1
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1_Cot_1Column As DataColumn
            Get
                Return Me.columnMa_E1_Cot_1
            End Get
        End Property
        
        Friend ReadOnly Property Huong_Chuyen_Cot_1Column As DataColumn
            Get
                Return Me.columnHuong_Chuyen_Cot_1
            End Get
        End Property
        
        Friend ReadOnly Property STT_Cot_2Column As DataColumn
            Get
                Return Me.columnSTT_Cot_2
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1_Cot_2Column As DataColumn
            Get
                Return Me.columnMa_E1_Cot_2
            End Get
        End Property
        
        Friend ReadOnly Property Huong_Chuyen_Cot_2Column As DataColumn
            Get
                Return Me.columnHuong_Chuyen_Cot_2
            End Get
        End Property
        
        Friend ReadOnly Property STT_Cot_3Column As DataColumn
            Get
                Return Me.columnSTT_Cot_3
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1_Cot_3Column As DataColumn
            Get
                Return Me.columnMa_E1_Cot_3
            End Get
        End Property
        
        Friend ReadOnly Property Huong_Chuyen_Cot_3Column As DataColumn
            Get
                Return Me.columnHuong_Chuyen_Cot_3
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ban_Ke_A1_Noi_BaiRow
            Get
                Return CType(Me.Rows(index),Ban_Ke_A1_Noi_BaiRow)
            End Get
        End Property
        
        Public Event Ban_Ke_A1_Noi_BaiRowChanged As Ban_Ke_A1_Noi_BaiRowChangeEventHandler
        
        Public Event Ban_Ke_A1_Noi_BaiRowChanging As Ban_Ke_A1_Noi_BaiRowChangeEventHandler
        
        Public Event Ban_Ke_A1_Noi_BaiRowDeleted As Ban_Ke_A1_Noi_BaiRowChangeEventHandler
        
        Public Event Ban_Ke_A1_Noi_BaiRowDeleting As Ban_Ke_A1_Noi_BaiRowChangeEventHandler
        
        Public Overloads Sub AddBan_Ke_A1_Noi_BaiRow(ByVal row As Ban_Ke_A1_Noi_BaiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBan_Ke_A1_Noi_BaiRow(ByVal STT_Cot_1 As Integer, ByVal Ma_E1_Cot_1 As String, ByVal Huong_Chuyen_Cot_1 As String, ByVal STT_Cot_2 As Integer, ByVal Ma_E1_Cot_2 As String, ByVal Huong_Chuyen_Cot_2 As String, ByVal STT_Cot_3 As Integer, ByVal Ma_E1_Cot_3 As String, ByVal Huong_Chuyen_Cot_3 As String) As Ban_Ke_A1_Noi_BaiRow
            Dim rowBan_Ke_A1_Noi_BaiRow As Ban_Ke_A1_Noi_BaiRow = CType(Me.NewRow,Ban_Ke_A1_Noi_BaiRow)
            rowBan_Ke_A1_Noi_BaiRow.ItemArray = New Object() {STT_Cot_1, Ma_E1_Cot_1, Huong_Chuyen_Cot_1, STT_Cot_2, Ma_E1_Cot_2, Huong_Chuyen_Cot_2, STT_Cot_3, Ma_E1_Cot_3, Huong_Chuyen_Cot_3}
            Me.Rows.Add(rowBan_Ke_A1_Noi_BaiRow)
            Return rowBan_Ke_A1_Noi_BaiRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Ban_Ke_A1_Noi_BaiDataTable = CType(MyBase.Clone,Ban_Ke_A1_Noi_BaiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Ban_Ke_A1_Noi_BaiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTT_Cot_1 = Me.Columns("STT_Cot_1")
            Me.columnMa_E1_Cot_1 = Me.Columns("Ma_E1_Cot_1")
            Me.columnHuong_Chuyen_Cot_1 = Me.Columns("Huong_Chuyen_Cot_1")
            Me.columnSTT_Cot_2 = Me.Columns("STT_Cot_2")
            Me.columnMa_E1_Cot_2 = Me.Columns("Ma_E1_Cot_2")
            Me.columnHuong_Chuyen_Cot_2 = Me.Columns("Huong_Chuyen_Cot_2")
            Me.columnSTT_Cot_3 = Me.Columns("STT_Cot_3")
            Me.columnMa_E1_Cot_3 = Me.Columns("Ma_E1_Cot_3")
            Me.columnHuong_Chuyen_Cot_3 = Me.Columns("Huong_Chuyen_Cot_3")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTT_Cot_1 = New DataColumn("STT_Cot_1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT_Cot_1)
            Me.columnMa_E1_Cot_1 = New DataColumn("Ma_E1_Cot_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1_Cot_1)
            Me.columnHuong_Chuyen_Cot_1 = New DataColumn("Huong_Chuyen_Cot_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHuong_Chuyen_Cot_1)
            Me.columnSTT_Cot_2 = New DataColumn("STT_Cot_2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT_Cot_2)
            Me.columnMa_E1_Cot_2 = New DataColumn("Ma_E1_Cot_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1_Cot_2)
            Me.columnHuong_Chuyen_Cot_2 = New DataColumn("Huong_Chuyen_Cot_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHuong_Chuyen_Cot_2)
            Me.columnSTT_Cot_3 = New DataColumn("STT_Cot_3", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT_Cot_3)
            Me.columnMa_E1_Cot_3 = New DataColumn("Ma_E1_Cot_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1_Cot_3)
            Me.columnHuong_Chuyen_Cot_3 = New DataColumn("Huong_Chuyen_Cot_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHuong_Chuyen_Cot_3)
        End Sub
        
        Public Function NewBan_Ke_A1_Noi_BaiRow() As Ban_Ke_A1_Noi_BaiRow
            Return CType(Me.NewRow,Ban_Ke_A1_Noi_BaiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Ban_Ke_A1_Noi_BaiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Ban_Ke_A1_Noi_BaiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ban_Ke_A1_Noi_BaiRowChangedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_A1_Noi_BaiRowChanged(Me, New Ban_Ke_A1_Noi_BaiRowChangeEvent(CType(e.Row,Ban_Ke_A1_Noi_BaiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ban_Ke_A1_Noi_BaiRowChangingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_A1_Noi_BaiRowChanging(Me, New Ban_Ke_A1_Noi_BaiRowChangeEvent(CType(e.Row,Ban_Ke_A1_Noi_BaiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ban_Ke_A1_Noi_BaiRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_A1_Noi_BaiRowDeleted(Me, New Ban_Ke_A1_Noi_BaiRowChangeEvent(CType(e.Row,Ban_Ke_A1_Noi_BaiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ban_Ke_A1_Noi_BaiRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_A1_Noi_BaiRowDeleting(Me, New Ban_Ke_A1_Noi_BaiRowChangeEvent(CType(e.Row,Ban_Ke_A1_Noi_BaiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBan_Ke_A1_Noi_BaiRow(ByVal row As Ban_Ke_A1_Noi_BaiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_A1_Noi_BaiRow
        Inherits DataRow
        
        Private tableBan_Ke_A1_Noi_Bai As Ban_Ke_A1_Noi_BaiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBan_Ke_A1_Noi_Bai = CType(Me.Table,Ban_Ke_A1_Noi_BaiDataTable)
        End Sub
        
        Public Property STT_Cot_1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_A1_Noi_Bai.STT_Cot_1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_A1_Noi_Bai.STT_Cot_1Column) = value
            End Set
        End Property
        
        Public Property Ma_E1_Cot_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_A1_Noi_Bai.Ma_E1_Cot_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_A1_Noi_Bai.Ma_E1_Cot_1Column) = value
            End Set
        End Property
        
        Public Property Huong_Chuyen_Cot_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_A1_Noi_Bai.Huong_Chuyen_Cot_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_A1_Noi_Bai.Huong_Chuyen_Cot_1Column) = value
            End Set
        End Property
        
        Public Property STT_Cot_2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_A1_Noi_Bai.STT_Cot_2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_A1_Noi_Bai.STT_Cot_2Column) = value
            End Set
        End Property
        
        Public Property Ma_E1_Cot_2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_A1_Noi_Bai.Ma_E1_Cot_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_A1_Noi_Bai.Ma_E1_Cot_2Column) = value
            End Set
        End Property
        
        Public Property Huong_Chuyen_Cot_2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_A1_Noi_Bai.Huong_Chuyen_Cot_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_A1_Noi_Bai.Huong_Chuyen_Cot_2Column) = value
            End Set
        End Property
        
        Public Property STT_Cot_3 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_A1_Noi_Bai.STT_Cot_3Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_A1_Noi_Bai.STT_Cot_3Column) = value
            End Set
        End Property
        
        Public Property Ma_E1_Cot_3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_A1_Noi_Bai.Ma_E1_Cot_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_A1_Noi_Bai.Ma_E1_Cot_3Column) = value
            End Set
        End Property
        
        Public Property Huong_Chuyen_Cot_3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_A1_Noi_Bai.Huong_Chuyen_Cot_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_A1_Noi_Bai.Huong_Chuyen_Cot_3Column) = value
            End Set
        End Property
        
        Public Function IsSTT_Cot_1Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_A1_Noi_Bai.STT_Cot_1Column)
        End Function
        
        Public Sub SetSTT_Cot_1Null()
            Me(Me.tableBan_Ke_A1_Noi_Bai.STT_Cot_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1_Cot_1Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_A1_Noi_Bai.Ma_E1_Cot_1Column)
        End Function
        
        Public Sub SetMa_E1_Cot_1Null()
            Me(Me.tableBan_Ke_A1_Noi_Bai.Ma_E1_Cot_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsHuong_Chuyen_Cot_1Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_A1_Noi_Bai.Huong_Chuyen_Cot_1Column)
        End Function
        
        Public Sub SetHuong_Chuyen_Cot_1Null()
            Me(Me.tableBan_Ke_A1_Noi_Bai.Huong_Chuyen_Cot_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTT_Cot_2Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_A1_Noi_Bai.STT_Cot_2Column)
        End Function
        
        Public Sub SetSTT_Cot_2Null()
            Me(Me.tableBan_Ke_A1_Noi_Bai.STT_Cot_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1_Cot_2Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_A1_Noi_Bai.Ma_E1_Cot_2Column)
        End Function
        
        Public Sub SetMa_E1_Cot_2Null()
            Me(Me.tableBan_Ke_A1_Noi_Bai.Ma_E1_Cot_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsHuong_Chuyen_Cot_2Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_A1_Noi_Bai.Huong_Chuyen_Cot_2Column)
        End Function
        
        Public Sub SetHuong_Chuyen_Cot_2Null()
            Me(Me.tableBan_Ke_A1_Noi_Bai.Huong_Chuyen_Cot_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTT_Cot_3Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_A1_Noi_Bai.STT_Cot_3Column)
        End Function
        
        Public Sub SetSTT_Cot_3Null()
            Me(Me.tableBan_Ke_A1_Noi_Bai.STT_Cot_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1_Cot_3Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_A1_Noi_Bai.Ma_E1_Cot_3Column)
        End Function
        
        Public Sub SetMa_E1_Cot_3Null()
            Me(Me.tableBan_Ke_A1_Noi_Bai.Ma_E1_Cot_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsHuong_Chuyen_Cot_3Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_A1_Noi_Bai.Huong_Chuyen_Cot_3Column)
        End Function
        
        Public Sub SetHuong_Chuyen_Cot_3Null()
            Me(Me.tableBan_Ke_A1_Noi_Bai.Huong_Chuyen_Cot_3Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_A1_Noi_BaiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Ban_Ke_A1_Noi_BaiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Ban_Ke_A1_Noi_BaiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Ban_Ke_A1_Noi_BaiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNgay_Dong As DataColumn
        
        Private columnMa_E1 As DataColumn
        
        Private columnSo_TKHQ As DataColumn
        
        Private columnSo_Bien_Lai As DataColumn
        
        Private columnLe_Phi_HQ As DataColumn
        
        Private columnThue_NK As DataColumn
        
        Private columnThue_VAT As DataColumn
        
        Private columnTong_Thue As DataColumn
        
        Private columnLe_Phi_VH As DataColumn
        
        Private columnLe_Phi_YT As DataColumn
        
        Private columnLe_Phi_DV As DataColumn
        
        Private columnLe_Phi_TV As DataColumn
        
        Private columnLe_Phi_Khac As DataColumn
        
        Private columnTong_Le_Phi As DataColumn
        
        Private columnTong_Tien As DataColumn
        
        Friend Sub New()
            MyBase.New("Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_DongColumn As DataColumn
            Get
                Return Me.columnNgay_Dong
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property So_TKHQColumn As DataColumn
            Get
                Return Me.columnSo_TKHQ
            End Get
        End Property
        
        Friend ReadOnly Property So_Bien_LaiColumn As DataColumn
            Get
                Return Me.columnSo_Bien_Lai
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_HQColumn As DataColumn
            Get
                Return Me.columnLe_Phi_HQ
            End Get
        End Property
        
        Friend ReadOnly Property Thue_NKColumn As DataColumn
            Get
                Return Me.columnThue_NK
            End Get
        End Property
        
        Friend ReadOnly Property Thue_VATColumn As DataColumn
            Get
                Return Me.columnThue_VAT
            End Get
        End Property
        
        Friend ReadOnly Property Tong_ThueColumn As DataColumn
            Get
                Return Me.columnTong_Thue
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_VHColumn As DataColumn
            Get
                Return Me.columnLe_Phi_VH
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_YTColumn As DataColumn
            Get
                Return Me.columnLe_Phi_YT
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_DVColumn As DataColumn
            Get
                Return Me.columnLe_Phi_DV
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_TVColumn As DataColumn
            Get
                Return Me.columnLe_Phi_TV
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_KhacColumn As DataColumn
            Get
                Return Me.columnLe_Phi_Khac
            End Get
        End Property
        
        Friend ReadOnly Property Tong_Le_PhiColumn As DataColumn
            Get
                Return Me.columnTong_Le_Phi
            End Get
        End Property
        
        Friend ReadOnly Property Tong_TienColumn As DataColumn
            Get
                Return Me.columnTong_Tien
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow
            Get
                Return CType(Me.Rows(index),Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow)
            End Get
        End Property
        
        Public Event Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChanged As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangeEventHandler
        
        Public Event Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChanging As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangeEventHandler
        
        Public Event Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowDeleted As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangeEventHandler
        
        Public Event Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowDeleting As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangeEventHandler
        
        Public Overloads Sub AddBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow(ByVal row As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow(ByVal Ngay_Dong As Integer, ByVal Ma_E1 As String, ByVal So_TKHQ As String, ByVal So_Bien_Lai As String, ByVal Le_Phi_HQ As Integer, ByVal Thue_NK As Integer, ByVal Thue_VAT As Integer, ByVal Tong_Thue As Integer, ByVal Le_Phi_VH As Integer, ByVal Le_Phi_YT As Integer, ByVal Le_Phi_DV As Integer, ByVal Le_Phi_TV As Integer, ByVal Le_Phi_Khac As Integer, ByVal Tong_Le_Phi As Integer, ByVal Tong_Tien As Integer) As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow
            Dim rowBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow = CType(Me.NewRow,Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow)
            rowBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow.ItemArray = New Object() {Ngay_Dong, Ma_E1, So_TKHQ, So_Bien_Lai, Le_Phi_HQ, Thue_NK, Thue_VAT, Tong_Thue, Le_Phi_VH, Le_Phi_YT, Le_Phi_DV, Le_Phi_TV, Le_Phi_Khac, Tong_Le_Phi, Tong_Tien}
            Me.Rows.Add(rowBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow)
            Return rowBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanDataTable = CType(MyBase.Clone,Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNgay_Dong = Me.Columns("Ngay_Dong")
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnSo_TKHQ = Me.Columns("So_TKHQ")
            Me.columnSo_Bien_Lai = Me.Columns("So_Bien_Lai")
            Me.columnLe_Phi_HQ = Me.Columns("Le_Phi_HQ")
            Me.columnThue_NK = Me.Columns("Thue_NK")
            Me.columnThue_VAT = Me.Columns("Thue_VAT")
            Me.columnTong_Thue = Me.Columns("Tong_Thue")
            Me.columnLe_Phi_VH = Me.Columns("Le_Phi_VH")
            Me.columnLe_Phi_YT = Me.Columns("Le_Phi_YT")
            Me.columnLe_Phi_DV = Me.Columns("Le_Phi_DV")
            Me.columnLe_Phi_TV = Me.Columns("Le_Phi_TV")
            Me.columnLe_Phi_Khac = Me.Columns("Le_Phi_Khac")
            Me.columnTong_Le_Phi = Me.Columns("Tong_Le_Phi")
            Me.columnTong_Tien = Me.Columns("Tong_Tien")
        End Sub
        
        Private Sub InitClass()
            Me.columnNgay_Dong = New DataColumn("Ngay_Dong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Dong)
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnSo_TKHQ = New DataColumn("So_TKHQ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_TKHQ)
            Me.columnSo_Bien_Lai = New DataColumn("So_Bien_Lai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Bien_Lai)
            Me.columnLe_Phi_HQ = New DataColumn("Le_Phi_HQ", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_HQ)
            Me.columnThue_NK = New DataColumn("Thue_NK", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThue_NK)
            Me.columnThue_VAT = New DataColumn("Thue_VAT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThue_VAT)
            Me.columnTong_Thue = New DataColumn("Tong_Thue", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Thue)
            Me.columnLe_Phi_VH = New DataColumn("Le_Phi_VH", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_VH)
            Me.columnLe_Phi_YT = New DataColumn("Le_Phi_YT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_YT)
            Me.columnLe_Phi_DV = New DataColumn("Le_Phi_DV", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_DV)
            Me.columnLe_Phi_TV = New DataColumn("Le_Phi_TV", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_TV)
            Me.columnLe_Phi_Khac = New DataColumn("Le_Phi_Khac", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_Khac)
            Me.columnTong_Le_Phi = New DataColumn("Tong_Le_Phi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Le_Phi)
            Me.columnTong_Tien = New DataColumn("Tong_Tien", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Tien)
        End Sub
        
        Public Function NewBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow() As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow
            Return CType(Me.NewRow,Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChanged(Me, New Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangeEvent(CType(e.Row,Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChanging(Me, New Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangeEvent(CType(e.Row,Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowDeleted(Me, New Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangeEvent(CType(e.Row,Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowDeleting(Me, New Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangeEvent(CType(e.Row,Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow(ByVal row As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow
        Inherits DataRow
        
        Private tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan = CType(Me.Table,Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanDataTable)
        End Sub
        
        Public Property Ngay_Dong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Ngay_DongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Ngay_DongColumn) = value
            End Set
        End Property
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property So_TKHQ As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.So_TKHQColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.So_TKHQColumn) = value
            End Set
        End Property
        
        Public Property So_Bien_Lai As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.So_Bien_LaiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.So_Bien_LaiColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_HQ As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_HQColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_HQColumn) = value
            End Set
        End Property
        
        Public Property Thue_NK As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Thue_NKColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Thue_NKColumn) = value
            End Set
        End Property
        
        Public Property Thue_VAT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Thue_VATColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Thue_VATColumn) = value
            End Set
        End Property
        
        Public Property Tong_Thue As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Tong_ThueColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Tong_ThueColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_VH As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_VHColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_VHColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_YT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_YTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_YTColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_DV As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_DVColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_DVColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_TV As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_TVColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_TVColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_Khac As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_KhacColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_KhacColumn) = value
            End Set
        End Property
        
        Public Property Tong_Le_Phi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Tong_Le_PhiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Tong_Le_PhiColumn) = value
            End Set
        End Property
        
        Public Property Tong_Tien As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Tong_TienColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Tong_TienColumn) = value
            End Set
        End Property
        
        Public Function IsNgay_DongNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Ngay_DongColumn)
        End Function
        
        Public Sub SetNgay_DongNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Ngay_DongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_TKHQNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.So_TKHQColumn)
        End Function
        
        Public Sub SetSo_TKHQNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.So_TKHQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Bien_LaiNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.So_Bien_LaiColumn)
        End Function
        
        Public Sub SetSo_Bien_LaiNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.So_Bien_LaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_HQNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_HQColumn)
        End Function
        
        Public Sub SetLe_Phi_HQNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_HQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThue_NKNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Thue_NKColumn)
        End Function
        
        Public Sub SetThue_NKNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Thue_NKColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThue_VATNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Thue_VATColumn)
        End Function
        
        Public Sub SetThue_VATNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Thue_VATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_ThueNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Tong_ThueColumn)
        End Function
        
        Public Sub SetTong_ThueNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Tong_ThueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_VHNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_VHColumn)
        End Function
        
        Public Sub SetLe_Phi_VHNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_VHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_YTNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_YTColumn)
        End Function
        
        Public Sub SetLe_Phi_YTNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_YTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_DVNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_DVColumn)
        End Function
        
        Public Sub SetLe_Phi_DVNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_DVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_TVNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_TVColumn)
        End Function
        
        Public Sub SetLe_Phi_TVNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_TVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_KhacNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_KhacColumn)
        End Function
        
        Public Sub SetLe_Phi_KhacNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Le_Phi_KhacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_Le_PhiNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Tong_Le_PhiColumn)
        End Function
        
        Public Sub SetTong_Le_PhiNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Tong_Le_PhiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_TienNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Tong_TienColumn)
        End Function
        
        Public Sub SetTong_TienNull()
            Me(Me.tableBan_Ke_Theo_Doi_Thue_Le_Phi_Hai_Quan.Tong_TienColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Ban_Ke_Theo_Doi_Thue_Le_Phi_Hai_QuanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNgay As DataColumn
        
        Private columnSCT As DataColumn
        
        Private columnBCG As DataColumn
        
        Private columnMa_Bc_Khai_Thac As DataColumn
        
        Private columnKL_EMS As DataColumn
        
        Private columnED As DataColumn
        
        Private columnEM As DataColumn
        
        Private columnER As DataColumn
        
        Private columnLoai_Chuyen_Thu As DataColumn
        
        Private columnTen_Buu_Cuc As DataColumn
        
        Private columnLoai_Chuyen_Thu2 As DataColumn
        
        Friend Sub New()
            MyBase.New("Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NgayColumn As DataColumn
            Get
                Return Me.columnNgay
            End Get
        End Property
        
        Friend ReadOnly Property SCTColumn As DataColumn
            Get
                Return Me.columnSCT
            End Get
        End Property
        
        Friend ReadOnly Property BCGColumn As DataColumn
            Get
                Return Me.columnBCG
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_Khai_ThacColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Khai_Thac
            End Get
        End Property
        
        Friend ReadOnly Property KL_EMSColumn As DataColumn
            Get
                Return Me.columnKL_EMS
            End Get
        End Property
        
        Friend ReadOnly Property EDColumn As DataColumn
            Get
                Return Me.columnED
            End Get
        End Property
        
        Friend ReadOnly Property EMColumn As DataColumn
            Get
                Return Me.columnEM
            End Get
        End Property
        
        Friend ReadOnly Property ERColumn As DataColumn
            Get
                Return Me.columnER
            End Get
        End Property
        
        Friend ReadOnly Property Loai_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnLoai_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Buu_CucColumn As DataColumn
            Get
                Return Me.columnTen_Buu_Cuc
            End Get
        End Property
        
        Friend ReadOnly Property Loai_Chuyen_Thu2Column As DataColumn
            Get
                Return Me.columnLoai_Chuyen_Thu2
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow
            Get
                Return CType(Me.Rows(index),Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow)
            End Get
        End Property
        
        Public Event Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChanged As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangeEventHandler
        
        Public Event Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChanging As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangeEventHandler
        
        Public Event Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowDeleted As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangeEventHandler
        
        Public Event Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowDeleting As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangeEventHandler
        
        Public Overloads Sub AddChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow(ByVal row As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow(ByVal Ngay As Date, ByVal SCT As Integer, ByVal BCG As Integer, ByVal Ma_Bc_Khai_Thac As Integer, ByVal KL_EMS As Integer, ByVal ED As Integer, ByVal EM As Integer, ByVal ER As Integer, ByVal Loai_Chuyen_Thu As String, ByVal Ten_Buu_Cuc As String, ByVal Loai_Chuyen_Thu2 As String) As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow
            Dim rowChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow = CType(Me.NewRow,Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow)
            rowChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow.ItemArray = New Object() {Ngay, SCT, BCG, Ma_Bc_Khai_Thac, KL_EMS, ED, EM, ER, Loai_Chuyen_Thu, Ten_Buu_Cuc, Loai_Chuyen_Thu2}
            Me.Rows.Add(rowChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow)
            Return rowChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuDataTable = CType(MyBase.Clone,Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNgay = Me.Columns("Ngay")
            Me.columnSCT = Me.Columns("SCT")
            Me.columnBCG = Me.Columns("BCG")
            Me.columnMa_Bc_Khai_Thac = Me.Columns("Ma_Bc_Khai_Thac")
            Me.columnKL_EMS = Me.Columns("KL_EMS")
            Me.columnED = Me.Columns("ED")
            Me.columnEM = Me.Columns("EM")
            Me.columnER = Me.Columns("ER")
            Me.columnLoai_Chuyen_Thu = Me.Columns("Loai_Chuyen_Thu")
            Me.columnTen_Buu_Cuc = Me.Columns("Ten_Buu_Cuc")
            Me.columnLoai_Chuyen_Thu2 = Me.Columns("Loai_Chuyen_Thu2")
        End Sub
        
        Private Sub InitClass()
            Me.columnNgay = New DataColumn("Ngay", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay)
            Me.columnSCT = New DataColumn("SCT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSCT)
            Me.columnBCG = New DataColumn("BCG", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBCG)
            Me.columnMa_Bc_Khai_Thac = New DataColumn("Ma_Bc_Khai_Thac", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Khai_Thac)
            Me.columnKL_EMS = New DataColumn("KL_EMS", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKL_EMS)
            Me.columnED = New DataColumn("ED", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnED)
            Me.columnEM = New DataColumn("EM", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEM)
            Me.columnER = New DataColumn("ER", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnER)
            Me.columnLoai_Chuyen_Thu = New DataColumn("Loai_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_Chuyen_Thu)
            Me.columnTen_Buu_Cuc = New DataColumn("Ten_Buu_Cuc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Buu_Cuc)
            Me.columnLoai_Chuyen_Thu2 = New DataColumn("Loai_Chuyen_Thu2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_Chuyen_Thu2)
        End Sub
        
        Public Function NewChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow() As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow
            Return CType(Me.NewRow,Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangedEvent) Is Nothing) Then
                RaiseEvent Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChanged(Me, New Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangeEvent(CType(e.Row,Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangingEvent) Is Nothing) Then
                RaiseEvent Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChanging(Me, New Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangeEvent(CType(e.Row,Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowDeletedEvent) Is Nothing) Then
                RaiseEvent Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowDeleted(Me, New Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangeEvent(CType(e.Row,Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowDeletingEvent) Is Nothing) Then
                RaiseEvent Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowDeleting(Me, New Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangeEvent(CType(e.Row,Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow(ByVal row As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow
        Inherits DataRow
        
        Private tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu = CType(Me.Table,Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuDataTable)
        End Sub
        
        Public Property Ngay As Date
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.NgayColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.NgayColumn) = value
            End Set
        End Property
        
        Public Property SCT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.SCTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.SCTColumn) = value
            End Set
        End Property
        
        Public Property BCG As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.BCGColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.BCGColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Khai_Thac As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Ma_Bc_Khai_ThacColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Ma_Bc_Khai_ThacColumn) = value
            End Set
        End Property
        
        Public Property KL_EMS As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.KL_EMSColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.KL_EMSColumn) = value
            End Set
        End Property
        
        Public Property ED As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.EDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.EDColumn) = value
            End Set
        End Property
        
        Public Property EM As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.EMColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.EMColumn) = value
            End Set
        End Property
        
        Public Property ER As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.ERColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.ERColumn) = value
            End Set
        End Property
        
        Public Property Loai_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Loai_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Loai_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Ten_Buu_Cuc As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Ten_Buu_CucColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Ten_Buu_CucColumn) = value
            End Set
        End Property
        
        Public Property Loai_Chuyen_Thu2 As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Loai_Chuyen_Thu2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Loai_Chuyen_Thu2Column) = value
            End Set
        End Property
        
        Public Function IsNgayNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.NgayColumn)
        End Function
        
        Public Sub SetNgayNull()
            Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.NgayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSCTNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.SCTColumn)
        End Function
        
        Public Sub SetSCTNull()
            Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.SCTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBCGNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.BCGColumn)
        End Function
        
        Public Sub SetBCGNull()
            Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.BCGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_Khai_ThacNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Ma_Bc_Khai_ThacColumn)
        End Function
        
        Public Sub SetMa_Bc_Khai_ThacNull()
            Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Ma_Bc_Khai_ThacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKL_EMSNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.KL_EMSColumn)
        End Function
        
        Public Sub SetKL_EMSNull()
            Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.KL_EMSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEDNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.EDColumn)
        End Function
        
        Public Sub SetEDNull()
            Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.EDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.EMColumn)
        End Function
        
        Public Sub SetEMNull()
            Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.EMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsERNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.ERColumn)
        End Function
        
        Public Sub SetERNull()
            Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.ERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Loai_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetLoai_Chuyen_ThuNull()
            Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Loai_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Buu_CucNull() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Ten_Buu_CucColumn)
        End Function
        
        Public Sub SetTen_Buu_CucNull()
            Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Ten_Buu_CucColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_Chuyen_Thu2Null() As Boolean
            Return Me.IsNull(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Loai_Chuyen_Thu2Column)
        End Function
        
        Public Sub SetLoai_Chuyen_Thu2Null()
            Me(Me.tableChuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_Thu.Loai_Chuyen_Thu2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Chuyen_Thu_Den_EMS_Theo_Ngay_KT_Phan_Loai_Chuyen_ThuRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnChuyen_Bay As DataColumn
        
        Private columnTong_So_Luong As DataColumn
        
        Private columnTong_Khoi_Luong As DataColumn
        
        Private columnNgay_Dong As DataColumn
        
        Friend Sub New()
            MyBase.New("Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Chuyen_BayColumn As DataColumn
            Get
                Return Me.columnChuyen_Bay
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_LuongColumn As DataColumn
            Get
                Return Me.columnTong_So_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Tong_Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnTong_Khoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_DongColumn As DataColumn
            Get
                Return Me.columnNgay_Dong
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow
            Get
                Return CType(Me.Rows(index),Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow)
            End Get
        End Property
        
        Public Event Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChanged As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangeEventHandler
        
        Public Event Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChanging As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangeEventHandler
        
        Public Event Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowDeleted As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangeEventHandler
        
        Public Event Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowDeleting As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangeEventHandler
        
        Public Overloads Sub AddTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow(ByVal row As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow(ByVal Chuyen_Bay As String, ByVal Tong_So_Luong As Integer, ByVal Tong_Khoi_Luong As Integer, ByVal Ngay_Dong As Date) As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow
            Dim rowTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow = CType(Me.NewRow,Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow)
            rowTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow.ItemArray = New Object() {Chuyen_Bay, Tong_So_Luong, Tong_Khoi_Luong, Ngay_Dong}
            Me.Rows.Add(rowTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow)
            Return rowTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTDataTable = CType(MyBase.Clone,Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnChuyen_Bay = Me.Columns("Chuyen_Bay")
            Me.columnTong_So_Luong = Me.Columns("Tong_So_Luong")
            Me.columnTong_Khoi_Luong = Me.Columns("Tong_Khoi_Luong")
            Me.columnNgay_Dong = Me.Columns("Ngay_Dong")
        End Sub
        
        Private Sub InitClass()
            Me.columnChuyen_Bay = New DataColumn("Chuyen_Bay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChuyen_Bay)
            Me.columnTong_So_Luong = New DataColumn("Tong_So_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_Luong)
            Me.columnTong_Khoi_Luong = New DataColumn("Tong_Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Khoi_Luong)
            Me.columnNgay_Dong = New DataColumn("Ngay_Dong", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Dong)
        End Sub
        
        Public Function NewTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow() As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow
            Return CType(Me.NewRow,Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangedEvent) Is Nothing) Then
                RaiseEvent Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChanged(Me, New Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangeEvent(CType(e.Row,Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangingEvent) Is Nothing) Then
                RaiseEvent Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChanging(Me, New Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangeEvent(CType(e.Row,Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowDeleted(Me, New Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangeEvent(CType(e.Row,Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowDeleting(Me, New Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangeEvent(CType(e.Row,Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow(ByVal row As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow
        Inherits DataRow
        
        Private tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT = CType(Me.Table,Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTDataTable)
        End Sub
        
        Public Property Chuyen_Bay As String
            Get
                Try 
                    Return CType(Me(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Chuyen_BayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Chuyen_BayColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Tong_So_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Tong_So_LuongColumn) = value
            End Set
        End Property
        
        Public Property Tong_Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Tong_Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Tong_Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Dong As Date
            Get
                Try 
                    Return CType(Me(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Ngay_DongColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Ngay_DongColumn) = value
            End Set
        End Property
        
        Public Function IsChuyen_BayNull() As Boolean
            Return Me.IsNull(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Chuyen_BayColumn)
        End Function
        
        Public Sub SetChuyen_BayNull()
            Me(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Chuyen_BayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_LuongNull() As Boolean
            Return Me.IsNull(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Tong_So_LuongColumn)
        End Function
        
        Public Sub SetTong_So_LuongNull()
            Me(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Tong_So_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_Khoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Tong_Khoi_LuongColumn)
        End Function
        
        Public Sub SetTong_Khoi_LuongNull()
            Me(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Tong_Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_DongNull() As Boolean
            Return Me.IsNull(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Ngay_DongColumn)
        End Function
        
        Public Sub SetNgay_DongNull()
            Me(Me.tableTong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KT.Ngay_DongColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Tong_Hop_E1_Chieu_Den_Theo_Chuyen_Bay_Ngay_KTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnChuyen_Bay As DataColumn
        
        Private columnTong_So_Tui As DataColumn
        
        Private columnTong_So_Luong As DataColumn
        
        Private columnTong_Khoi_Luong As DataColumn
        
        Private columnTong_Khoi_Luong_BP As DataColumn
        
        Private columnMa_Bc As DataColumn
        
        Private columnTen_NC As DataColumn
        
        Private columnNgay_Dong As DataColumn
        
        Friend Sub New()
            MyBase.New("Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Chuyen_BayColumn As DataColumn
            Get
                Return Me.columnChuyen_Bay
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_TuiColumn As DataColumn
            Get
                Return Me.columnTong_So_Tui
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_LuongColumn As DataColumn
            Get
                Return Me.columnTong_So_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Tong_Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnTong_Khoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Tong_Khoi_Luong_BPColumn As DataColumn
            Get
                Return Me.columnTong_Khoi_Luong_BP
            End Get
        End Property
        
        Friend ReadOnly Property Ma_BcColumn As DataColumn
            Get
                Return Me.columnMa_Bc
            End Get
        End Property
        
        Friend ReadOnly Property Ten_NCColumn As DataColumn
            Get
                Return Me.columnTen_NC
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_DongColumn As DataColumn
            Get
                Return Me.columnNgay_Dong
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow
            Get
                Return CType(Me.Rows(index),Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow)
            End Get
        End Property
        
        Public Event Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChanged As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangeEventHandler
        
        Public Event Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChanging As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangeEventHandler
        
        Public Event Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowDeleted As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangeEventHandler
        
        Public Event Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowDeleting As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangeEventHandler
        
        Public Overloads Sub AddTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow(ByVal row As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow(ByVal Chuyen_Bay As String, ByVal Tong_So_Tui As Integer, ByVal Tong_So_Luong As Integer, ByVal Tong_Khoi_Luong As Integer, ByVal Tong_Khoi_Luong_BP As Integer, ByVal Ma_Bc As String, ByVal Ten_NC As String, ByVal Ngay_Dong As Date) As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow
            Dim rowTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow = CType(Me.NewRow,Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow)
            rowTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow.ItemArray = New Object() {Chuyen_Bay, Tong_So_Tui, Tong_So_Luong, Tong_Khoi_Luong, Tong_Khoi_Luong_BP, Ma_Bc, Ten_NC, Ngay_Dong}
            Me.Rows.Add(rowTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow)
            Return rowTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTDataTable = CType(MyBase.Clone,Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnChuyen_Bay = Me.Columns("Chuyen_Bay")
            Me.columnTong_So_Tui = Me.Columns("Tong_So_Tui")
            Me.columnTong_So_Luong = Me.Columns("Tong_So_Luong")
            Me.columnTong_Khoi_Luong = Me.Columns("Tong_Khoi_Luong")
            Me.columnTong_Khoi_Luong_BP = Me.Columns("Tong_Khoi_Luong_BP")
            Me.columnMa_Bc = Me.Columns("Ma_Bc")
            Me.columnTen_NC = Me.Columns("Ten_NC")
            Me.columnNgay_Dong = Me.Columns("Ngay_Dong")
        End Sub
        
        Private Sub InitClass()
            Me.columnChuyen_Bay = New DataColumn("Chuyen_Bay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChuyen_Bay)
            Me.columnTong_So_Tui = New DataColumn("Tong_So_Tui", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_Tui)
            Me.columnTong_So_Luong = New DataColumn("Tong_So_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_Luong)
            Me.columnTong_Khoi_Luong = New DataColumn("Tong_Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Khoi_Luong)
            Me.columnTong_Khoi_Luong_BP = New DataColumn("Tong_Khoi_Luong_BP", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Khoi_Luong_BP)
            Me.columnMa_Bc = New DataColumn("Ma_Bc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc)
            Me.columnTen_NC = New DataColumn("Ten_NC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_NC)
            Me.columnNgay_Dong = New DataColumn("Ngay_Dong", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Dong)
        End Sub
        
        Public Function NewTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow() As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow
            Return CType(Me.NewRow,Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangedEvent) Is Nothing) Then
                RaiseEvent Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChanged(Me, New Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangeEvent(CType(e.Row,Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangingEvent) Is Nothing) Then
                RaiseEvent Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChanging(Me, New Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangeEvent(CType(e.Row,Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowDeleted(Me, New Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangeEvent(CType(e.Row,Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowDeleting(Me, New Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangeEvent(CType(e.Row,Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow(ByVal row As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow
        Inherits DataRow
        
        Private tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT = CType(Me.Table,Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTDataTable)
        End Sub
        
        Public Property Chuyen_Bay As String
            Get
                Try 
                    Return CType(Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Chuyen_BayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Chuyen_BayColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_Tui As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_So_TuiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_So_TuiColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_So_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_So_LuongColumn) = value
            End Set
        End Property
        
        Public Property Tong_Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Tong_Khoi_Luong_BP As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_Khoi_Luong_BPColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_Khoi_Luong_BPColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc As String
            Get
                Try 
                    Return CType(Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Ma_BcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Ma_BcColumn) = value
            End Set
        End Property
        
        Public Property Ten_NC As String
            Get
                Try 
                    Return CType(Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Ten_NCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Ten_NCColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Dong As Date
            Get
                Try 
                    Return CType(Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Ngay_DongColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Ngay_DongColumn) = value
            End Set
        End Property
        
        Public Function IsChuyen_BayNull() As Boolean
            Return Me.IsNull(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Chuyen_BayColumn)
        End Function
        
        Public Sub SetChuyen_BayNull()
            Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Chuyen_BayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_TuiNull() As Boolean
            Return Me.IsNull(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_So_TuiColumn)
        End Function
        
        Public Sub SetTong_So_TuiNull()
            Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_So_TuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_LuongNull() As Boolean
            Return Me.IsNull(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_So_LuongColumn)
        End Function
        
        Public Sub SetTong_So_LuongNull()
            Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_So_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_Khoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_Khoi_LuongColumn)
        End Function
        
        Public Sub SetTong_Khoi_LuongNull()
            Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_Khoi_Luong_BPNull() As Boolean
            Return Me.IsNull(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_Khoi_Luong_BPColumn)
        End Function
        
        Public Sub SetTong_Khoi_Luong_BPNull()
            Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Tong_Khoi_Luong_BPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_BcNull() As Boolean
            Return Me.IsNull(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Ma_BcColumn)
        End Function
        
        Public Sub SetMa_BcNull()
            Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Ma_BcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_NCNull() As Boolean
            Return Me.IsNull(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Ten_NCColumn)
        End Function
        
        Public Sub SetTen_NCNull()
            Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Ten_NCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_DongNull() As Boolean
            Return Me.IsNull(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Ngay_DongColumn)
        End Function
        
        Public Sub SetNgay_DongNull()
            Me(Me.tableTong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KT.Ngay_DongColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Tong_Hop_So_Lieu_Ems_Chieu_Den_Theo_Ten_Nuoc_Ngay_KTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
