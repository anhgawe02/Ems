'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2502
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsCN35
    Inherits DataSet
    
    Private tableNhanCN35 As NhanCN35DataTable
    
    Private tablebarcode128 As barcode128DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("NhanCN35")) Is Nothing) Then
                Me.Tables.Add(New NhanCN35DataTable(ds.Tables("NhanCN35")))
            End If
            If (Not (ds.Tables("barcode128")) Is Nothing) Then
                Me.Tables.Add(New barcode128DataTable(ds.Tables("barcode128")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NhanCN35 As NhanCN35DataTable
        Get
            Return Me.tableNhanCN35
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property barcode128 As barcode128DataTable
        Get
            Return Me.tablebarcode128
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsCN35 = CType(MyBase.Clone,dsCN35)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("NhanCN35")) Is Nothing) Then
            Me.Tables.Add(New NhanCN35DataTable(ds.Tables("NhanCN35")))
        End If
        If (Not (ds.Tables("barcode128")) Is Nothing) Then
            Me.Tables.Add(New barcode128DataTable(ds.Tables("barcode128")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableNhanCN35 = CType(Me.Tables("NhanCN35"),NhanCN35DataTable)
        If (Not (Me.tableNhanCN35) Is Nothing) Then
            Me.tableNhanCN35.InitVars
        End If
        Me.tablebarcode128 = CType(Me.Tables("barcode128"),barcode128DataTable)
        If (Not (Me.tablebarcode128) Is Nothing) Then
            Me.tablebarcode128.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsCN35"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsCN35.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableNhanCN35 = New NhanCN35DataTable
        Me.Tables.Add(Me.tableNhanCN35)
        Me.tablebarcode128 = New barcode128DataTable
        Me.Tables.Add(Me.tablebarcode128)
    End Sub
    
    Private Function ShouldSerializeNhanCN35() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebarcode128() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub NhanCN35RowChangeEventHandler(ByVal sender As Object, ByVal e As NhanCN35RowChangeEvent)
    
    Public Delegate Sub barcode128RowChangeEventHandler(ByVal sender As Object, ByVal e As barcode128RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NhanCN35DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_Bc_Gui As DataColumn
        
        Private columnTen_Bc_Gui As DataColumn
        
        Private columnMa_Bc_Nhan As DataColumn
        
        Private columnTen_Bc_Nhan As DataColumn
        
        Private columnMa_Nuoc As DataColumn
        
        Private columnTen_Nuoc As DataColumn
        
        Private columnSo_Chuyen_Thu As DataColumn
        
        Private columnNgay_Dong As DataColumn
        
        Private columnTong_So_BP As DataColumn
        
        Private columnLoai_Chuyen_Thu As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnOff_Airport As DataColumn
        
        Private columnRecNo As DataColumn
        
        Private columnMa_Bc_Goc_Chu As DataColumn
        
        Private columnMa_Bc_Tra_Chu As DataColumn
        
        Private columnTui_F As DataColumn
        
        Private columnLoai_Van_Chuyen As DataColumn
        
        Private columnSo_Hieu As DataColumn
        
        Private columnAirport_Transhipment As DataColumn
        
        Private columnTui_So As DataColumn
        
        Friend Sub New()
            MyBase.New("NhanCN35")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_GuiColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Gui
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Bc_GuiColumn As DataColumn
            Get
                Return Me.columnTen_Bc_Gui
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_NhanColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Bc_NhanColumn As DataColumn
            Get
                Return Me.columnTen_Bc_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Ma_NuocColumn As DataColumn
            Get
                Return Me.columnMa_Nuoc
            End Get
        End Property
        
        Friend ReadOnly Property Ten_NuocColumn As DataColumn
            Get
                Return Me.columnTen_Nuoc
            End Get
        End Property
        
        Friend ReadOnly Property So_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnSo_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_DongColumn As DataColumn
            Get
                Return Me.columnNgay_Dong
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_BPColumn As DataColumn
            Get
                Return Me.columnTong_So_BP
            End Get
        End Property
        
        Friend ReadOnly Property Loai_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnLoai_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Off_AirportColumn As DataColumn
            Get
                Return Me.columnOff_Airport
            End Get
        End Property
        
        Friend ReadOnly Property RecNoColumn As DataColumn
            Get
                Return Me.columnRecNo
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_Goc_ChuColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Goc_Chu
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_Tra_ChuColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Tra_Chu
            End Get
        End Property
        
        Friend ReadOnly Property Tui_FColumn As DataColumn
            Get
                Return Me.columnTui_F
            End Get
        End Property
        
        Friend ReadOnly Property Loai_Van_ChuyenColumn As DataColumn
            Get
                Return Me.columnLoai_Van_Chuyen
            End Get
        End Property
        
        Friend ReadOnly Property So_HieuColumn As DataColumn
            Get
                Return Me.columnSo_Hieu
            End Get
        End Property
        
        Friend ReadOnly Property Airport_TranshipmentColumn As DataColumn
            Get
                Return Me.columnAirport_Transhipment
            End Get
        End Property
        
        Friend ReadOnly Property Tui_SoColumn As DataColumn
            Get
                Return Me.columnTui_So
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NhanCN35Row
            Get
                Return CType(Me.Rows(index),NhanCN35Row)
            End Get
        End Property
        
        Public Event NhanCN35RowChanged As NhanCN35RowChangeEventHandler
        
        Public Event NhanCN35RowChanging As NhanCN35RowChangeEventHandler
        
        Public Event NhanCN35RowDeleted As NhanCN35RowChangeEventHandler
        
        Public Event NhanCN35RowDeleting As NhanCN35RowChangeEventHandler
        
        Public Overloads Sub AddNhanCN35Row(ByVal row As NhanCN35Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNhanCN35Row( _
                    ByVal Ma_Bc_Gui As Long,  _
                    ByVal Ten_Bc_Gui As String,  _
                    ByVal Ma_Bc_Nhan As Long,  _
                    ByVal Ten_Bc_Nhan As String,  _
                    ByVal Ma_Nuoc As String,  _
                    ByVal Ten_Nuoc As String,  _
                    ByVal So_Chuyen_Thu As Long,  _
                    ByVal Ngay_Dong As Date,  _
                    ByVal Tong_So_BP As Long,  _
                    ByVal Loai_Chuyen_Thu As String,  _
                    ByVal Khoi_Luong As Double,  _
                    ByVal Off_Airport As String,  _
                    ByVal RecNo As String,  _
                    ByVal Ma_Bc_Goc_Chu As String,  _
                    ByVal Ma_Bc_Tra_Chu As String,  _
                    ByVal Tui_F As String,  _
                    ByVal Loai_Van_Chuyen As String,  _
                    ByVal So_Hieu As String,  _
                    ByVal Airport_Transhipment As String,  _
                    ByVal Tui_So As Long) As NhanCN35Row
            Dim rowNhanCN35Row As NhanCN35Row = CType(Me.NewRow,NhanCN35Row)
            rowNhanCN35Row.ItemArray = New Object() {Ma_Bc_Gui, Ten_Bc_Gui, Ma_Bc_Nhan, Ten_Bc_Nhan, Ma_Nuoc, Ten_Nuoc, So_Chuyen_Thu, Ngay_Dong, Tong_So_BP, Loai_Chuyen_Thu, Khoi_Luong, Off_Airport, RecNo, Ma_Bc_Goc_Chu, Ma_Bc_Tra_Chu, Tui_F, Loai_Van_Chuyen, So_Hieu, Airport_Transhipment, Tui_So}
            Me.Rows.Add(rowNhanCN35Row)
            Return rowNhanCN35Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NhanCN35DataTable = CType(MyBase.Clone,NhanCN35DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NhanCN35DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_Bc_Gui = Me.Columns("Ma_Bc_Gui")
            Me.columnTen_Bc_Gui = Me.Columns("Ten_Bc_Gui")
            Me.columnMa_Bc_Nhan = Me.Columns("Ma_Bc_Nhan")
            Me.columnTen_Bc_Nhan = Me.Columns("Ten_Bc_Nhan")
            Me.columnMa_Nuoc = Me.Columns("Ma_Nuoc")
            Me.columnTen_Nuoc = Me.Columns("Ten_Nuoc")
            Me.columnSo_Chuyen_Thu = Me.Columns("So_Chuyen_Thu")
            Me.columnNgay_Dong = Me.Columns("Ngay_Dong")
            Me.columnTong_So_BP = Me.Columns("Tong_So_BP")
            Me.columnLoai_Chuyen_Thu = Me.Columns("Loai_Chuyen_Thu")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnOff_Airport = Me.Columns("Off_Airport")
            Me.columnRecNo = Me.Columns("RecNo")
            Me.columnMa_Bc_Goc_Chu = Me.Columns("Ma_Bc_Goc_Chu")
            Me.columnMa_Bc_Tra_Chu = Me.Columns("Ma_Bc_Tra_Chu")
            Me.columnTui_F = Me.Columns("Tui_F")
            Me.columnLoai_Van_Chuyen = Me.Columns("Loai_Van_Chuyen")
            Me.columnSo_Hieu = Me.Columns("So_Hieu")
            Me.columnAirport_Transhipment = Me.Columns("Airport_Transhipment")
            Me.columnTui_So = Me.Columns("Tui_So")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_Bc_Gui = New DataColumn("Ma_Bc_Gui", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Gui)
            Me.columnTen_Bc_Gui = New DataColumn("Ten_Bc_Gui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Bc_Gui)
            Me.columnMa_Bc_Nhan = New DataColumn("Ma_Bc_Nhan", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Nhan)
            Me.columnTen_Bc_Nhan = New DataColumn("Ten_Bc_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Bc_Nhan)
            Me.columnMa_Nuoc = New DataColumn("Ma_Nuoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Nuoc)
            Me.columnTen_Nuoc = New DataColumn("Ten_Nuoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Nuoc)
            Me.columnSo_Chuyen_Thu = New DataColumn("So_Chuyen_Thu", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Chuyen_Thu)
            Me.columnNgay_Dong = New DataColumn("Ngay_Dong", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Dong)
            Me.columnTong_So_BP = New DataColumn("Tong_So_BP", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_BP)
            Me.columnLoai_Chuyen_Thu = New DataColumn("Loai_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_Chuyen_Thu)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnOff_Airport = New DataColumn("Off_Airport", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOff_Airport)
            Me.columnRecNo = New DataColumn("RecNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecNo)
            Me.columnMa_Bc_Goc_Chu = New DataColumn("Ma_Bc_Goc_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Goc_Chu)
            Me.columnMa_Bc_Tra_Chu = New DataColumn("Ma_Bc_Tra_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Tra_Chu)
            Me.columnTui_F = New DataColumn("Tui_F", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_F)
            Me.columnLoai_Van_Chuyen = New DataColumn("Loai_Van_Chuyen", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_Van_Chuyen)
            Me.columnSo_Hieu = New DataColumn("So_Hieu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Hieu)
            Me.columnAirport_Transhipment = New DataColumn("Airport_Transhipment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAirport_Transhipment)
            Me.columnTui_So = New DataColumn("Tui_So", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So)
        End Sub
        
        Public Function NewNhanCN35Row() As NhanCN35Row
            Return CType(Me.NewRow,NhanCN35Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NhanCN35Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NhanCN35Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NhanCN35RowChangedEvent) Is Nothing) Then
                RaiseEvent NhanCN35RowChanged(Me, New NhanCN35RowChangeEvent(CType(e.Row,NhanCN35Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NhanCN35RowChangingEvent) Is Nothing) Then
                RaiseEvent NhanCN35RowChanging(Me, New NhanCN35RowChangeEvent(CType(e.Row,NhanCN35Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NhanCN35RowDeletedEvent) Is Nothing) Then
                RaiseEvent NhanCN35RowDeleted(Me, New NhanCN35RowChangeEvent(CType(e.Row,NhanCN35Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NhanCN35RowDeletingEvent) Is Nothing) Then
                RaiseEvent NhanCN35RowDeleting(Me, New NhanCN35RowChangeEvent(CType(e.Row,NhanCN35Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNhanCN35Row(ByVal row As NhanCN35Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NhanCN35Row
        Inherits DataRow
        
        Private tableNhanCN35 As NhanCN35DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNhanCN35 = CType(Me.Table,NhanCN35DataTable)
        End Sub
        
        Public Property Ma_Bc_Gui As Long
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Ma_Bc_GuiColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Ma_Bc_GuiColumn) = value
            End Set
        End Property
        
        Public Property Ten_Bc_Gui As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Ten_Bc_GuiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Ten_Bc_GuiColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Nhan As Long
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Ma_Bc_NhanColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Ma_Bc_NhanColumn) = value
            End Set
        End Property
        
        Public Property Ten_Bc_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Ten_Bc_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Ten_Bc_NhanColumn) = value
            End Set
        End Property
        
        Public Property Ma_Nuoc As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Ma_NuocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Ma_NuocColumn) = value
            End Set
        End Property
        
        Public Property Ten_Nuoc As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Ten_NuocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Ten_NuocColumn) = value
            End Set
        End Property
        
        Public Property So_Chuyen_Thu As Long
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.So_Chuyen_ThuColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.So_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Dong As Date
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Ngay_DongColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Ngay_DongColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_BP As Long
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Tong_So_BPColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Tong_So_BPColumn) = value
            End Set
        End Property
        
        Public Property Loai_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Loai_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Loai_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As Double
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Khoi_LuongColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Off_Airport As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Off_AirportColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Off_AirportColumn) = value
            End Set
        End Property
        
        Public Property RecNo As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.RecNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.RecNoColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Goc_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Ma_Bc_Goc_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Ma_Bc_Goc_ChuColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Tra_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Ma_Bc_Tra_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Ma_Bc_Tra_ChuColumn) = value
            End Set
        End Property
        
        Public Property Tui_F As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Tui_FColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Tui_FColumn) = value
            End Set
        End Property
        
        Public Property Loai_Van_Chuyen As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Loai_Van_ChuyenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Loai_Van_ChuyenColumn) = value
            End Set
        End Property
        
        Public Property So_Hieu As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.So_HieuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.So_HieuColumn) = value
            End Set
        End Property
        
        Public Property Airport_Transhipment As String
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Airport_TranshipmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Airport_TranshipmentColumn) = value
            End Set
        End Property
        
        Public Property Tui_So As Long
            Get
                Try 
                    Return CType(Me(Me.tableNhanCN35.Tui_SoColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNhanCN35.Tui_SoColumn) = value
            End Set
        End Property
        
        Public Function IsMa_Bc_GuiNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Ma_Bc_GuiColumn)
        End Function
        
        Public Sub SetMa_Bc_GuiNull()
            Me(Me.tableNhanCN35.Ma_Bc_GuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Bc_GuiNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Ten_Bc_GuiColumn)
        End Function
        
        Public Sub SetTen_Bc_GuiNull()
            Me(Me.tableNhanCN35.Ten_Bc_GuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_NhanNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Ma_Bc_NhanColumn)
        End Function
        
        Public Sub SetMa_Bc_NhanNull()
            Me(Me.tableNhanCN35.Ma_Bc_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Bc_NhanNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Ten_Bc_NhanColumn)
        End Function
        
        Public Sub SetTen_Bc_NhanNull()
            Me(Me.tableNhanCN35.Ten_Bc_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_NuocNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Ma_NuocColumn)
        End Function
        
        Public Sub SetMa_NuocNull()
            Me(Me.tableNhanCN35.Ma_NuocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_NuocNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Ten_NuocColumn)
        End Function
        
        Public Sub SetTen_NuocNull()
            Me(Me.tableNhanCN35.Ten_NuocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.So_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetSo_Chuyen_ThuNull()
            Me(Me.tableNhanCN35.So_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_DongNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Ngay_DongColumn)
        End Function
        
        Public Sub SetNgay_DongNull()
            Me(Me.tableNhanCN35.Ngay_DongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_BPNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Tong_So_BPColumn)
        End Function
        
        Public Sub SetTong_So_BPNull()
            Me(Me.tableNhanCN35.Tong_So_BPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Loai_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetLoai_Chuyen_ThuNull()
            Me(Me.tableNhanCN35.Loai_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableNhanCN35.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOff_AirportNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Off_AirportColumn)
        End Function
        
        Public Sub SetOff_AirportNull()
            Me(Me.tableNhanCN35.Off_AirportColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecNoNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.RecNoColumn)
        End Function
        
        Public Sub SetRecNoNull()
            Me(Me.tableNhanCN35.RecNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_Goc_ChuNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Ma_Bc_Goc_ChuColumn)
        End Function
        
        Public Sub SetMa_Bc_Goc_ChuNull()
            Me(Me.tableNhanCN35.Ma_Bc_Goc_ChuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_Tra_ChuNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Ma_Bc_Tra_ChuColumn)
        End Function
        
        Public Sub SetMa_Bc_Tra_ChuNull()
            Me(Me.tableNhanCN35.Ma_Bc_Tra_ChuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_FNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Tui_FColumn)
        End Function
        
        Public Sub SetTui_FNull()
            Me(Me.tableNhanCN35.Tui_FColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_Van_ChuyenNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Loai_Van_ChuyenColumn)
        End Function
        
        Public Sub SetLoai_Van_ChuyenNull()
            Me(Me.tableNhanCN35.Loai_Van_ChuyenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_HieuNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.So_HieuColumn)
        End Function
        
        Public Sub SetSo_HieuNull()
            Me(Me.tableNhanCN35.So_HieuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAirport_TranshipmentNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Airport_TranshipmentColumn)
        End Function
        
        Public Sub SetAirport_TranshipmentNull()
            Me(Me.tableNhanCN35.Airport_TranshipmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_SoNull() As Boolean
            Return Me.IsNull(Me.tableNhanCN35.Tui_SoColumn)
        End Function
        
        Public Sub SetTui_SoNull()
            Me(Me.tableNhanCN35.Tui_SoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NhanCN35RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NhanCN35Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NhanCN35Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NhanCN35Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class barcode128DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnimg128 As DataColumn
        
        Friend Sub New()
            MyBase.New("barcode128")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property img128Column As DataColumn
            Get
                Return Me.columnimg128
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As barcode128Row
            Get
                Return CType(Me.Rows(index),barcode128Row)
            End Get
        End Property
        
        Public Event barcode128RowChanged As barcode128RowChangeEventHandler
        
        Public Event barcode128RowChanging As barcode128RowChangeEventHandler
        
        Public Event barcode128RowDeleted As barcode128RowChangeEventHandler
        
        Public Event barcode128RowDeleting As barcode128RowChangeEventHandler
        
        Public Overloads Sub Addbarcode128Row(ByVal row As barcode128Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbarcode128Row(ByVal img128() As Byte) As barcode128Row
            Dim rowbarcode128Row As barcode128Row = CType(Me.NewRow,barcode128Row)
            rowbarcode128Row.ItemArray = New Object() {img128}
            Me.Rows.Add(rowbarcode128Row)
            Return rowbarcode128Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As barcode128DataTable = CType(MyBase.Clone,barcode128DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New barcode128DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnimg128 = Me.Columns("img128")
        End Sub
        
        Private Sub InitClass()
            Me.columnimg128 = New DataColumn("img128", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimg128)
        End Sub
        
        Public Function Newbarcode128Row() As barcode128Row
            Return CType(Me.NewRow,barcode128Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New barcode128Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(barcode128Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.barcode128RowChangedEvent) Is Nothing) Then
                RaiseEvent barcode128RowChanged(Me, New barcode128RowChangeEvent(CType(e.Row,barcode128Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.barcode128RowChangingEvent) Is Nothing) Then
                RaiseEvent barcode128RowChanging(Me, New barcode128RowChangeEvent(CType(e.Row,barcode128Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.barcode128RowDeletedEvent) Is Nothing) Then
                RaiseEvent barcode128RowDeleted(Me, New barcode128RowChangeEvent(CType(e.Row,barcode128Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.barcode128RowDeletingEvent) Is Nothing) Then
                RaiseEvent barcode128RowDeleting(Me, New barcode128RowChangeEvent(CType(e.Row,barcode128Row), e.Action))
            End If
        End Sub
        
        Public Sub Removebarcode128Row(ByVal row As barcode128Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class barcode128Row
        Inherits DataRow
        
        Private tablebarcode128 As barcode128DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebarcode128 = CType(Me.Table,barcode128DataTable)
        End Sub
        
        Public Property img128 As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablebarcode128.img128Column),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebarcode128.img128Column) = value
            End Set
        End Property
        
        Public Function Isimg128Null() As Boolean
            Return Me.IsNull(Me.tablebarcode128.img128Column)
        End Function
        
        Public Sub Setimg128Null()
            Me(Me.tablebarcode128.img128Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class barcode128RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As barcode128Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As barcode128Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As barcode128Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
