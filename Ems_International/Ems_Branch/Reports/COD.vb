'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class COD
    Inherits DataSet
    
    Private tableCOD_Di_Thong_Ke_Nhan As COD_Di_Thong_Ke_NhanDataTable
    
    Private tableCOD_Den_Thong_Ke_Phat As COD_Den_Thong_Ke_PhatDataTable
    
    Private tableCOD_Di_Bao_Cao As COD_Di_Bao_CaoDataTable
    
    Private tableDanh_Sach_Nuoc As Danh_Sach_NuocDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("COD_Di_Thong_Ke_Nhan")) Is Nothing) Then
                Me.Tables.Add(New COD_Di_Thong_Ke_NhanDataTable(ds.Tables("COD_Di_Thong_Ke_Nhan")))
            End If
            If (Not (ds.Tables("COD_Den_Thong_Ke_Phat")) Is Nothing) Then
                Me.Tables.Add(New COD_Den_Thong_Ke_PhatDataTable(ds.Tables("COD_Den_Thong_Ke_Phat")))
            End If
            If (Not (ds.Tables("COD_Di_Bao_Cao")) Is Nothing) Then
                Me.Tables.Add(New COD_Di_Bao_CaoDataTable(ds.Tables("COD_Di_Bao_Cao")))
            End If
            If (Not (ds.Tables("Danh_Sach_Nuoc")) Is Nothing) Then
                Me.Tables.Add(New Danh_Sach_NuocDataTable(ds.Tables("Danh_Sach_Nuoc")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COD_Di_Thong_Ke_Nhan As COD_Di_Thong_Ke_NhanDataTable
        Get
            Return Me.tableCOD_Di_Thong_Ke_Nhan
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COD_Den_Thong_Ke_Phat As COD_Den_Thong_Ke_PhatDataTable
        Get
            Return Me.tableCOD_Den_Thong_Ke_Phat
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COD_Di_Bao_Cao As COD_Di_Bao_CaoDataTable
        Get
            Return Me.tableCOD_Di_Bao_Cao
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Danh_Sach_Nuoc As Danh_Sach_NuocDataTable
        Get
            Return Me.tableDanh_Sach_Nuoc
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As COD = CType(MyBase.Clone,COD)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("COD_Di_Thong_Ke_Nhan")) Is Nothing) Then
            Me.Tables.Add(New COD_Di_Thong_Ke_NhanDataTable(ds.Tables("COD_Di_Thong_Ke_Nhan")))
        End If
        If (Not (ds.Tables("COD_Den_Thong_Ke_Phat")) Is Nothing) Then
            Me.Tables.Add(New COD_Den_Thong_Ke_PhatDataTable(ds.Tables("COD_Den_Thong_Ke_Phat")))
        End If
        If (Not (ds.Tables("COD_Di_Bao_Cao")) Is Nothing) Then
            Me.Tables.Add(New COD_Di_Bao_CaoDataTable(ds.Tables("COD_Di_Bao_Cao")))
        End If
        If (Not (ds.Tables("Danh_Sach_Nuoc")) Is Nothing) Then
            Me.Tables.Add(New Danh_Sach_NuocDataTable(ds.Tables("Danh_Sach_Nuoc")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCOD_Di_Thong_Ke_Nhan = CType(Me.Tables("COD_Di_Thong_Ke_Nhan"),COD_Di_Thong_Ke_NhanDataTable)
        If (Not (Me.tableCOD_Di_Thong_Ke_Nhan) Is Nothing) Then
            Me.tableCOD_Di_Thong_Ke_Nhan.InitVars
        End If
        Me.tableCOD_Den_Thong_Ke_Phat = CType(Me.Tables("COD_Den_Thong_Ke_Phat"),COD_Den_Thong_Ke_PhatDataTable)
        If (Not (Me.tableCOD_Den_Thong_Ke_Phat) Is Nothing) Then
            Me.tableCOD_Den_Thong_Ke_Phat.InitVars
        End If
        Me.tableCOD_Di_Bao_Cao = CType(Me.Tables("COD_Di_Bao_Cao"),COD_Di_Bao_CaoDataTable)
        If (Not (Me.tableCOD_Di_Bao_Cao) Is Nothing) Then
            Me.tableCOD_Di_Bao_Cao.InitVars
        End If
        Me.tableDanh_Sach_Nuoc = CType(Me.Tables("Danh_Sach_Nuoc"),Danh_Sach_NuocDataTable)
        If (Not (Me.tableDanh_Sach_Nuoc) Is Nothing) Then
            Me.tableDanh_Sach_Nuoc.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "COD"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/COD.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCOD_Di_Thong_Ke_Nhan = New COD_Di_Thong_Ke_NhanDataTable
        Me.Tables.Add(Me.tableCOD_Di_Thong_Ke_Nhan)
        Me.tableCOD_Den_Thong_Ke_Phat = New COD_Den_Thong_Ke_PhatDataTable
        Me.Tables.Add(Me.tableCOD_Den_Thong_Ke_Phat)
        Me.tableCOD_Di_Bao_Cao = New COD_Di_Bao_CaoDataTable
        Me.Tables.Add(Me.tableCOD_Di_Bao_Cao)
        Me.tableDanh_Sach_Nuoc = New Danh_Sach_NuocDataTable
        Me.Tables.Add(Me.tableDanh_Sach_Nuoc)
    End Sub
    
    Private Function ShouldSerializeCOD_Di_Thong_Ke_Nhan() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCOD_Den_Thong_Ke_Phat() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCOD_Di_Bao_Cao() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDanh_Sach_Nuoc() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub COD_Di_Thong_Ke_NhanRowChangeEventHandler(ByVal sender As Object, ByVal e As COD_Di_Thong_Ke_NhanRowChangeEvent)
    
    Public Delegate Sub COD_Den_Thong_Ke_PhatRowChangeEventHandler(ByVal sender As Object, ByVal e As COD_Den_Thong_Ke_PhatRowChangeEvent)
    
    Public Delegate Sub COD_Di_Bao_CaoRowChangeEventHandler(ByVal sender As Object, ByVal e As COD_Di_Bao_CaoRowChangeEvent)
    
    Public Delegate Sub Danh_Sach_NuocRowChangeEventHandler(ByVal sender As Object, ByVal e As Danh_Sach_NuocRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class COD_Di_Thong_Ke_NhanDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_E1 As DataColumn
        
        Private columnMa_COD1 As DataColumn
        
        Private columnMa_Bc_Tra As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnThu_Ho As DataColumn
        
        Private columnCuoc_DV As DataColumn
        
        Private columnNgay_Gui As DataColumn
        
        Private columnNgay_Nhan As DataColumn
        
        Friend Sub New()
            MyBase.New("COD_Di_Thong_Ke_Nhan")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Ma_COD1Column As DataColumn
            Get
                Return Me.columnMa_COD1
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_TraColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Tra
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Thu_HoColumn As DataColumn
            Get
                Return Me.columnThu_Ho
            End Get
        End Property
        
        Friend ReadOnly Property Cuoc_DVColumn As DataColumn
            Get
                Return Me.columnCuoc_DV
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_GuiColumn As DataColumn
            Get
                Return Me.columnNgay_Gui
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_NhanColumn As DataColumn
            Get
                Return Me.columnNgay_Nhan
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As COD_Di_Thong_Ke_NhanRow
            Get
                Return CType(Me.Rows(index),COD_Di_Thong_Ke_NhanRow)
            End Get
        End Property
        
        Public Event COD_Di_Thong_Ke_NhanRowChanged As COD_Di_Thong_Ke_NhanRowChangeEventHandler
        
        Public Event COD_Di_Thong_Ke_NhanRowChanging As COD_Di_Thong_Ke_NhanRowChangeEventHandler
        
        Public Event COD_Di_Thong_Ke_NhanRowDeleted As COD_Di_Thong_Ke_NhanRowChangeEventHandler
        
        Public Event COD_Di_Thong_Ke_NhanRowDeleting As COD_Di_Thong_Ke_NhanRowChangeEventHandler
        
        Public Overloads Sub AddCOD_Di_Thong_Ke_NhanRow(ByVal row As COD_Di_Thong_Ke_NhanRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCOD_Di_Thong_Ke_NhanRow(ByVal Ma_E1 As String, ByVal Ma_COD1 As String, ByVal Ma_Bc_Tra As Integer, ByVal Khoi_Luong As Integer, ByVal Thu_Ho As Integer, ByVal Cuoc_DV As Integer, ByVal Ngay_Gui As Date, ByVal Ngay_Nhan As Date) As COD_Di_Thong_Ke_NhanRow
            Dim rowCOD_Di_Thong_Ke_NhanRow As COD_Di_Thong_Ke_NhanRow = CType(Me.NewRow,COD_Di_Thong_Ke_NhanRow)
            rowCOD_Di_Thong_Ke_NhanRow.ItemArray = New Object() {Ma_E1, Ma_COD1, Ma_Bc_Tra, Khoi_Luong, Thu_Ho, Cuoc_DV, Ngay_Gui, Ngay_Nhan}
            Me.Rows.Add(rowCOD_Di_Thong_Ke_NhanRow)
            Return rowCOD_Di_Thong_Ke_NhanRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As COD_Di_Thong_Ke_NhanDataTable = CType(MyBase.Clone,COD_Di_Thong_Ke_NhanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New COD_Di_Thong_Ke_NhanDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnMa_COD1 = Me.Columns("Ma_COD1")
            Me.columnMa_Bc_Tra = Me.Columns("Ma_Bc_Tra")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnThu_Ho = Me.Columns("Thu_Ho")
            Me.columnCuoc_DV = Me.Columns("Cuoc_DV")
            Me.columnNgay_Gui = Me.Columns("Ngay_Gui")
            Me.columnNgay_Nhan = Me.Columns("Ngay_Nhan")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnMa_COD1 = New DataColumn("Ma_COD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_COD1)
            Me.columnMa_Bc_Tra = New DataColumn("Ma_Bc_Tra", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Tra)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnThu_Ho = New DataColumn("Thu_Ho", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThu_Ho)
            Me.columnCuoc_DV = New DataColumn("Cuoc_DV", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuoc_DV)
            Me.columnNgay_Gui = New DataColumn("Ngay_Gui", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Gui)
            Me.columnNgay_Nhan = New DataColumn("Ngay_Nhan", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Nhan)
        End Sub
        
        Public Function NewCOD_Di_Thong_Ke_NhanRow() As COD_Di_Thong_Ke_NhanRow
            Return CType(Me.NewRow,COD_Di_Thong_Ke_NhanRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New COD_Di_Thong_Ke_NhanRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(COD_Di_Thong_Ke_NhanRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COD_Di_Thong_Ke_NhanRowChangedEvent) Is Nothing) Then
                RaiseEvent COD_Di_Thong_Ke_NhanRowChanged(Me, New COD_Di_Thong_Ke_NhanRowChangeEvent(CType(e.Row,COD_Di_Thong_Ke_NhanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COD_Di_Thong_Ke_NhanRowChangingEvent) Is Nothing) Then
                RaiseEvent COD_Di_Thong_Ke_NhanRowChanging(Me, New COD_Di_Thong_Ke_NhanRowChangeEvent(CType(e.Row,COD_Di_Thong_Ke_NhanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COD_Di_Thong_Ke_NhanRowDeletedEvent) Is Nothing) Then
                RaiseEvent COD_Di_Thong_Ke_NhanRowDeleted(Me, New COD_Di_Thong_Ke_NhanRowChangeEvent(CType(e.Row,COD_Di_Thong_Ke_NhanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COD_Di_Thong_Ke_NhanRowDeletingEvent) Is Nothing) Then
                RaiseEvent COD_Di_Thong_Ke_NhanRowDeleting(Me, New COD_Di_Thong_Ke_NhanRowChangeEvent(CType(e.Row,COD_Di_Thong_Ke_NhanRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCOD_Di_Thong_Ke_NhanRow(ByVal row As COD_Di_Thong_Ke_NhanRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class COD_Di_Thong_Ke_NhanRow
        Inherits DataRow
        
        Private tableCOD_Di_Thong_Ke_Nhan As COD_Di_Thong_Ke_NhanDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOD_Di_Thong_Ke_Nhan = CType(Me.Table,COD_Di_Thong_Ke_NhanDataTable)
        End Sub
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Ma_COD1 As String
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ma_COD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ma_COD1Column) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Tra As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ma_Bc_TraColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ma_Bc_TraColumn) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Thong_Ke_Nhan.Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Thong_Ke_Nhan.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Thu_Ho As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Thong_Ke_Nhan.Thu_HoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Thong_Ke_Nhan.Thu_HoColumn) = value
            End Set
        End Property
        
        Public Property Cuoc_DV As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Thong_Ke_Nhan.Cuoc_DVColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Thong_Ke_Nhan.Cuoc_DVColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Gui As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ngay_GuiColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ngay_GuiColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Nhan As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ngay_NhanColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ngay_NhanColumn) = value
            End Set
        End Property
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Thong_Ke_Nhan.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_COD1Null() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Thong_Ke_Nhan.Ma_COD1Column)
        End Function
        
        Public Sub SetMa_COD1Null()
            Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ma_COD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_TraNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Thong_Ke_Nhan.Ma_Bc_TraColumn)
        End Function
        
        Public Sub SetMa_Bc_TraNull()
            Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ma_Bc_TraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Thong_Ke_Nhan.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableCOD_Di_Thong_Ke_Nhan.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThu_HoNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Thong_Ke_Nhan.Thu_HoColumn)
        End Function
        
        Public Sub SetThu_HoNull()
            Me(Me.tableCOD_Di_Thong_Ke_Nhan.Thu_HoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuoc_DVNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Thong_Ke_Nhan.Cuoc_DVColumn)
        End Function
        
        Public Sub SetCuoc_DVNull()
            Me(Me.tableCOD_Di_Thong_Ke_Nhan.Cuoc_DVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_GuiNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Thong_Ke_Nhan.Ngay_GuiColumn)
        End Function
        
        Public Sub SetNgay_GuiNull()
            Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ngay_GuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_NhanNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Thong_Ke_Nhan.Ngay_NhanColumn)
        End Function
        
        Public Sub SetNgay_NhanNull()
            Me(Me.tableCOD_Di_Thong_Ke_Nhan.Ngay_NhanColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class COD_Di_Thong_Ke_NhanRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As COD_Di_Thong_Ke_NhanRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As COD_Di_Thong_Ke_NhanRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As COD_Di_Thong_Ke_NhanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class COD_Den_Thong_Ke_PhatDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_E1 As DataColumn
        
        Private columnMa_COD1 As DataColumn
        
        Private columnMa_Bc_Goc As DataColumn
        
        Private columnKhoi_luong As DataColumn
        
        Private columnGia_Tri As DataColumn
        
        Private columnCuoc_Thu_Ho As DataColumn
        
        Private columnNgay_Nhan As DataColumn
        
        Private columnNgay_Gui_ As DataColumn
        
        Friend Sub New()
            MyBase.New("COD_Den_Thong_Ke_Phat")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Ma_COD1Column As DataColumn
            Get
                Return Me.columnMa_COD1
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_GocColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Goc
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_luongColumn As DataColumn
            Get
                Return Me.columnKhoi_luong
            End Get
        End Property
        
        Friend ReadOnly Property Gia_TriColumn As DataColumn
            Get
                Return Me.columnGia_Tri
            End Get
        End Property
        
        Friend ReadOnly Property Cuoc_Thu_HoColumn As DataColumn
            Get
                Return Me.columnCuoc_Thu_Ho
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_NhanColumn As DataColumn
            Get
                Return Me.columnNgay_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_Gui_Column As DataColumn
            Get
                Return Me.columnNgay_Gui_
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As COD_Den_Thong_Ke_PhatRow
            Get
                Return CType(Me.Rows(index),COD_Den_Thong_Ke_PhatRow)
            End Get
        End Property
        
        Public Event COD_Den_Thong_Ke_PhatRowChanged As COD_Den_Thong_Ke_PhatRowChangeEventHandler
        
        Public Event COD_Den_Thong_Ke_PhatRowChanging As COD_Den_Thong_Ke_PhatRowChangeEventHandler
        
        Public Event COD_Den_Thong_Ke_PhatRowDeleted As COD_Den_Thong_Ke_PhatRowChangeEventHandler
        
        Public Event COD_Den_Thong_Ke_PhatRowDeleting As COD_Den_Thong_Ke_PhatRowChangeEventHandler
        
        Public Overloads Sub AddCOD_Den_Thong_Ke_PhatRow(ByVal row As COD_Den_Thong_Ke_PhatRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCOD_Den_Thong_Ke_PhatRow(ByVal Ma_E1 As String, ByVal Ma_COD1 As String, ByVal Ma_Bc_Goc As Integer, ByVal Khoi_luong As Integer, ByVal Gia_Tri As Integer, ByVal Cuoc_Thu_Ho As Integer, ByVal Ngay_Nhan As Date, ByVal Ngay_Gui_ As Date) As COD_Den_Thong_Ke_PhatRow
            Dim rowCOD_Den_Thong_Ke_PhatRow As COD_Den_Thong_Ke_PhatRow = CType(Me.NewRow,COD_Den_Thong_Ke_PhatRow)
            rowCOD_Den_Thong_Ke_PhatRow.ItemArray = New Object() {Ma_E1, Ma_COD1, Ma_Bc_Goc, Khoi_luong, Gia_Tri, Cuoc_Thu_Ho, Ngay_Nhan, Ngay_Gui_}
            Me.Rows.Add(rowCOD_Den_Thong_Ke_PhatRow)
            Return rowCOD_Den_Thong_Ke_PhatRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As COD_Den_Thong_Ke_PhatDataTable = CType(MyBase.Clone,COD_Den_Thong_Ke_PhatDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New COD_Den_Thong_Ke_PhatDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnMa_COD1 = Me.Columns("Ma_COD1")
            Me.columnMa_Bc_Goc = Me.Columns("Ma_Bc_Goc")
            Me.columnKhoi_luong = Me.Columns("Khoi_luong")
            Me.columnGia_Tri = Me.Columns("Gia_Tri")
            Me.columnCuoc_Thu_Ho = Me.Columns("Cuoc_Thu_Ho")
            Me.columnNgay_Nhan = Me.Columns("Ngay_Nhan")
            Me.columnNgay_Gui_ = Me.Columns("Ngay_Gui ")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnMa_COD1 = New DataColumn("Ma_COD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_COD1)
            Me.columnMa_Bc_Goc = New DataColumn("Ma_Bc_Goc", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Goc)
            Me.columnKhoi_luong = New DataColumn("Khoi_luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_luong)
            Me.columnGia_Tri = New DataColumn("Gia_Tri", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGia_Tri)
            Me.columnCuoc_Thu_Ho = New DataColumn("Cuoc_Thu_Ho", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuoc_Thu_Ho)
            Me.columnNgay_Nhan = New DataColumn("Ngay_Nhan", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Nhan)
            Me.columnNgay_Gui_ = New DataColumn("Ngay_Gui ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Gui_)
        End Sub
        
        Public Function NewCOD_Den_Thong_Ke_PhatRow() As COD_Den_Thong_Ke_PhatRow
            Return CType(Me.NewRow,COD_Den_Thong_Ke_PhatRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New COD_Den_Thong_Ke_PhatRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(COD_Den_Thong_Ke_PhatRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COD_Den_Thong_Ke_PhatRowChangedEvent) Is Nothing) Then
                RaiseEvent COD_Den_Thong_Ke_PhatRowChanged(Me, New COD_Den_Thong_Ke_PhatRowChangeEvent(CType(e.Row,COD_Den_Thong_Ke_PhatRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COD_Den_Thong_Ke_PhatRowChangingEvent) Is Nothing) Then
                RaiseEvent COD_Den_Thong_Ke_PhatRowChanging(Me, New COD_Den_Thong_Ke_PhatRowChangeEvent(CType(e.Row,COD_Den_Thong_Ke_PhatRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COD_Den_Thong_Ke_PhatRowDeletedEvent) Is Nothing) Then
                RaiseEvent COD_Den_Thong_Ke_PhatRowDeleted(Me, New COD_Den_Thong_Ke_PhatRowChangeEvent(CType(e.Row,COD_Den_Thong_Ke_PhatRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COD_Den_Thong_Ke_PhatRowDeletingEvent) Is Nothing) Then
                RaiseEvent COD_Den_Thong_Ke_PhatRowDeleting(Me, New COD_Den_Thong_Ke_PhatRowChangeEvent(CType(e.Row,COD_Den_Thong_Ke_PhatRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCOD_Den_Thong_Ke_PhatRow(ByVal row As COD_Den_Thong_Ke_PhatRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class COD_Den_Thong_Ke_PhatRow
        Inherits DataRow
        
        Private tableCOD_Den_Thong_Ke_Phat As COD_Den_Thong_Ke_PhatDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOD_Den_Thong_Ke_Phat = CType(Me.Table,COD_Den_Thong_Ke_PhatDataTable)
        End Sub
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Den_Thong_Ke_Phat.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Den_Thong_Ke_Phat.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Ma_COD1 As String
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Den_Thong_Ke_Phat.Ma_COD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Den_Thong_Ke_Phat.Ma_COD1Column) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Goc As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Den_Thong_Ke_Phat.Ma_Bc_GocColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Den_Thong_Ke_Phat.Ma_Bc_GocColumn) = value
            End Set
        End Property
        
        Public Property Khoi_luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Den_Thong_Ke_Phat.Khoi_luongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Den_Thong_Ke_Phat.Khoi_luongColumn) = value
            End Set
        End Property
        
        Public Property Gia_Tri As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Den_Thong_Ke_Phat.Gia_TriColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Den_Thong_Ke_Phat.Gia_TriColumn) = value
            End Set
        End Property
        
        Public Property Cuoc_Thu_Ho As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Den_Thong_Ke_Phat.Cuoc_Thu_HoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Den_Thong_Ke_Phat.Cuoc_Thu_HoColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Nhan As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Den_Thong_Ke_Phat.Ngay_NhanColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Den_Thong_Ke_Phat.Ngay_NhanColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Gui_ As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Den_Thong_Ke_Phat.Ngay_Gui_Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Den_Thong_Ke_Phat.Ngay_Gui_Column) = value
            End Set
        End Property
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableCOD_Den_Thong_Ke_Phat.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableCOD_Den_Thong_Ke_Phat.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_COD1Null() As Boolean
            Return Me.IsNull(Me.tableCOD_Den_Thong_Ke_Phat.Ma_COD1Column)
        End Function
        
        Public Sub SetMa_COD1Null()
            Me(Me.tableCOD_Den_Thong_Ke_Phat.Ma_COD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_GocNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Den_Thong_Ke_Phat.Ma_Bc_GocColumn)
        End Function
        
        Public Sub SetMa_Bc_GocNull()
            Me(Me.tableCOD_Den_Thong_Ke_Phat.Ma_Bc_GocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_luongNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Den_Thong_Ke_Phat.Khoi_luongColumn)
        End Function
        
        Public Sub SetKhoi_luongNull()
            Me(Me.tableCOD_Den_Thong_Ke_Phat.Khoi_luongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGia_TriNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Den_Thong_Ke_Phat.Gia_TriColumn)
        End Function
        
        Public Sub SetGia_TriNull()
            Me(Me.tableCOD_Den_Thong_Ke_Phat.Gia_TriColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuoc_Thu_HoNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Den_Thong_Ke_Phat.Cuoc_Thu_HoColumn)
        End Function
        
        Public Sub SetCuoc_Thu_HoNull()
            Me(Me.tableCOD_Den_Thong_Ke_Phat.Cuoc_Thu_HoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_NhanNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Den_Thong_Ke_Phat.Ngay_NhanColumn)
        End Function
        
        Public Sub SetNgay_NhanNull()
            Me(Me.tableCOD_Den_Thong_Ke_Phat.Ngay_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_Gui_Null() As Boolean
            Return Me.IsNull(Me.tableCOD_Den_Thong_Ke_Phat.Ngay_Gui_Column)
        End Function
        
        Public Sub SetNgay_Gui_Null()
            Me(Me.tableCOD_Den_Thong_Ke_Phat.Ngay_Gui_Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class COD_Den_Thong_Ke_PhatRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As COD_Den_Thong_Ke_PhatRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As COD_Den_Thong_Ke_PhatRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As COD_Den_Thong_Ke_PhatRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class COD_Di_Bao_CaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_Quan_Ly As DataColumn
        
        Private columnSo_Goi_Hang As DataColumn
        
        Private columnSo_Luong_Phieu As DataColumn
        
        Private columnSo_Tien_Uy_Thac As DataColumn
        
        Private columnCuoc_Nguoi_Gui As DataColumn
        
        Private columnCuoc_Nguoi_Nhan As DataColumn
        
        Friend Sub New()
            MyBase.New("COD_Di_Bao_Cao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Quan_LyColumn As DataColumn
            Get
                Return Me.columnMa_Quan_Ly
            End Get
        End Property
        
        Friend ReadOnly Property So_Goi_HangColumn As DataColumn
            Get
                Return Me.columnSo_Goi_Hang
            End Get
        End Property
        
        Friend ReadOnly Property So_Luong_PhieuColumn As DataColumn
            Get
                Return Me.columnSo_Luong_Phieu
            End Get
        End Property
        
        Friend ReadOnly Property So_Tien_Uy_ThacColumn As DataColumn
            Get
                Return Me.columnSo_Tien_Uy_Thac
            End Get
        End Property
        
        Friend ReadOnly Property Cuoc_Nguoi_GuiColumn As DataColumn
            Get
                Return Me.columnCuoc_Nguoi_Gui
            End Get
        End Property
        
        Friend ReadOnly Property Cuoc_Nguoi_NhanColumn As DataColumn
            Get
                Return Me.columnCuoc_Nguoi_Nhan
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As COD_Di_Bao_CaoRow
            Get
                Return CType(Me.Rows(index),COD_Di_Bao_CaoRow)
            End Get
        End Property
        
        Public Event COD_Di_Bao_CaoRowChanged As COD_Di_Bao_CaoRowChangeEventHandler
        
        Public Event COD_Di_Bao_CaoRowChanging As COD_Di_Bao_CaoRowChangeEventHandler
        
        Public Event COD_Di_Bao_CaoRowDeleted As COD_Di_Bao_CaoRowChangeEventHandler
        
        Public Event COD_Di_Bao_CaoRowDeleting As COD_Di_Bao_CaoRowChangeEventHandler
        
        Public Overloads Sub AddCOD_Di_Bao_CaoRow(ByVal row As COD_Di_Bao_CaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCOD_Di_Bao_CaoRow(ByVal Ma_Quan_Ly As String, ByVal So_Goi_Hang As Integer, ByVal So_Luong_Phieu As Integer, ByVal So_Tien_Uy_Thac As Integer, ByVal Cuoc_Nguoi_Gui As Integer, ByVal Cuoc_Nguoi_Nhan As Integer) As COD_Di_Bao_CaoRow
            Dim rowCOD_Di_Bao_CaoRow As COD_Di_Bao_CaoRow = CType(Me.NewRow,COD_Di_Bao_CaoRow)
            rowCOD_Di_Bao_CaoRow.ItemArray = New Object() {Ma_Quan_Ly, So_Goi_Hang, So_Luong_Phieu, So_Tien_Uy_Thac, Cuoc_Nguoi_Gui, Cuoc_Nguoi_Nhan}
            Me.Rows.Add(rowCOD_Di_Bao_CaoRow)
            Return rowCOD_Di_Bao_CaoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As COD_Di_Bao_CaoDataTable = CType(MyBase.Clone,COD_Di_Bao_CaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New COD_Di_Bao_CaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_Quan_Ly = Me.Columns("Ma_Quan_Ly")
            Me.columnSo_Goi_Hang = Me.Columns("So_Goi_Hang")
            Me.columnSo_Luong_Phieu = Me.Columns("So_Luong_Phieu")
            Me.columnSo_Tien_Uy_Thac = Me.Columns("So_Tien_Uy_Thac")
            Me.columnCuoc_Nguoi_Gui = Me.Columns("Cuoc_Nguoi_Gui")
            Me.columnCuoc_Nguoi_Nhan = Me.Columns("Cuoc_Nguoi_Nhan")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_Quan_Ly = New DataColumn("Ma_Quan_Ly", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Quan_Ly)
            Me.columnSo_Goi_Hang = New DataColumn("So_Goi_Hang", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Goi_Hang)
            Me.columnSo_Luong_Phieu = New DataColumn("So_Luong_Phieu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Luong_Phieu)
            Me.columnSo_Tien_Uy_Thac = New DataColumn("So_Tien_Uy_Thac", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Tien_Uy_Thac)
            Me.columnCuoc_Nguoi_Gui = New DataColumn("Cuoc_Nguoi_Gui", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuoc_Nguoi_Gui)
            Me.columnCuoc_Nguoi_Nhan = New DataColumn("Cuoc_Nguoi_Nhan", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuoc_Nguoi_Nhan)
        End Sub
        
        Public Function NewCOD_Di_Bao_CaoRow() As COD_Di_Bao_CaoRow
            Return CType(Me.NewRow,COD_Di_Bao_CaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New COD_Di_Bao_CaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(COD_Di_Bao_CaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COD_Di_Bao_CaoRowChangedEvent) Is Nothing) Then
                RaiseEvent COD_Di_Bao_CaoRowChanged(Me, New COD_Di_Bao_CaoRowChangeEvent(CType(e.Row,COD_Di_Bao_CaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COD_Di_Bao_CaoRowChangingEvent) Is Nothing) Then
                RaiseEvent COD_Di_Bao_CaoRowChanging(Me, New COD_Di_Bao_CaoRowChangeEvent(CType(e.Row,COD_Di_Bao_CaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COD_Di_Bao_CaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent COD_Di_Bao_CaoRowDeleted(Me, New COD_Di_Bao_CaoRowChangeEvent(CType(e.Row,COD_Di_Bao_CaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COD_Di_Bao_CaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent COD_Di_Bao_CaoRowDeleting(Me, New COD_Di_Bao_CaoRowChangeEvent(CType(e.Row,COD_Di_Bao_CaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCOD_Di_Bao_CaoRow(ByVal row As COD_Di_Bao_CaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class COD_Di_Bao_CaoRow
        Inherits DataRow
        
        Private tableCOD_Di_Bao_Cao As COD_Di_Bao_CaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOD_Di_Bao_Cao = CType(Me.Table,COD_Di_Bao_CaoDataTable)
        End Sub
        
        Public Property Ma_Quan_Ly As String
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Bao_Cao.Ma_Quan_LyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Bao_Cao.Ma_Quan_LyColumn) = value
            End Set
        End Property
        
        Public Property So_Goi_Hang As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Bao_Cao.So_Goi_HangColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Bao_Cao.So_Goi_HangColumn) = value
            End Set
        End Property
        
        Public Property So_Luong_Phieu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Bao_Cao.So_Luong_PhieuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Bao_Cao.So_Luong_PhieuColumn) = value
            End Set
        End Property
        
        Public Property So_Tien_Uy_Thac As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Bao_Cao.So_Tien_Uy_ThacColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Bao_Cao.So_Tien_Uy_ThacColumn) = value
            End Set
        End Property
        
        Public Property Cuoc_Nguoi_Gui As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Bao_Cao.Cuoc_Nguoi_GuiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Bao_Cao.Cuoc_Nguoi_GuiColumn) = value
            End Set
        End Property
        
        Public Property Cuoc_Nguoi_Nhan As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOD_Di_Bao_Cao.Cuoc_Nguoi_NhanColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOD_Di_Bao_Cao.Cuoc_Nguoi_NhanColumn) = value
            End Set
        End Property
        
        Public Function IsMa_Quan_LyNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Bao_Cao.Ma_Quan_LyColumn)
        End Function
        
        Public Sub SetMa_Quan_LyNull()
            Me(Me.tableCOD_Di_Bao_Cao.Ma_Quan_LyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Goi_HangNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Bao_Cao.So_Goi_HangColumn)
        End Function
        
        Public Sub SetSo_Goi_HangNull()
            Me(Me.tableCOD_Di_Bao_Cao.So_Goi_HangColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Luong_PhieuNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Bao_Cao.So_Luong_PhieuColumn)
        End Function
        
        Public Sub SetSo_Luong_PhieuNull()
            Me(Me.tableCOD_Di_Bao_Cao.So_Luong_PhieuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Tien_Uy_ThacNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Bao_Cao.So_Tien_Uy_ThacColumn)
        End Function
        
        Public Sub SetSo_Tien_Uy_ThacNull()
            Me(Me.tableCOD_Di_Bao_Cao.So_Tien_Uy_ThacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuoc_Nguoi_GuiNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Bao_Cao.Cuoc_Nguoi_GuiColumn)
        End Function
        
        Public Sub SetCuoc_Nguoi_GuiNull()
            Me(Me.tableCOD_Di_Bao_Cao.Cuoc_Nguoi_GuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuoc_Nguoi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableCOD_Di_Bao_Cao.Cuoc_Nguoi_NhanColumn)
        End Function
        
        Public Sub SetCuoc_Nguoi_NhanNull()
            Me(Me.tableCOD_Di_Bao_Cao.Cuoc_Nguoi_NhanColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class COD_Di_Bao_CaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As COD_Di_Bao_CaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As COD_Di_Bao_CaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As COD_Di_Bao_CaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Danh_Sach_NuocDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_Nuoc As DataColumn
        
        Private columnTen_Nuoc As DataColumn
        
        Private columnMa_Khu_Vuc As DataColumn
        
        Friend Sub New()
            MyBase.New("Danh_Sach_Nuoc")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_NuocColumn As DataColumn
            Get
                Return Me.columnMa_Nuoc
            End Get
        End Property
        
        Friend ReadOnly Property Ten_NuocColumn As DataColumn
            Get
                Return Me.columnTen_Nuoc
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Khu_VucColumn As DataColumn
            Get
                Return Me.columnMa_Khu_Vuc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Danh_Sach_NuocRow
            Get
                Return CType(Me.Rows(index),Danh_Sach_NuocRow)
            End Get
        End Property
        
        Public Event Danh_Sach_NuocRowChanged As Danh_Sach_NuocRowChangeEventHandler
        
        Public Event Danh_Sach_NuocRowChanging As Danh_Sach_NuocRowChangeEventHandler
        
        Public Event Danh_Sach_NuocRowDeleted As Danh_Sach_NuocRowChangeEventHandler
        
        Public Event Danh_Sach_NuocRowDeleting As Danh_Sach_NuocRowChangeEventHandler
        
        Public Overloads Sub AddDanh_Sach_NuocRow(ByVal row As Danh_Sach_NuocRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDanh_Sach_NuocRow(ByVal Ma_Nuoc As String, ByVal Ten_Nuoc As String, ByVal Ma_Khu_Vuc As String) As Danh_Sach_NuocRow
            Dim rowDanh_Sach_NuocRow As Danh_Sach_NuocRow = CType(Me.NewRow,Danh_Sach_NuocRow)
            rowDanh_Sach_NuocRow.ItemArray = New Object() {Ma_Nuoc, Ten_Nuoc, Ma_Khu_Vuc}
            Me.Rows.Add(rowDanh_Sach_NuocRow)
            Return rowDanh_Sach_NuocRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Danh_Sach_NuocDataTable = CType(MyBase.Clone,Danh_Sach_NuocDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Danh_Sach_NuocDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_Nuoc = Me.Columns("Ma_Nuoc")
            Me.columnTen_Nuoc = Me.Columns("Ten_Nuoc")
            Me.columnMa_Khu_Vuc = Me.Columns("Ma_Khu_Vuc")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_Nuoc = New DataColumn("Ma_Nuoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Nuoc)
            Me.columnTen_Nuoc = New DataColumn("Ten_Nuoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Nuoc)
            Me.columnMa_Khu_Vuc = New DataColumn("Ma_Khu_Vuc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Khu_Vuc)
        End Sub
        
        Public Function NewDanh_Sach_NuocRow() As Danh_Sach_NuocRow
            Return CType(Me.NewRow,Danh_Sach_NuocRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Danh_Sach_NuocRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Danh_Sach_NuocRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Danh_Sach_NuocRowChangedEvent) Is Nothing) Then
                RaiseEvent Danh_Sach_NuocRowChanged(Me, New Danh_Sach_NuocRowChangeEvent(CType(e.Row,Danh_Sach_NuocRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Danh_Sach_NuocRowChangingEvent) Is Nothing) Then
                RaiseEvent Danh_Sach_NuocRowChanging(Me, New Danh_Sach_NuocRowChangeEvent(CType(e.Row,Danh_Sach_NuocRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Danh_Sach_NuocRowDeletedEvent) Is Nothing) Then
                RaiseEvent Danh_Sach_NuocRowDeleted(Me, New Danh_Sach_NuocRowChangeEvent(CType(e.Row,Danh_Sach_NuocRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Danh_Sach_NuocRowDeletingEvent) Is Nothing) Then
                RaiseEvent Danh_Sach_NuocRowDeleting(Me, New Danh_Sach_NuocRowChangeEvent(CType(e.Row,Danh_Sach_NuocRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDanh_Sach_NuocRow(ByVal row As Danh_Sach_NuocRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Danh_Sach_NuocRow
        Inherits DataRow
        
        Private tableDanh_Sach_Nuoc As Danh_Sach_NuocDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDanh_Sach_Nuoc = CType(Me.Table,Danh_Sach_NuocDataTable)
        End Sub
        
        Public Property Ma_Nuoc As String
            Get
                Try 
                    Return CType(Me(Me.tableDanh_Sach_Nuoc.Ma_NuocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDanh_Sach_Nuoc.Ma_NuocColumn) = value
            End Set
        End Property
        
        Public Property Ten_Nuoc As String
            Get
                Try 
                    Return CType(Me(Me.tableDanh_Sach_Nuoc.Ten_NuocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDanh_Sach_Nuoc.Ten_NuocColumn) = value
            End Set
        End Property
        
        Public Property Ma_Khu_Vuc As String
            Get
                Try 
                    Return CType(Me(Me.tableDanh_Sach_Nuoc.Ma_Khu_VucColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDanh_Sach_Nuoc.Ma_Khu_VucColumn) = value
            End Set
        End Property
        
        Public Function IsMa_NuocNull() As Boolean
            Return Me.IsNull(Me.tableDanh_Sach_Nuoc.Ma_NuocColumn)
        End Function
        
        Public Sub SetMa_NuocNull()
            Me(Me.tableDanh_Sach_Nuoc.Ma_NuocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_NuocNull() As Boolean
            Return Me.IsNull(Me.tableDanh_Sach_Nuoc.Ten_NuocColumn)
        End Function
        
        Public Sub SetTen_NuocNull()
            Me(Me.tableDanh_Sach_Nuoc.Ten_NuocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Khu_VucNull() As Boolean
            Return Me.IsNull(Me.tableDanh_Sach_Nuoc.Ma_Khu_VucColumn)
        End Function
        
        Public Sub SetMa_Khu_VucNull()
            Me(Me.tableDanh_Sach_Nuoc.Ma_Khu_VucColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Danh_Sach_NuocRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Danh_Sach_NuocRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Danh_Sach_NuocRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Danh_Sach_NuocRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
