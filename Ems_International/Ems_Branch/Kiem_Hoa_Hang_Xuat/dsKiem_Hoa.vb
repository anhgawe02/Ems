'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsKiem_Hoa
    Inherits DataSet
    
    Private tableTo_Khai_Hai_Quan_Xuat As To_Khai_Hai_Quan_XuatDataTable
    
    Private tableChi_Tiet_To_Khai_Hai_Quan_Xuat As Chi_Tiet_To_Khai_Hai_Quan_XuatDataTable
    
    Private tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("To_Khai_Hai_Quan_Xuat")) Is Nothing) Then
                Me.Tables.Add(New To_Khai_Hai_Quan_XuatDataTable(ds.Tables("To_Khai_Hai_Quan_Xuat")))
            End If
            If (Not (ds.Tables("Chi_Tiet_To_Khai_Hai_Quan_Xuat")) Is Nothing) Then
                Me.Tables.Add(New Chi_Tiet_To_Khai_Hai_Quan_XuatDataTable(ds.Tables("Chi_Tiet_To_Khai_Hai_Quan_Xuat")))
            End If
            If (Not (ds.Tables("Chi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan")) Is Nothing) Then
                Me.Tables.Add(New Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanDataTable(ds.Tables("Chi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property To_Khai_Hai_Quan_Xuat As To_Khai_Hai_Quan_XuatDataTable
        Get
            Return Me.tableTo_Khai_Hai_Quan_Xuat
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Chi_Tiet_To_Khai_Hai_Quan_Xuat As Chi_Tiet_To_Khai_Hai_Quan_XuatDataTable
        Get
            Return Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Chi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanDataTable
        Get
            Return Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsKiem_Hoa = CType(MyBase.Clone,dsKiem_Hoa)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("To_Khai_Hai_Quan_Xuat")) Is Nothing) Then
            Me.Tables.Add(New To_Khai_Hai_Quan_XuatDataTable(ds.Tables("To_Khai_Hai_Quan_Xuat")))
        End If
        If (Not (ds.Tables("Chi_Tiet_To_Khai_Hai_Quan_Xuat")) Is Nothing) Then
            Me.Tables.Add(New Chi_Tiet_To_Khai_Hai_Quan_XuatDataTable(ds.Tables("Chi_Tiet_To_Khai_Hai_Quan_Xuat")))
        End If
        If (Not (ds.Tables("Chi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan")) Is Nothing) Then
            Me.Tables.Add(New Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanDataTable(ds.Tables("Chi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableTo_Khai_Hai_Quan_Xuat = CType(Me.Tables("To_Khai_Hai_Quan_Xuat"),To_Khai_Hai_Quan_XuatDataTable)
        If (Not (Me.tableTo_Khai_Hai_Quan_Xuat) Is Nothing) Then
            Me.tableTo_Khai_Hai_Quan_Xuat.InitVars
        End If
        Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat = CType(Me.Tables("Chi_Tiet_To_Khai_Hai_Quan_Xuat"),Chi_Tiet_To_Khai_Hai_Quan_XuatDataTable)
        If (Not (Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat) Is Nothing) Then
            Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.InitVars
        End If
        Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan = CType(Me.Tables("Chi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan"),Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanDataTable)
        If (Not (Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan) Is Nothing) Then
            Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsKiem_Hoa"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsKiem_Hoa.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableTo_Khai_Hai_Quan_Xuat = New To_Khai_Hai_Quan_XuatDataTable
        Me.Tables.Add(Me.tableTo_Khai_Hai_Quan_Xuat)
        Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat = New Chi_Tiet_To_Khai_Hai_Quan_XuatDataTable
        Me.Tables.Add(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat)
        Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan = New Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanDataTable
        Me.Tables.Add(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan)
    End Sub
    
    Private Function ShouldSerializeTo_Khai_Hai_Quan_Xuat() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeChi_Tiet_To_Khai_Hai_Quan_Xuat() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub To_Khai_Hai_Quan_XuatRowChangeEventHandler(ByVal sender As Object, ByVal e As To_Khai_Hai_Quan_XuatRowChangeEvent)
    
    Public Delegate Sub Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangeEventHandler(ByVal sender As Object, ByVal e As Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangeEvent)
    
    Public Delegate Sub Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangeEventHandler(ByVal sender As Object, ByVal e As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class To_Khai_Hai_Quan_XuatDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_To_Khai As DataColumn
        
        Private columnSo_TKHQ As DataColumn
        
        Private columnNgay_Khai As DataColumn
        
        Private columnSo_To_Khai_HQ_Cap As DataColumn
        
        Private columnNguoi_Duoc_Uy_Quyen As DataColumn
        
        Private columnNguoi_Gui As DataColumn
        
        Private columnDia_Chi_Gui As DataColumn
        
        Private columnNguoi_Nhan As DataColumn
        
        Private columnDia_Chi_Nhan As DataColumn
        
        Private columnIsPrint As DataColumn
        
        Private columnIsPhuLuc As DataColumn
        
        Private columnGiay_To_Kem_Theo As DataColumn
        
        Private columnTong_So_Tui As DataColumn
        
        Private columnTong_Khoi_Luong As DataColumn
        
        Private columnNgay_CN38 As DataColumn
        
        Private columnGhi_Chu As DataColumn
        
        Private columnThong_Tin_Tai_Lieu As DataColumn
        
        Private columnIsOpen As DataColumn
        
        Friend Sub New()
            MyBase.New("To_Khai_Hai_Quan_Xuat")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_To_KhaiColumn As DataColumn
            Get
                Return Me.columnMa_To_Khai
            End Get
        End Property
        
        Friend ReadOnly Property So_TKHQColumn As DataColumn
            Get
                Return Me.columnSo_TKHQ
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_KhaiColumn As DataColumn
            Get
                Return Me.columnNgay_Khai
            End Get
        End Property
        
        Friend ReadOnly Property So_To_Khai_HQ_CapColumn As DataColumn
            Get
                Return Me.columnSo_To_Khai_HQ_Cap
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_Duoc_Uy_QuyenColumn As DataColumn
            Get
                Return Me.columnNguoi_Duoc_Uy_Quyen
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_GuiColumn As DataColumn
            Get
                Return Me.columnNguoi_Gui
            End Get
        End Property
        
        Friend ReadOnly Property Dia_Chi_GuiColumn As DataColumn
            Get
                Return Me.columnDia_Chi_Gui
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_NhanColumn As DataColumn
            Get
                Return Me.columnNguoi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Dia_Chi_NhanColumn As DataColumn
            Get
                Return Me.columnDia_Chi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property IsPrintColumn As DataColumn
            Get
                Return Me.columnIsPrint
            End Get
        End Property
        
        Friend ReadOnly Property IsPhuLucColumn As DataColumn
            Get
                Return Me.columnIsPhuLuc
            End Get
        End Property
        
        Friend ReadOnly Property Giay_To_Kem_TheoColumn As DataColumn
            Get
                Return Me.columnGiay_To_Kem_Theo
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_TuiColumn As DataColumn
            Get
                Return Me.columnTong_So_Tui
            End Get
        End Property
        
        Friend ReadOnly Property Tong_Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnTong_Khoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_CN38Column As DataColumn
            Get
                Return Me.columnNgay_CN38
            End Get
        End Property
        
        Friend ReadOnly Property Ghi_ChuColumn As DataColumn
            Get
                Return Me.columnGhi_Chu
            End Get
        End Property
        
        Friend ReadOnly Property Thong_Tin_Tai_LieuColumn As DataColumn
            Get
                Return Me.columnThong_Tin_Tai_Lieu
            End Get
        End Property
        
        Friend ReadOnly Property IsOpenColumn As DataColumn
            Get
                Return Me.columnIsOpen
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As To_Khai_Hai_Quan_XuatRow
            Get
                Return CType(Me.Rows(index),To_Khai_Hai_Quan_XuatRow)
            End Get
        End Property
        
        Public Event To_Khai_Hai_Quan_XuatRowChanged As To_Khai_Hai_Quan_XuatRowChangeEventHandler
        
        Public Event To_Khai_Hai_Quan_XuatRowChanging As To_Khai_Hai_Quan_XuatRowChangeEventHandler
        
        Public Event To_Khai_Hai_Quan_XuatRowDeleted As To_Khai_Hai_Quan_XuatRowChangeEventHandler
        
        Public Event To_Khai_Hai_Quan_XuatRowDeleting As To_Khai_Hai_Quan_XuatRowChangeEventHandler
        
        Public Overloads Sub AddTo_Khai_Hai_Quan_XuatRow(ByVal row As To_Khai_Hai_Quan_XuatRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTo_Khai_Hai_Quan_XuatRow( _
                    ByVal Ma_To_Khai As String,  _
                    ByVal So_TKHQ As Integer,  _
                    ByVal Ngay_Khai As Date,  _
                    ByVal So_To_Khai_HQ_Cap As String,  _
                    ByVal Nguoi_Duoc_Uy_Quyen As String,  _
                    ByVal Nguoi_Gui As String,  _
                    ByVal Dia_Chi_Gui As String,  _
                    ByVal Nguoi_Nhan As String,  _
                    ByVal Dia_Chi_Nhan As String,  _
                    ByVal IsPrint As Boolean,  _
                    ByVal IsPhuLuc As Boolean,  _
                    ByVal Giay_To_Kem_Theo As String,  _
                    ByVal Tong_So_Tui As Integer,  _
                    ByVal Tong_Khoi_Luong As Decimal,  _
                    ByVal Ngay_CN38 As Date,  _
                    ByVal Ghi_Chu As String,  _
                    ByVal Thong_Tin_Tai_Lieu As String,  _
                    ByVal IsOpen As Boolean) As To_Khai_Hai_Quan_XuatRow
            Dim rowTo_Khai_Hai_Quan_XuatRow As To_Khai_Hai_Quan_XuatRow = CType(Me.NewRow,To_Khai_Hai_Quan_XuatRow)
            rowTo_Khai_Hai_Quan_XuatRow.ItemArray = New Object() {Ma_To_Khai, So_TKHQ, Ngay_Khai, So_To_Khai_HQ_Cap, Nguoi_Duoc_Uy_Quyen, Nguoi_Gui, Dia_Chi_Gui, Nguoi_Nhan, Dia_Chi_Nhan, IsPrint, IsPhuLuc, Giay_To_Kem_Theo, Tong_So_Tui, Tong_Khoi_Luong, Ngay_CN38, Ghi_Chu, Thong_Tin_Tai_Lieu, IsOpen}
            Me.Rows.Add(rowTo_Khai_Hai_Quan_XuatRow)
            Return rowTo_Khai_Hai_Quan_XuatRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As To_Khai_Hai_Quan_XuatDataTable = CType(MyBase.Clone,To_Khai_Hai_Quan_XuatDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New To_Khai_Hai_Quan_XuatDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_To_Khai = Me.Columns("Ma_To_Khai")
            Me.columnSo_TKHQ = Me.Columns("So_TKHQ")
            Me.columnNgay_Khai = Me.Columns("Ngay_Khai")
            Me.columnSo_To_Khai_HQ_Cap = Me.Columns("So_To_Khai_HQ_Cap")
            Me.columnNguoi_Duoc_Uy_Quyen = Me.Columns("Nguoi_Duoc_Uy_Quyen")
            Me.columnNguoi_Gui = Me.Columns("Nguoi_Gui")
            Me.columnDia_Chi_Gui = Me.Columns("Dia_Chi_Gui")
            Me.columnNguoi_Nhan = Me.Columns("Nguoi_Nhan")
            Me.columnDia_Chi_Nhan = Me.Columns("Dia_Chi_Nhan")
            Me.columnIsPrint = Me.Columns("IsPrint")
            Me.columnIsPhuLuc = Me.Columns("IsPhuLuc")
            Me.columnGiay_To_Kem_Theo = Me.Columns("Giay_To_Kem_Theo")
            Me.columnTong_So_Tui = Me.Columns("Tong_So_Tui")
            Me.columnTong_Khoi_Luong = Me.Columns("Tong_Khoi_Luong")
            Me.columnNgay_CN38 = Me.Columns("Ngay_CN38")
            Me.columnGhi_Chu = Me.Columns("Ghi_Chu")
            Me.columnThong_Tin_Tai_Lieu = Me.Columns("Thong_Tin_Tai_Lieu")
            Me.columnIsOpen = Me.Columns("IsOpen")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_To_Khai = New DataColumn("Ma_To_Khai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_To_Khai)
            Me.columnSo_TKHQ = New DataColumn("So_TKHQ", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_TKHQ)
            Me.columnNgay_Khai = New DataColumn("Ngay_Khai", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Khai)
            Me.columnSo_To_Khai_HQ_Cap = New DataColumn("So_To_Khai_HQ_Cap", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_To_Khai_HQ_Cap)
            Me.columnNguoi_Duoc_Uy_Quyen = New DataColumn("Nguoi_Duoc_Uy_Quyen", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Duoc_Uy_Quyen)
            Me.columnNguoi_Gui = New DataColumn("Nguoi_Gui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Gui)
            Me.columnDia_Chi_Gui = New DataColumn("Dia_Chi_Gui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia_Chi_Gui)
            Me.columnNguoi_Nhan = New DataColumn("Nguoi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Nhan)
            Me.columnDia_Chi_Nhan = New DataColumn("Dia_Chi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia_Chi_Nhan)
            Me.columnIsPrint = New DataColumn("IsPrint", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsPrint)
            Me.columnIsPhuLuc = New DataColumn("IsPhuLuc", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsPhuLuc)
            Me.columnGiay_To_Kem_Theo = New DataColumn("Giay_To_Kem_Theo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGiay_To_Kem_Theo)
            Me.columnTong_So_Tui = New DataColumn("Tong_So_Tui", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_Tui)
            Me.columnTong_Khoi_Luong = New DataColumn("Tong_Khoi_Luong", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Khoi_Luong)
            Me.columnNgay_CN38 = New DataColumn("Ngay_CN38", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_CN38)
            Me.columnGhi_Chu = New DataColumn("Ghi_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGhi_Chu)
            Me.columnThong_Tin_Tai_Lieu = New DataColumn("Thong_Tin_Tai_Lieu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThong_Tin_Tai_Lieu)
            Me.columnIsOpen = New DataColumn("IsOpen", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsOpen)
        End Sub
        
        Public Function NewTo_Khai_Hai_Quan_XuatRow() As To_Khai_Hai_Quan_XuatRow
            Return CType(Me.NewRow,To_Khai_Hai_Quan_XuatRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New To_Khai_Hai_Quan_XuatRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(To_Khai_Hai_Quan_XuatRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.To_Khai_Hai_Quan_XuatRowChangedEvent) Is Nothing) Then
                RaiseEvent To_Khai_Hai_Quan_XuatRowChanged(Me, New To_Khai_Hai_Quan_XuatRowChangeEvent(CType(e.Row,To_Khai_Hai_Quan_XuatRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.To_Khai_Hai_Quan_XuatRowChangingEvent) Is Nothing) Then
                RaiseEvent To_Khai_Hai_Quan_XuatRowChanging(Me, New To_Khai_Hai_Quan_XuatRowChangeEvent(CType(e.Row,To_Khai_Hai_Quan_XuatRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.To_Khai_Hai_Quan_XuatRowDeletedEvent) Is Nothing) Then
                RaiseEvent To_Khai_Hai_Quan_XuatRowDeleted(Me, New To_Khai_Hai_Quan_XuatRowChangeEvent(CType(e.Row,To_Khai_Hai_Quan_XuatRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.To_Khai_Hai_Quan_XuatRowDeletingEvent) Is Nothing) Then
                RaiseEvent To_Khai_Hai_Quan_XuatRowDeleting(Me, New To_Khai_Hai_Quan_XuatRowChangeEvent(CType(e.Row,To_Khai_Hai_Quan_XuatRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTo_Khai_Hai_Quan_XuatRow(ByVal row As To_Khai_Hai_Quan_XuatRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class To_Khai_Hai_Quan_XuatRow
        Inherits DataRow
        
        Private tableTo_Khai_Hai_Quan_Xuat As To_Khai_Hai_Quan_XuatDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTo_Khai_Hai_Quan_Xuat = CType(Me.Table,To_Khai_Hai_Quan_XuatDataTable)
        End Sub
        
        Public Property Ma_To_Khai As String
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Ma_To_KhaiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Ma_To_KhaiColumn) = value
            End Set
        End Property
        
        Public Property So_TKHQ As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.So_TKHQColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.So_TKHQColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Khai As Date
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Ngay_KhaiColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Ngay_KhaiColumn) = value
            End Set
        End Property
        
        Public Property So_To_Khai_HQ_Cap As String
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.So_To_Khai_HQ_CapColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.So_To_Khai_HQ_CapColumn) = value
            End Set
        End Property
        
        Public Property Nguoi_Duoc_Uy_Quyen As String
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Nguoi_Duoc_Uy_QuyenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Nguoi_Duoc_Uy_QuyenColumn) = value
            End Set
        End Property
        
        Public Property Nguoi_Gui As String
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Nguoi_GuiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Nguoi_GuiColumn) = value
            End Set
        End Property
        
        Public Property Dia_Chi_Gui As String
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Dia_Chi_GuiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Dia_Chi_GuiColumn) = value
            End Set
        End Property
        
        Public Property Nguoi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Nguoi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Nguoi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Dia_Chi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Dia_Chi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Dia_Chi_NhanColumn) = value
            End Set
        End Property
        
        Public Property IsPrint As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.IsPrintColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.IsPrintColumn) = value
            End Set
        End Property
        
        Public Property IsPhuLuc As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.IsPhuLucColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.IsPhuLucColumn) = value
            End Set
        End Property
        
        Public Property Giay_To_Kem_Theo As String
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Giay_To_Kem_TheoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Giay_To_Kem_TheoColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_Tui As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Tong_So_TuiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Tong_So_TuiColumn) = value
            End Set
        End Property
        
        Public Property Tong_Khoi_Luong As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Tong_Khoi_LuongColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Tong_Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Ngay_CN38 As Date
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Ngay_CN38Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Ngay_CN38Column) = value
            End Set
        End Property
        
        Public Property Ghi_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Ghi_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Ghi_ChuColumn) = value
            End Set
        End Property
        
        Public Property Thong_Tin_Tai_Lieu As String
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.Thong_Tin_Tai_LieuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.Thong_Tin_Tai_LieuColumn) = value
            End Set
        End Property
        
        Public Property IsOpen As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTo_Khai_Hai_Quan_Xuat.IsOpenColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTo_Khai_Hai_Quan_Xuat.IsOpenColumn) = value
            End Set
        End Property
        
        Public Function IsMa_To_KhaiNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Ma_To_KhaiColumn)
        End Function
        
        Public Sub SetMa_To_KhaiNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Ma_To_KhaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_TKHQNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.So_TKHQColumn)
        End Function
        
        Public Sub SetSo_TKHQNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.So_TKHQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_KhaiNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Ngay_KhaiColumn)
        End Function
        
        Public Sub SetNgay_KhaiNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Ngay_KhaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_To_Khai_HQ_CapNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.So_To_Khai_HQ_CapColumn)
        End Function
        
        Public Sub SetSo_To_Khai_HQ_CapNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.So_To_Khai_HQ_CapColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_Duoc_Uy_QuyenNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Nguoi_Duoc_Uy_QuyenColumn)
        End Function
        
        Public Sub SetNguoi_Duoc_Uy_QuyenNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Nguoi_Duoc_Uy_QuyenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_GuiNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Nguoi_GuiColumn)
        End Function
        
        Public Sub SetNguoi_GuiNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Nguoi_GuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDia_Chi_GuiNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Dia_Chi_GuiColumn)
        End Function
        
        Public Sub SetDia_Chi_GuiNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Dia_Chi_GuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Nguoi_NhanColumn)
        End Function
        
        Public Sub SetNguoi_NhanNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Nguoi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDia_Chi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Dia_Chi_NhanColumn)
        End Function
        
        Public Sub SetDia_Chi_NhanNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Dia_Chi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsPrintNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.IsPrintColumn)
        End Function
        
        Public Sub SetIsPrintNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.IsPrintColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsPhuLucNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.IsPhuLucColumn)
        End Function
        
        Public Sub SetIsPhuLucNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.IsPhuLucColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGiay_To_Kem_TheoNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Giay_To_Kem_TheoColumn)
        End Function
        
        Public Sub SetGiay_To_Kem_TheoNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Giay_To_Kem_TheoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_TuiNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Tong_So_TuiColumn)
        End Function
        
        Public Sub SetTong_So_TuiNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Tong_So_TuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_Khoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Tong_Khoi_LuongColumn)
        End Function
        
        Public Sub SetTong_Khoi_LuongNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Tong_Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_CN38Null() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Ngay_CN38Column)
        End Function
        
        Public Sub SetNgay_CN38Null()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Ngay_CN38Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsGhi_ChuNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Ghi_ChuColumn)
        End Function
        
        Public Sub SetGhi_ChuNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Ghi_ChuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThong_Tin_Tai_LieuNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.Thong_Tin_Tai_LieuColumn)
        End Function
        
        Public Sub SetThong_Tin_Tai_LieuNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.Thong_Tin_Tai_LieuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsOpenNull() As Boolean
            Return Me.IsNull(Me.tableTo_Khai_Hai_Quan_Xuat.IsOpenColumn)
        End Function
        
        Public Sub SetIsOpenNull()
            Me(Me.tableTo_Khai_Hai_Quan_Xuat.IsOpenColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class To_Khai_Hai_Quan_XuatRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As To_Khai_Hai_Quan_XuatRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As To_Khai_Hai_Quan_XuatRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As To_Khai_Hai_Quan_XuatRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chi_Tiet_To_Khai_Hai_Quan_XuatDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTT As DataColumn
        
        Private columnMa_E1 As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnNguoi_Gui As DataColumn
        
        Private columnDia_Chi_Gui As DataColumn
        
        Private columnNguoi_Nhan As DataColumn
        
        Private columnDia_Chi_Nhan As DataColumn
        
        Private columnTen_Hang_Hoa As DataColumn
        
        Private columnXuat_Xu As DataColumn
        
        Private columnLuong_Hang As DataColumn
        
        Private columnDon_Vi_Tinh As DataColumn
        
        Private columnNuoc_Tra As DataColumn
        
        Private columnGia_Tri_Hang As DataColumn
        
        Private columnMa_Tien_Te As DataColumn
        
        Private columnMa_Hang_Hoa As DataColumn
        
        Friend Sub New()
            MyBase.New("Chi_Tiet_To_Khai_Hai_Quan_Xuat")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STTColumn As DataColumn
            Get
                Return Me.columnSTT
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_GuiColumn As DataColumn
            Get
                Return Me.columnNguoi_Gui
            End Get
        End Property
        
        Friend ReadOnly Property Dia_Chi_GuiColumn As DataColumn
            Get
                Return Me.columnDia_Chi_Gui
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_NhanColumn As DataColumn
            Get
                Return Me.columnNguoi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Dia_Chi_NhanColumn As DataColumn
            Get
                Return Me.columnDia_Chi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Hang_HoaColumn As DataColumn
            Get
                Return Me.columnTen_Hang_Hoa
            End Get
        End Property
        
        Friend ReadOnly Property Xuat_XuColumn As DataColumn
            Get
                Return Me.columnXuat_Xu
            End Get
        End Property
        
        Friend ReadOnly Property Luong_HangColumn As DataColumn
            Get
                Return Me.columnLuong_Hang
            End Get
        End Property
        
        Friend ReadOnly Property Don_Vi_TinhColumn As DataColumn
            Get
                Return Me.columnDon_Vi_Tinh
            End Get
        End Property
        
        Friend ReadOnly Property Nuoc_TraColumn As DataColumn
            Get
                Return Me.columnNuoc_Tra
            End Get
        End Property
        
        Friend ReadOnly Property Gia_Tri_HangColumn As DataColumn
            Get
                Return Me.columnGia_Tri_Hang
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Tien_TeColumn As DataColumn
            Get
                Return Me.columnMa_Tien_Te
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Hang_HoaColumn As DataColumn
            Get
                Return Me.columnMa_Hang_Hoa
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Chi_Tiet_To_Khai_Hai_Quan_XuatRow
            Get
                Return CType(Me.Rows(index),Chi_Tiet_To_Khai_Hai_Quan_XuatRow)
            End Get
        End Property
        
        Public Event Chi_Tiet_To_Khai_Hai_Quan_XuatRowChanged As Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangeEventHandler
        
        Public Event Chi_Tiet_To_Khai_Hai_Quan_XuatRowChanging As Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangeEventHandler
        
        Public Event Chi_Tiet_To_Khai_Hai_Quan_XuatRowDeleted As Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangeEventHandler
        
        Public Event Chi_Tiet_To_Khai_Hai_Quan_XuatRowDeleting As Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangeEventHandler
        
        Public Overloads Sub AddChi_Tiet_To_Khai_Hai_Quan_XuatRow(ByVal row As Chi_Tiet_To_Khai_Hai_Quan_XuatRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddChi_Tiet_To_Khai_Hai_Quan_XuatRow(ByVal STT As Integer, ByVal Ma_E1 As String, ByVal Khoi_Luong As Integer, ByVal Nguoi_Gui As String, ByVal Dia_Chi_Gui As String, ByVal Nguoi_Nhan As String, ByVal Dia_Chi_Nhan As String, ByVal Ten_Hang_Hoa As String, ByVal Xuat_Xu As String, ByVal Luong_Hang As Decimal, ByVal Don_Vi_Tinh As String, ByVal Nuoc_Tra As String, ByVal Gia_Tri_Hang As Single, ByVal Ma_Tien_Te As String, ByVal Ma_Hang_Hoa As String) As Chi_Tiet_To_Khai_Hai_Quan_XuatRow
            Dim rowChi_Tiet_To_Khai_Hai_Quan_XuatRow As Chi_Tiet_To_Khai_Hai_Quan_XuatRow = CType(Me.NewRow,Chi_Tiet_To_Khai_Hai_Quan_XuatRow)
            rowChi_Tiet_To_Khai_Hai_Quan_XuatRow.ItemArray = New Object() {STT, Ma_E1, Khoi_Luong, Nguoi_Gui, Dia_Chi_Gui, Nguoi_Nhan, Dia_Chi_Nhan, Ten_Hang_Hoa, Xuat_Xu, Luong_Hang, Don_Vi_Tinh, Nuoc_Tra, Gia_Tri_Hang, Ma_Tien_Te, Ma_Hang_Hoa}
            Me.Rows.Add(rowChi_Tiet_To_Khai_Hai_Quan_XuatRow)
            Return rowChi_Tiet_To_Khai_Hai_Quan_XuatRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Chi_Tiet_To_Khai_Hai_Quan_XuatDataTable = CType(MyBase.Clone,Chi_Tiet_To_Khai_Hai_Quan_XuatDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Chi_Tiet_To_Khai_Hai_Quan_XuatDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTT = Me.Columns("STT")
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnNguoi_Gui = Me.Columns("Nguoi_Gui")
            Me.columnDia_Chi_Gui = Me.Columns("Dia_Chi_Gui")
            Me.columnNguoi_Nhan = Me.Columns("Nguoi_Nhan")
            Me.columnDia_Chi_Nhan = Me.Columns("Dia_Chi_Nhan")
            Me.columnTen_Hang_Hoa = Me.Columns("Ten_Hang_Hoa")
            Me.columnXuat_Xu = Me.Columns("Xuat_Xu")
            Me.columnLuong_Hang = Me.Columns("Luong_Hang")
            Me.columnDon_Vi_Tinh = Me.Columns("Don_Vi_Tinh")
            Me.columnNuoc_Tra = Me.Columns("Nuoc_Tra")
            Me.columnGia_Tri_Hang = Me.Columns("Gia_Tri_Hang")
            Me.columnMa_Tien_Te = Me.Columns("Ma_Tien_Te")
            Me.columnMa_Hang_Hoa = Me.Columns("Ma_Hang_Hoa")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTT = New DataColumn("STT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT)
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnNguoi_Gui = New DataColumn("Nguoi_Gui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Gui)
            Me.columnDia_Chi_Gui = New DataColumn("Dia_Chi_Gui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia_Chi_Gui)
            Me.columnNguoi_Nhan = New DataColumn("Nguoi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Nhan)
            Me.columnDia_Chi_Nhan = New DataColumn("Dia_Chi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia_Chi_Nhan)
            Me.columnTen_Hang_Hoa = New DataColumn("Ten_Hang_Hoa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Hang_Hoa)
            Me.columnXuat_Xu = New DataColumn("Xuat_Xu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnXuat_Xu)
            Me.columnLuong_Hang = New DataColumn("Luong_Hang", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLuong_Hang)
            Me.columnDon_Vi_Tinh = New DataColumn("Don_Vi_Tinh", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDon_Vi_Tinh)
            Me.columnNuoc_Tra = New DataColumn("Nuoc_Tra", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNuoc_Tra)
            Me.columnGia_Tri_Hang = New DataColumn("Gia_Tri_Hang", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGia_Tri_Hang)
            Me.columnMa_Tien_Te = New DataColumn("Ma_Tien_Te", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Tien_Te)
            Me.columnMa_Hang_Hoa = New DataColumn("Ma_Hang_Hoa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Hang_Hoa)
            Me.columnMa_Hang_Hoa.AllowDBNull = false
        End Sub
        
        Public Function NewChi_Tiet_To_Khai_Hai_Quan_XuatRow() As Chi_Tiet_To_Khai_Hai_Quan_XuatRow
            Return CType(Me.NewRow,Chi_Tiet_To_Khai_Hai_Quan_XuatRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Chi_Tiet_To_Khai_Hai_Quan_XuatRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Chi_Tiet_To_Khai_Hai_Quan_XuatRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangedEvent) Is Nothing) Then
                RaiseEvent Chi_Tiet_To_Khai_Hai_Quan_XuatRowChanged(Me, New Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangeEvent(CType(e.Row,Chi_Tiet_To_Khai_Hai_Quan_XuatRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangingEvent) Is Nothing) Then
                RaiseEvent Chi_Tiet_To_Khai_Hai_Quan_XuatRowChanging(Me, New Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangeEvent(CType(e.Row,Chi_Tiet_To_Khai_Hai_Quan_XuatRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Chi_Tiet_To_Khai_Hai_Quan_XuatRowDeletedEvent) Is Nothing) Then
                RaiseEvent Chi_Tiet_To_Khai_Hai_Quan_XuatRowDeleted(Me, New Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangeEvent(CType(e.Row,Chi_Tiet_To_Khai_Hai_Quan_XuatRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Chi_Tiet_To_Khai_Hai_Quan_XuatRowDeletingEvent) Is Nothing) Then
                RaiseEvent Chi_Tiet_To_Khai_Hai_Quan_XuatRowDeleting(Me, New Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangeEvent(CType(e.Row,Chi_Tiet_To_Khai_Hai_Quan_XuatRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveChi_Tiet_To_Khai_Hai_Quan_XuatRow(ByVal row As Chi_Tiet_To_Khai_Hai_Quan_XuatRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chi_Tiet_To_Khai_Hai_Quan_XuatRow
        Inherits DataRow
        
        Private tableChi_Tiet_To_Khai_Hai_Quan_Xuat As Chi_Tiet_To_Khai_Hai_Quan_XuatDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat = CType(Me.Table,Chi_Tiet_To_Khai_Hai_Quan_XuatDataTable)
        End Sub
        
        Public Property STT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.STTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.STTColumn) = value
            End Set
        End Property
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Nguoi_Gui As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Nguoi_GuiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Nguoi_GuiColumn) = value
            End Set
        End Property
        
        Public Property Dia_Chi_Gui As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Dia_Chi_GuiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Dia_Chi_GuiColumn) = value
            End Set
        End Property
        
        Public Property Nguoi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Nguoi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Nguoi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Dia_Chi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Dia_Chi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Dia_Chi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Ten_Hang_Hoa As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ten_Hang_HoaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ten_Hang_HoaColumn) = value
            End Set
        End Property
        
        Public Property Xuat_Xu As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Xuat_XuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Xuat_XuColumn) = value
            End Set
        End Property
        
        Public Property Luong_Hang As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Luong_HangColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Luong_HangColumn) = value
            End Set
        End Property
        
        Public Property Don_Vi_Tinh As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Don_Vi_TinhColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Don_Vi_TinhColumn) = value
            End Set
        End Property
        
        Public Property Nuoc_Tra As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Nuoc_TraColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Nuoc_TraColumn) = value
            End Set
        End Property
        
        Public Property Gia_Tri_Hang As Single
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Gia_Tri_HangColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Gia_Tri_HangColumn) = value
            End Set
        End Property
        
        Public Property Ma_Tien_Te As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ma_Tien_TeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ma_Tien_TeColumn) = value
            End Set
        End Property
        
        Public Property Ma_Hang_Hoa As String
            Get
                Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ma_Hang_HoaColumn),String)
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ma_Hang_HoaColumn) = value
            End Set
        End Property
        
        Public Function IsSTTNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.STTColumn)
        End Function
        
        Public Sub SetSTTNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.STTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_GuiNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Nguoi_GuiColumn)
        End Function
        
        Public Sub SetNguoi_GuiNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Nguoi_GuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDia_Chi_GuiNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Dia_Chi_GuiColumn)
        End Function
        
        Public Sub SetDia_Chi_GuiNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Dia_Chi_GuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Nguoi_NhanColumn)
        End Function
        
        Public Sub SetNguoi_NhanNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Nguoi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDia_Chi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Dia_Chi_NhanColumn)
        End Function
        
        Public Sub SetDia_Chi_NhanNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Dia_Chi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Hang_HoaNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ten_Hang_HoaColumn)
        End Function
        
        Public Sub SetTen_Hang_HoaNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ten_Hang_HoaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsXuat_XuNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Xuat_XuColumn)
        End Function
        
        Public Sub SetXuat_XuNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Xuat_XuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLuong_HangNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Luong_HangColumn)
        End Function
        
        Public Sub SetLuong_HangNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Luong_HangColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDon_Vi_TinhNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Don_Vi_TinhColumn)
        End Function
        
        Public Sub SetDon_Vi_TinhNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Don_Vi_TinhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNuoc_TraNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Nuoc_TraColumn)
        End Function
        
        Public Sub SetNuoc_TraNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Nuoc_TraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGia_Tri_HangNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Gia_Tri_HangColumn)
        End Function
        
        Public Sub SetGia_Tri_HangNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Gia_Tri_HangColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Tien_TeNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ma_Tien_TeColumn)
        End Function
        
        Public Sub SetMa_Tien_TeNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Xuat.Ma_Tien_TeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chi_Tiet_To_Khai_Hai_Quan_XuatRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Chi_Tiet_To_Khai_Hai_Quan_XuatRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Chi_Tiet_To_Khai_Hai_Quan_XuatRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Chi_Tiet_To_Khai_Hai_Quan_XuatRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTT As DataColumn
        
        Private columnMa_E1 As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnNguoi_Gui As DataColumn
        
        Private columnDia_Chi_Gui As DataColumn
        
        Private columnNguoi_Nhan As DataColumn
        
        Private columnDia_Chi_Nhan As DataColumn
        
        Private columnTen_Hang_Hoa As DataColumn
        
        Private columnXuat_Xu As DataColumn
        
        Private columnLuong_Hang As DataColumn
        
        Private columnDon_Vi_Tinh As DataColumn
        
        Private columnNuoc_Tra As DataColumn
        
        Private columnGia_Tri_Hang As DataColumn
        
        Private columnMa_Tien_Te As DataColumn
        
        Private columnMa_Hang_Hoa As DataColumn
        
        Private columnGhi_Chu As DataColumn
        
        Friend Sub New()
            MyBase.New("Chi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STTColumn As DataColumn
            Get
                Return Me.columnSTT
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_GuiColumn As DataColumn
            Get
                Return Me.columnNguoi_Gui
            End Get
        End Property
        
        Friend ReadOnly Property Dia_Chi_GuiColumn As DataColumn
            Get
                Return Me.columnDia_Chi_Gui
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_NhanColumn As DataColumn
            Get
                Return Me.columnNguoi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Dia_Chi_NhanColumn As DataColumn
            Get
                Return Me.columnDia_Chi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Hang_HoaColumn As DataColumn
            Get
                Return Me.columnTen_Hang_Hoa
            End Get
        End Property
        
        Friend ReadOnly Property Xuat_XuColumn As DataColumn
            Get
                Return Me.columnXuat_Xu
            End Get
        End Property
        
        Friend ReadOnly Property Luong_HangColumn As DataColumn
            Get
                Return Me.columnLuong_Hang
            End Get
        End Property
        
        Friend ReadOnly Property Don_Vi_TinhColumn As DataColumn
            Get
                Return Me.columnDon_Vi_Tinh
            End Get
        End Property
        
        Friend ReadOnly Property Nuoc_TraColumn As DataColumn
            Get
                Return Me.columnNuoc_Tra
            End Get
        End Property
        
        Friend ReadOnly Property Gia_Tri_HangColumn As DataColumn
            Get
                Return Me.columnGia_Tri_Hang
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Tien_TeColumn As DataColumn
            Get
                Return Me.columnMa_Tien_Te
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Hang_HoaColumn As DataColumn
            Get
                Return Me.columnMa_Hang_Hoa
            End Get
        End Property
        
        Friend ReadOnly Property Ghi_ChuColumn As DataColumn
            Get
                Return Me.columnGhi_Chu
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow
            Get
                Return CType(Me.Rows(index),Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow)
            End Get
        End Property
        
        Public Event Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChanged As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangeEventHandler
        
        Public Event Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChanging As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangeEventHandler
        
        Public Event Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowDeleted As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangeEventHandler
        
        Public Event Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowDeleting As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangeEventHandler
        
        Public Overloads Sub AddChi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow(ByVal row As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddChi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow( _
                    ByVal STT As Integer,  _
                    ByVal Ma_E1 As String,  _
                    ByVal Khoi_Luong As Integer,  _
                    ByVal Nguoi_Gui As String,  _
                    ByVal Dia_Chi_Gui As String,  _
                    ByVal Nguoi_Nhan As String,  _
                    ByVal Dia_Chi_Nhan As String,  _
                    ByVal Ten_Hang_Hoa As String,  _
                    ByVal Xuat_Xu As String,  _
                    ByVal Luong_Hang As Decimal,  _
                    ByVal Don_Vi_Tinh As String,  _
                    ByVal Nuoc_Tra As String,  _
                    ByVal Gia_Tri_Hang As Single,  _
                    ByVal Ma_Tien_Te As String,  _
                    ByVal Ma_Hang_Hoa As String,  _
                    ByVal Ghi_Chu As String) As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow
            Dim rowChi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow = CType(Me.NewRow,Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow)
            rowChi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow.ItemArray = New Object() {STT, Ma_E1, Khoi_Luong, Nguoi_Gui, Dia_Chi_Gui, Nguoi_Nhan, Dia_Chi_Nhan, Ten_Hang_Hoa, Xuat_Xu, Luong_Hang, Don_Vi_Tinh, Nuoc_Tra, Gia_Tri_Hang, Ma_Tien_Te, Ma_Hang_Hoa, Ghi_Chu}
            Me.Rows.Add(rowChi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow)
            Return rowChi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanDataTable = CType(MyBase.Clone,Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTT = Me.Columns("STT")
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnNguoi_Gui = Me.Columns("Nguoi_Gui")
            Me.columnDia_Chi_Gui = Me.Columns("Dia_Chi_Gui")
            Me.columnNguoi_Nhan = Me.Columns("Nguoi_Nhan")
            Me.columnDia_Chi_Nhan = Me.Columns("Dia_Chi_Nhan")
            Me.columnTen_Hang_Hoa = Me.Columns("Ten_Hang_Hoa")
            Me.columnXuat_Xu = Me.Columns("Xuat_Xu")
            Me.columnLuong_Hang = Me.Columns("Luong_Hang")
            Me.columnDon_Vi_Tinh = Me.Columns("Don_Vi_Tinh")
            Me.columnNuoc_Tra = Me.Columns("Nuoc_Tra")
            Me.columnGia_Tri_Hang = Me.Columns("Gia_Tri_Hang")
            Me.columnMa_Tien_Te = Me.Columns("Ma_Tien_Te")
            Me.columnMa_Hang_Hoa = Me.Columns("Ma_Hang_Hoa")
            Me.columnGhi_Chu = Me.Columns("Ghi_Chu")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTT = New DataColumn("STT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT)
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnNguoi_Gui = New DataColumn("Nguoi_Gui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Gui)
            Me.columnDia_Chi_Gui = New DataColumn("Dia_Chi_Gui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia_Chi_Gui)
            Me.columnNguoi_Nhan = New DataColumn("Nguoi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Nhan)
            Me.columnDia_Chi_Nhan = New DataColumn("Dia_Chi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia_Chi_Nhan)
            Me.columnTen_Hang_Hoa = New DataColumn("Ten_Hang_Hoa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Hang_Hoa)
            Me.columnXuat_Xu = New DataColumn("Xuat_Xu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnXuat_Xu)
            Me.columnLuong_Hang = New DataColumn("Luong_Hang", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLuong_Hang)
            Me.columnDon_Vi_Tinh = New DataColumn("Don_Vi_Tinh", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDon_Vi_Tinh)
            Me.columnNuoc_Tra = New DataColumn("Nuoc_Tra", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNuoc_Tra)
            Me.columnGia_Tri_Hang = New DataColumn("Gia_Tri_Hang", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGia_Tri_Hang)
            Me.columnMa_Tien_Te = New DataColumn("Ma_Tien_Te", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Tien_Te)
            Me.columnMa_Hang_Hoa = New DataColumn("Ma_Hang_Hoa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Hang_Hoa)
            Me.columnGhi_Chu = New DataColumn("Ghi_Chu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGhi_Chu)
            Me.columnMa_Hang_Hoa.AllowDBNull = false
        End Sub
        
        Public Function NewChi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow() As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow
            Return CType(Me.NewRow,Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangedEvent) Is Nothing) Then
                RaiseEvent Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChanged(Me, New Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangeEvent(CType(e.Row,Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangingEvent) Is Nothing) Then
                RaiseEvent Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChanging(Me, New Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangeEvent(CType(e.Row,Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowDeletedEvent) Is Nothing) Then
                RaiseEvent Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowDeleted(Me, New Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangeEvent(CType(e.Row,Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowDeletingEvent) Is Nothing) Then
                RaiseEvent Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowDeleting(Me, New Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangeEvent(CType(e.Row,Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveChi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow(ByVal row As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow
        Inherits DataRow
        
        Private tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan = CType(Me.Table,Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanDataTable)
        End Sub
        
        Public Property STT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.STTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.STTColumn) = value
            End Set
        End Property
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Nguoi_Gui As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Nguoi_GuiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Nguoi_GuiColumn) = value
            End Set
        End Property
        
        Public Property Dia_Chi_Gui As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Dia_Chi_GuiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Dia_Chi_GuiColumn) = value
            End Set
        End Property
        
        Public Property Nguoi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Nguoi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Nguoi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Dia_Chi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Dia_Chi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Dia_Chi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Ten_Hang_Hoa As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ten_Hang_HoaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ten_Hang_HoaColumn) = value
            End Set
        End Property
        
        Public Property Xuat_Xu As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Xuat_XuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Xuat_XuColumn) = value
            End Set
        End Property
        
        Public Property Luong_Hang As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Luong_HangColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Luong_HangColumn) = value
            End Set
        End Property
        
        Public Property Don_Vi_Tinh As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Don_Vi_TinhColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Don_Vi_TinhColumn) = value
            End Set
        End Property
        
        Public Property Nuoc_Tra As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Nuoc_TraColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Nuoc_TraColumn) = value
            End Set
        End Property
        
        Public Property Gia_Tri_Hang As Single
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Gia_Tri_HangColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Gia_Tri_HangColumn) = value
            End Set
        End Property
        
        Public Property Ma_Tien_Te As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ma_Tien_TeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ma_Tien_TeColumn) = value
            End Set
        End Property
        
        Public Property Ma_Hang_Hoa As String
            Get
                Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ma_Hang_HoaColumn),String)
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ma_Hang_HoaColumn) = value
            End Set
        End Property
        
        Public Property Ghi_Chu As String
            Get
                Try 
                    Return CType(Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ghi_ChuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ghi_ChuColumn) = value
            End Set
        End Property
        
        Public Function IsSTTNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.STTColumn)
        End Function
        
        Public Sub SetSTTNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.STTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_GuiNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Nguoi_GuiColumn)
        End Function
        
        Public Sub SetNguoi_GuiNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Nguoi_GuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDia_Chi_GuiNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Dia_Chi_GuiColumn)
        End Function
        
        Public Sub SetDia_Chi_GuiNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Dia_Chi_GuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Nguoi_NhanColumn)
        End Function
        
        Public Sub SetNguoi_NhanNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Nguoi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDia_Chi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Dia_Chi_NhanColumn)
        End Function
        
        Public Sub SetDia_Chi_NhanNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Dia_Chi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Hang_HoaNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ten_Hang_HoaColumn)
        End Function
        
        Public Sub SetTen_Hang_HoaNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ten_Hang_HoaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsXuat_XuNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Xuat_XuColumn)
        End Function
        
        Public Sub SetXuat_XuNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Xuat_XuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLuong_HangNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Luong_HangColumn)
        End Function
        
        Public Sub SetLuong_HangNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Luong_HangColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDon_Vi_TinhNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Don_Vi_TinhColumn)
        End Function
        
        Public Sub SetDon_Vi_TinhNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Don_Vi_TinhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNuoc_TraNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Nuoc_TraColumn)
        End Function
        
        Public Sub SetNuoc_TraNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Nuoc_TraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGia_Tri_HangNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Gia_Tri_HangColumn)
        End Function
        
        Public Sub SetGia_Tri_HangNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Gia_Tri_HangColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Tien_TeNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ma_Tien_TeColumn)
        End Function
        
        Public Sub SetMa_Tien_TeNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ma_Tien_TeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGhi_ChuNull() As Boolean
            Return Me.IsNull(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ghi_ChuColumn)
        End Function
        
        Public Sub SetGhi_ChuNull()
            Me(Me.tableChi_Tiet_To_Khai_Hai_Quan_Chuyen_Hoan.Ghi_ChuColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Chi_Tiet_To_Khai_Hai_Quan_Chuyen_HoanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
