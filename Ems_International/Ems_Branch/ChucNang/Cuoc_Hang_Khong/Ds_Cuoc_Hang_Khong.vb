'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Ds_Cuoc_Hang_Khong
    Inherits DataSet
    
    Private tableBang_Ke_Tong_Hop_Cuoc_HK As Bang_Ke_Tong_Hop_Cuoc_HKDataTable
    
    Private tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Bang_Ke_Tong_Hop_Cuoc_HK")) Is Nothing) Then
                Me.Tables.Add(New Bang_Ke_Tong_Hop_Cuoc_HKDataTable(ds.Tables("Bang_Ke_Tong_Hop_Cuoc_HK")))
            End If
            If (Not (ds.Tables("Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC")) Is Nothing) Then
                Me.Tables.Add(New Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCDataTable(ds.Tables("Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Bang_Ke_Tong_Hop_Cuoc_HK As Bang_Ke_Tong_Hop_Cuoc_HKDataTable
        Get
            Return Me.tableBang_Ke_Tong_Hop_Cuoc_HK
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCDataTable
        Get
            Return Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Ds_Cuoc_Hang_Khong = CType(MyBase.Clone,Ds_Cuoc_Hang_Khong)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Bang_Ke_Tong_Hop_Cuoc_HK")) Is Nothing) Then
            Me.Tables.Add(New Bang_Ke_Tong_Hop_Cuoc_HKDataTable(ds.Tables("Bang_Ke_Tong_Hop_Cuoc_HK")))
        End If
        If (Not (ds.Tables("Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC")) Is Nothing) Then
            Me.Tables.Add(New Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCDataTable(ds.Tables("Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBang_Ke_Tong_Hop_Cuoc_HK = CType(Me.Tables("Bang_Ke_Tong_Hop_Cuoc_HK"),Bang_Ke_Tong_Hop_Cuoc_HKDataTable)
        If (Not (Me.tableBang_Ke_Tong_Hop_Cuoc_HK) Is Nothing) Then
            Me.tableBang_Ke_Tong_Hop_Cuoc_HK.InitVars
        End If
        Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC = CType(Me.Tables("Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC"),Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCDataTable)
        If (Not (Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC) Is Nothing) Then
            Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Ds_Cuoc_Hang_Khong"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Ds_Cuoc_Hang_Khong.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBang_Ke_Tong_Hop_Cuoc_HK = New Bang_Ke_Tong_Hop_Cuoc_HKDataTable
        Me.Tables.Add(Me.tableBang_Ke_Tong_Hop_Cuoc_HK)
        Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC = New Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCDataTable
        Me.Tables.Add(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC)
    End Sub
    
    Private Function ShouldSerializeBang_Ke_Tong_Hop_Cuoc_HK() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Bang_Ke_Tong_Hop_Cuoc_HKRowChangeEventHandler(ByVal sender As Object, ByVal e As Bang_Ke_Tong_Hop_Cuoc_HKRowChangeEvent)
    
    Public Delegate Sub Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangeEventHandler(ByVal sender As Object, ByVal e As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Bang_Ke_Tong_Hop_Cuoc_HKDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHanh_Trinh As DataColumn
        
        Private columnTong_So_Tui As DataColumn
        
        Private columnTrong_Luong As DataColumn
        
        Private columnDon_Gia As DataColumn
        
        Private columnTong_Tien As DataColumn
        
        Friend Sub New()
            MyBase.New("Bang_Ke_Tong_Hop_Cuoc_HK")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Hanh_TrinhColumn As DataColumn
            Get
                Return Me.columnHanh_Trinh
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_TuiColumn As DataColumn
            Get
                Return Me.columnTong_So_Tui
            End Get
        End Property
        
        Friend ReadOnly Property Trong_LuongColumn As DataColumn
            Get
                Return Me.columnTrong_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Don_GiaColumn As DataColumn
            Get
                Return Me.columnDon_Gia
            End Get
        End Property
        
        Friend ReadOnly Property Tong_TienColumn As DataColumn
            Get
                Return Me.columnTong_Tien
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Bang_Ke_Tong_Hop_Cuoc_HKRow
            Get
                Return CType(Me.Rows(index),Bang_Ke_Tong_Hop_Cuoc_HKRow)
            End Get
        End Property
        
        Public Event Bang_Ke_Tong_Hop_Cuoc_HKRowChanged As Bang_Ke_Tong_Hop_Cuoc_HKRowChangeEventHandler
        
        Public Event Bang_Ke_Tong_Hop_Cuoc_HKRowChanging As Bang_Ke_Tong_Hop_Cuoc_HKRowChangeEventHandler
        
        Public Event Bang_Ke_Tong_Hop_Cuoc_HKRowDeleted As Bang_Ke_Tong_Hop_Cuoc_HKRowChangeEventHandler
        
        Public Event Bang_Ke_Tong_Hop_Cuoc_HKRowDeleting As Bang_Ke_Tong_Hop_Cuoc_HKRowChangeEventHandler
        
        Public Overloads Sub AddBang_Ke_Tong_Hop_Cuoc_HKRow(ByVal row As Bang_Ke_Tong_Hop_Cuoc_HKRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBang_Ke_Tong_Hop_Cuoc_HKRow(ByVal Hanh_Trinh As String, ByVal Tong_So_Tui As Integer, ByVal Trong_Luong As Single, ByVal Don_Gia As Single, ByVal Tong_Tien As Single) As Bang_Ke_Tong_Hop_Cuoc_HKRow
            Dim rowBang_Ke_Tong_Hop_Cuoc_HKRow As Bang_Ke_Tong_Hop_Cuoc_HKRow = CType(Me.NewRow,Bang_Ke_Tong_Hop_Cuoc_HKRow)
            rowBang_Ke_Tong_Hop_Cuoc_HKRow.ItemArray = New Object() {Hanh_Trinh, Tong_So_Tui, Trong_Luong, Don_Gia, Tong_Tien}
            Me.Rows.Add(rowBang_Ke_Tong_Hop_Cuoc_HKRow)
            Return rowBang_Ke_Tong_Hop_Cuoc_HKRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Bang_Ke_Tong_Hop_Cuoc_HKDataTable = CType(MyBase.Clone,Bang_Ke_Tong_Hop_Cuoc_HKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Bang_Ke_Tong_Hop_Cuoc_HKDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHanh_Trinh = Me.Columns("Hanh_Trinh")
            Me.columnTong_So_Tui = Me.Columns("Tong_So_Tui")
            Me.columnTrong_Luong = Me.Columns("Trong_Luong")
            Me.columnDon_Gia = Me.Columns("Don_Gia")
            Me.columnTong_Tien = Me.Columns("Tong_Tien")
        End Sub
        
        Private Sub InitClass()
            Me.columnHanh_Trinh = New DataColumn("Hanh_Trinh", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHanh_Trinh)
            Me.columnTong_So_Tui = New DataColumn("Tong_So_Tui", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_Tui)
            Me.columnTrong_Luong = New DataColumn("Trong_Luong", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTrong_Luong)
            Me.columnDon_Gia = New DataColumn("Don_Gia", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDon_Gia)
            Me.columnTong_Tien = New DataColumn("Tong_Tien", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Tien)
        End Sub
        
        Public Function NewBang_Ke_Tong_Hop_Cuoc_HKRow() As Bang_Ke_Tong_Hop_Cuoc_HKRow
            Return CType(Me.NewRow,Bang_Ke_Tong_Hop_Cuoc_HKRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Bang_Ke_Tong_Hop_Cuoc_HKRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Bang_Ke_Tong_Hop_Cuoc_HKRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Bang_Ke_Tong_Hop_Cuoc_HKRowChangedEvent) Is Nothing) Then
                RaiseEvent Bang_Ke_Tong_Hop_Cuoc_HKRowChanged(Me, New Bang_Ke_Tong_Hop_Cuoc_HKRowChangeEvent(CType(e.Row,Bang_Ke_Tong_Hop_Cuoc_HKRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Bang_Ke_Tong_Hop_Cuoc_HKRowChangingEvent) Is Nothing) Then
                RaiseEvent Bang_Ke_Tong_Hop_Cuoc_HKRowChanging(Me, New Bang_Ke_Tong_Hop_Cuoc_HKRowChangeEvent(CType(e.Row,Bang_Ke_Tong_Hop_Cuoc_HKRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Bang_Ke_Tong_Hop_Cuoc_HKRowDeletedEvent) Is Nothing) Then
                RaiseEvent Bang_Ke_Tong_Hop_Cuoc_HKRowDeleted(Me, New Bang_Ke_Tong_Hop_Cuoc_HKRowChangeEvent(CType(e.Row,Bang_Ke_Tong_Hop_Cuoc_HKRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Bang_Ke_Tong_Hop_Cuoc_HKRowDeletingEvent) Is Nothing) Then
                RaiseEvent Bang_Ke_Tong_Hop_Cuoc_HKRowDeleting(Me, New Bang_Ke_Tong_Hop_Cuoc_HKRowChangeEvent(CType(e.Row,Bang_Ke_Tong_Hop_Cuoc_HKRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBang_Ke_Tong_Hop_Cuoc_HKRow(ByVal row As Bang_Ke_Tong_Hop_Cuoc_HKRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Bang_Ke_Tong_Hop_Cuoc_HKRow
        Inherits DataRow
        
        Private tableBang_Ke_Tong_Hop_Cuoc_HK As Bang_Ke_Tong_Hop_Cuoc_HKDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBang_Ke_Tong_Hop_Cuoc_HK = CType(Me.Table,Bang_Ke_Tong_Hop_Cuoc_HKDataTable)
        End Sub
        
        Public Property Hanh_Trinh As String
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Hanh_TrinhColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Hanh_TrinhColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_Tui As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Tong_So_TuiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Tong_So_TuiColumn) = value
            End Set
        End Property
        
        Public Property Trong_Luong As Single
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Trong_LuongColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Trong_LuongColumn) = value
            End Set
        End Property
        
        Public Property Don_Gia As Single
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Don_GiaColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Don_GiaColumn) = value
            End Set
        End Property
        
        Public Property Tong_Tien As Single
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Tong_TienColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Tong_TienColumn) = value
            End Set
        End Property
        
        Public Function IsHanh_TrinhNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Hanh_TrinhColumn)
        End Function
        
        Public Sub SetHanh_TrinhNull()
            Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Hanh_TrinhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_TuiNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Tong_So_TuiColumn)
        End Function
        
        Public Sub SetTong_So_TuiNull()
            Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Tong_So_TuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTrong_LuongNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Trong_LuongColumn)
        End Function
        
        Public Sub SetTrong_LuongNull()
            Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Trong_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDon_GiaNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Don_GiaColumn)
        End Function
        
        Public Sub SetDon_GiaNull()
            Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Don_GiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_TienNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Tong_TienColumn)
        End Function
        
        Public Sub SetTong_TienNull()
            Me(Me.tableBang_Ke_Tong_Hop_Cuoc_HK.Tong_TienColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Bang_Ke_Tong_Hop_Cuoc_HKRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Bang_Ke_Tong_Hop_Cuoc_HKRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Bang_Ke_Tong_Hop_Cuoc_HKRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Bang_Ke_Tong_Hop_Cuoc_HKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBuu_Cuc_Gui As DataColumn
        
        Private columnBuu_Cuc_Nhan As DataColumn
        
        Private columnNgay_Dong As DataColumn
        
        Private columnNgay_Bay As DataColumn
        
        Private columnSo_Chuyen_Thu As DataColumn
        
        Private columnLoai_Chuyen_Thu As DataColumn
        
        Private columnTong_So_Tui As DataColumn
        
        Private columnKL_Tui_Rong As DataColumn
        
        Private columnKL_EMS As DataColumn
        
        Private columnTong_KL As DataColumn
        
        Private columnHanh_Trinh As DataColumn
        
        Friend Sub New()
            MyBase.New("Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Buu_Cuc_GuiColumn As DataColumn
            Get
                Return Me.columnBuu_Cuc_Gui
            End Get
        End Property
        
        Friend ReadOnly Property Buu_Cuc_NhanColumn As DataColumn
            Get
                Return Me.columnBuu_Cuc_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_DongColumn As DataColumn
            Get
                Return Me.columnNgay_Dong
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_BayColumn As DataColumn
            Get
                Return Me.columnNgay_Bay
            End Get
        End Property
        
        Friend ReadOnly Property So_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnSo_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Loai_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnLoai_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_TuiColumn As DataColumn
            Get
                Return Me.columnTong_So_Tui
            End Get
        End Property
        
        Friend ReadOnly Property KL_Tui_RongColumn As DataColumn
            Get
                Return Me.columnKL_Tui_Rong
            End Get
        End Property
        
        Friend ReadOnly Property KL_EMSColumn As DataColumn
            Get
                Return Me.columnKL_EMS
            End Get
        End Property
        
        Friend ReadOnly Property Tong_KLColumn As DataColumn
            Get
                Return Me.columnTong_KL
            End Get
        End Property
        
        Friend ReadOnly Property Hanh_TrinhColumn As DataColumn
            Get
                Return Me.columnHanh_Trinh
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow
            Get
                Return CType(Me.Rows(index),Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow)
            End Get
        End Property
        
        Public Event Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChanged As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangeEventHandler
        
        Public Event Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChanging As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangeEventHandler
        
        Public Event Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowDeleted As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangeEventHandler
        
        Public Event Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowDeleting As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangeEventHandler
        
        Public Overloads Sub AddBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow(ByVal row As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow(ByVal Buu_Cuc_Gui As String, ByVal Buu_Cuc_Nhan As String, ByVal Ngay_Dong As Date, ByVal Ngay_Bay As Date, ByVal So_Chuyen_Thu As Integer, ByVal Loai_Chuyen_Thu As String, ByVal Tong_So_Tui As Integer, ByVal KL_Tui_Rong As Single, ByVal KL_EMS As Single, ByVal Tong_KL As Single, ByVal Hanh_Trinh As String) As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow
            Dim rowBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow = CType(Me.NewRow,Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow)
            rowBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow.ItemArray = New Object() {Buu_Cuc_Gui, Buu_Cuc_Nhan, Ngay_Dong, Ngay_Bay, So_Chuyen_Thu, Loai_Chuyen_Thu, Tong_So_Tui, KL_Tui_Rong, KL_EMS, Tong_KL, Hanh_Trinh}
            Me.Rows.Add(rowBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow)
            Return rowBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCDataTable = CType(MyBase.Clone,Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBuu_Cuc_Gui = Me.Columns("Buu_Cuc_Gui")
            Me.columnBuu_Cuc_Nhan = Me.Columns("Buu_Cuc_Nhan")
            Me.columnNgay_Dong = Me.Columns("Ngay_Dong")
            Me.columnNgay_Bay = Me.Columns("Ngay_Bay")
            Me.columnSo_Chuyen_Thu = Me.Columns("So_Chuyen_Thu")
            Me.columnLoai_Chuyen_Thu = Me.Columns("Loai_Chuyen_Thu")
            Me.columnTong_So_Tui = Me.Columns("Tong_So_Tui")
            Me.columnKL_Tui_Rong = Me.Columns("KL_Tui_Rong")
            Me.columnKL_EMS = Me.Columns("KL_EMS")
            Me.columnTong_KL = Me.Columns("Tong_KL")
            Me.columnHanh_Trinh = Me.Columns("Hanh_Trinh")
        End Sub
        
        Private Sub InitClass()
            Me.columnBuu_Cuc_Gui = New DataColumn("Buu_Cuc_Gui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBuu_Cuc_Gui)
            Me.columnBuu_Cuc_Nhan = New DataColumn("Buu_Cuc_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBuu_Cuc_Nhan)
            Me.columnNgay_Dong = New DataColumn("Ngay_Dong", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Dong)
            Me.columnNgay_Bay = New DataColumn("Ngay_Bay", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Bay)
            Me.columnSo_Chuyen_Thu = New DataColumn("So_Chuyen_Thu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Chuyen_Thu)
            Me.columnLoai_Chuyen_Thu = New DataColumn("Loai_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_Chuyen_Thu)
            Me.columnTong_So_Tui = New DataColumn("Tong_So_Tui", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_Tui)
            Me.columnKL_Tui_Rong = New DataColumn("KL_Tui_Rong", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKL_Tui_Rong)
            Me.columnKL_EMS = New DataColumn("KL_EMS", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKL_EMS)
            Me.columnTong_KL = New DataColumn("Tong_KL", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_KL)
            Me.columnHanh_Trinh = New DataColumn("Hanh_Trinh", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHanh_Trinh)
        End Sub
        
        Public Function NewBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow() As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow
            Return CType(Me.NewRow,Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangedEvent) Is Nothing) Then
                RaiseEvent Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChanged(Me, New Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangeEvent(CType(e.Row,Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangingEvent) Is Nothing) Then
                RaiseEvent Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChanging(Me, New Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangeEvent(CType(e.Row,Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowDeletedEvent) Is Nothing) Then
                RaiseEvent Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowDeleted(Me, New Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangeEvent(CType(e.Row,Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowDeletingEvent) Is Nothing) Then
                RaiseEvent Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowDeleting(Me, New Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangeEvent(CType(e.Row,Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow(ByVal row As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow
        Inherits DataRow
        
        Private tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC = CType(Me.Table,Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCDataTable)
        End Sub
        
        Public Property Buu_Cuc_Gui As String
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Buu_Cuc_GuiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Buu_Cuc_GuiColumn) = value
            End Set
        End Property
        
        Public Property Buu_Cuc_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Buu_Cuc_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Buu_Cuc_NhanColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Dong As Date
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Ngay_DongColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Ngay_DongColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Bay As Date
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Ngay_BayColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Ngay_BayColumn) = value
            End Set
        End Property
        
        Public Property So_Chuyen_Thu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.So_Chuyen_ThuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.So_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Loai_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Loai_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Loai_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_Tui As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Tong_So_TuiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Tong_So_TuiColumn) = value
            End Set
        End Property
        
        Public Property KL_Tui_Rong As Single
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.KL_Tui_RongColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.KL_Tui_RongColumn) = value
            End Set
        End Property
        
        Public Property KL_EMS As Single
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.KL_EMSColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.KL_EMSColumn) = value
            End Set
        End Property
        
        Public Property Tong_KL As Single
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Tong_KLColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Tong_KLColumn) = value
            End Set
        End Property
        
        Public Property Hanh_Trinh As String
            Get
                Try 
                    Return CType(Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Hanh_TrinhColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Hanh_TrinhColumn) = value
            End Set
        End Property
        
        Public Function IsBuu_Cuc_GuiNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Buu_Cuc_GuiColumn)
        End Function
        
        Public Sub SetBuu_Cuc_GuiNull()
            Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Buu_Cuc_GuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBuu_Cuc_NhanNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Buu_Cuc_NhanColumn)
        End Function
        
        Public Sub SetBuu_Cuc_NhanNull()
            Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Buu_Cuc_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_DongNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Ngay_DongColumn)
        End Function
        
        Public Sub SetNgay_DongNull()
            Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Ngay_DongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_BayNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Ngay_BayColumn)
        End Function
        
        Public Sub SetNgay_BayNull()
            Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Ngay_BayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.So_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetSo_Chuyen_ThuNull()
            Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.So_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Loai_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetLoai_Chuyen_ThuNull()
            Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Loai_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_TuiNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Tong_So_TuiColumn)
        End Function
        
        Public Sub SetTong_So_TuiNull()
            Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Tong_So_TuiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKL_Tui_RongNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.KL_Tui_RongColumn)
        End Function
        
        Public Sub SetKL_Tui_RongNull()
            Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.KL_Tui_RongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKL_EMSNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.KL_EMSColumn)
        End Function
        
        Public Sub SetKL_EMSNull()
            Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.KL_EMSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_KLNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Tong_KLColumn)
        End Function
        
        Public Sub SetTong_KLNull()
            Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Tong_KLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHanh_TrinhNull() As Boolean
            Return Me.IsNull(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Hanh_TrinhColumn)
        End Function
        
        Public Sub SetHanh_TrinhNull()
            Me(Me.tableBang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVC.Hanh_TrinhColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Bang_Ke_Chi_Tiet_Cuoc_HK_Theo_HVCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
