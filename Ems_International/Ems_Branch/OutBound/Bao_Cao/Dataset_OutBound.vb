'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset_OutBound
    Inherits DataSet
    
    Private tableBan_Ke_BV10_QT_Di As Ban_Ke_BV10_QT_DiDataTable
    
    Private tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterDataTable
    
    Private tableE1 As E1DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Ban_Ke_BV10_QT_Di")) Is Nothing) Then
                Me.Tables.Add(New Ban_Ke_BV10_QT_DiDataTable(ds.Tables("Ban_Ke_BV10_QT_Di")))
            End If
            If (Not (ds.Tables("E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center")) Is Nothing) Then
                Me.Tables.Add(New E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterDataTable(ds.Tables("E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center")))
            End If
            If (Not (ds.Tables("E1")) Is Nothing) Then
                Me.Tables.Add(New E1DataTable(ds.Tables("E1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ban_Ke_BV10_QT_Di As Ban_Ke_BV10_QT_DiDataTable
        Get
            Return Me.tableBan_Ke_BV10_QT_Di
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterDataTable
        Get
            Return Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property E1 As E1DataTable
        Get
            Return Me.tableE1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset_OutBound = CType(MyBase.Clone,Dataset_OutBound)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Ban_Ke_BV10_QT_Di")) Is Nothing) Then
            Me.Tables.Add(New Ban_Ke_BV10_QT_DiDataTable(ds.Tables("Ban_Ke_BV10_QT_Di")))
        End If
        If (Not (ds.Tables("E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center")) Is Nothing) Then
            Me.Tables.Add(New E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterDataTable(ds.Tables("E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center")))
        End If
        If (Not (ds.Tables("E1")) Is Nothing) Then
            Me.Tables.Add(New E1DataTable(ds.Tables("E1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBan_Ke_BV10_QT_Di = CType(Me.Tables("Ban_Ke_BV10_QT_Di"),Ban_Ke_BV10_QT_DiDataTable)
        If (Not (Me.tableBan_Ke_BV10_QT_Di) Is Nothing) Then
            Me.tableBan_Ke_BV10_QT_Di.InitVars
        End If
        Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center = CType(Me.Tables("E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center"),E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterDataTable)
        If (Not (Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center) Is Nothing) Then
            Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.InitVars
        End If
        Me.tableE1 = CType(Me.Tables("E1"),E1DataTable)
        If (Not (Me.tableE1) Is Nothing) Then
            Me.tableE1.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset_OutBound"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset_OutBound.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBan_Ke_BV10_QT_Di = New Ban_Ke_BV10_QT_DiDataTable
        Me.Tables.Add(Me.tableBan_Ke_BV10_QT_Di)
        Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center = New E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterDataTable
        Me.Tables.Add(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center)
        Me.tableE1 = New E1DataTable
        Me.Tables.Add(Me.tableE1)
    End Sub
    
    Private Function ShouldSerializeBan_Ke_BV10_QT_Di() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeE1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Ban_Ke_BV10_QT_DiRowChangeEventHandler(ByVal sender As Object, ByVal e As Ban_Ke_BV10_QT_DiRowChangeEvent)
    
    Public Delegate Sub E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangeEventHandler(ByVal sender As Object, ByVal e As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangeEvent)
    
    Public Delegate Sub E1RowChangeEventHandler(ByVal sender As Object, ByVal e As E1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_BV10_QT_DiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSoChuyenThu As DataColumn
        
        Private columnMa_Bc_Khai_Thac As DataColumn
        
        Private columnDuongthu As DataColumn
        
        Private columnTui_So As DataColumn
        
        Private columnTong_So_BP As DataColumn
        
        Private columnKhoiLuong As DataColumn
        
        Private columnTui_F As DataColumn
        
        Private columnTenBCgui As DataColumn
        
        Private columnTenBCnhan As DataColumn
        
        Friend Sub New()
            MyBase.New("Ban_Ke_BV10_QT_Di")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SoChuyenThuColumn As DataColumn
            Get
                Return Me.columnSoChuyenThu
            End Get
        End Property
        
        Friend ReadOnly Property Ma_Bc_Khai_ThacColumn As DataColumn
            Get
                Return Me.columnMa_Bc_Khai_Thac
            End Get
        End Property
        
        Friend ReadOnly Property DuongthuColumn As DataColumn
            Get
                Return Me.columnDuongthu
            End Get
        End Property
        
        Friend ReadOnly Property Tui_SoColumn As DataColumn
            Get
                Return Me.columnTui_So
            End Get
        End Property
        
        Friend ReadOnly Property Tong_So_BPColumn As DataColumn
            Get
                Return Me.columnTong_So_BP
            End Get
        End Property
        
        Friend ReadOnly Property KhoiLuongColumn As DataColumn
            Get
                Return Me.columnKhoiLuong
            End Get
        End Property
        
        Friend ReadOnly Property Tui_FColumn As DataColumn
            Get
                Return Me.columnTui_F
            End Get
        End Property
        
        Friend ReadOnly Property TenBCguiColumn As DataColumn
            Get
                Return Me.columnTenBCgui
            End Get
        End Property
        
        Friend ReadOnly Property TenBCnhanColumn As DataColumn
            Get
                Return Me.columnTenBCnhan
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ban_Ke_BV10_QT_DiRow
            Get
                Return CType(Me.Rows(index),Ban_Ke_BV10_QT_DiRow)
            End Get
        End Property
        
        Public Event Ban_Ke_BV10_QT_DiRowChanged As Ban_Ke_BV10_QT_DiRowChangeEventHandler
        
        Public Event Ban_Ke_BV10_QT_DiRowChanging As Ban_Ke_BV10_QT_DiRowChangeEventHandler
        
        Public Event Ban_Ke_BV10_QT_DiRowDeleted As Ban_Ke_BV10_QT_DiRowChangeEventHandler
        
        Public Event Ban_Ke_BV10_QT_DiRowDeleting As Ban_Ke_BV10_QT_DiRowChangeEventHandler
        
        Public Overloads Sub AddBan_Ke_BV10_QT_DiRow(ByVal row As Ban_Ke_BV10_QT_DiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBan_Ke_BV10_QT_DiRow(ByVal SoChuyenThu As Integer, ByVal Ma_Bc_Khai_Thac As String, ByVal Duongthu As String, ByVal Tui_So As Integer, ByVal Tong_So_BP As Integer, ByVal KhoiLuong As Integer, ByVal Tui_F As String, ByVal TenBCgui As String, ByVal TenBCnhan As String) As Ban_Ke_BV10_QT_DiRow
            Dim rowBan_Ke_BV10_QT_DiRow As Ban_Ke_BV10_QT_DiRow = CType(Me.NewRow,Ban_Ke_BV10_QT_DiRow)
            rowBan_Ke_BV10_QT_DiRow.ItemArray = New Object() {SoChuyenThu, Ma_Bc_Khai_Thac, Duongthu, Tui_So, Tong_So_BP, KhoiLuong, Tui_F, TenBCgui, TenBCnhan}
            Me.Rows.Add(rowBan_Ke_BV10_QT_DiRow)
            Return rowBan_Ke_BV10_QT_DiRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Ban_Ke_BV10_QT_DiDataTable = CType(MyBase.Clone,Ban_Ke_BV10_QT_DiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Ban_Ke_BV10_QT_DiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSoChuyenThu = Me.Columns("SoChuyenThu")
            Me.columnMa_Bc_Khai_Thac = Me.Columns("Ma_Bc_Khai_Thac")
            Me.columnDuongthu = Me.Columns("Duongthu")
            Me.columnTui_So = Me.Columns("Tui_So")
            Me.columnTong_So_BP = Me.Columns("Tong_So_BP")
            Me.columnKhoiLuong = Me.Columns("KhoiLuong")
            Me.columnTui_F = Me.Columns("Tui_F")
            Me.columnTenBCgui = Me.Columns("TenBCgui")
            Me.columnTenBCnhan = Me.Columns("TenBCnhan")
        End Sub
        
        Private Sub InitClass()
            Me.columnSoChuyenThu = New DataColumn("SoChuyenThu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoChuyenThu)
            Me.columnMa_Bc_Khai_Thac = New DataColumn("Ma_Bc_Khai_Thac", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Bc_Khai_Thac)
            Me.columnDuongthu = New DataColumn("Duongthu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDuongthu)
            Me.columnTui_So = New DataColumn("Tui_So", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So)
            Me.columnTong_So_BP = New DataColumn("Tong_So_BP", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_So_BP)
            Me.columnKhoiLuong = New DataColumn("KhoiLuong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoiLuong)
            Me.columnTui_F = New DataColumn("Tui_F", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_F)
            Me.columnTenBCgui = New DataColumn("TenBCgui", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTenBCgui)
            Me.columnTenBCnhan = New DataColumn("TenBCnhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTenBCnhan)
        End Sub
        
        Public Function NewBan_Ke_BV10_QT_DiRow() As Ban_Ke_BV10_QT_DiRow
            Return CType(Me.NewRow,Ban_Ke_BV10_QT_DiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Ban_Ke_BV10_QT_DiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Ban_Ke_BV10_QT_DiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ban_Ke_BV10_QT_DiRowChangedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_BV10_QT_DiRowChanged(Me, New Ban_Ke_BV10_QT_DiRowChangeEvent(CType(e.Row,Ban_Ke_BV10_QT_DiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ban_Ke_BV10_QT_DiRowChangingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_BV10_QT_DiRowChanging(Me, New Ban_Ke_BV10_QT_DiRowChangeEvent(CType(e.Row,Ban_Ke_BV10_QT_DiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ban_Ke_BV10_QT_DiRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_BV10_QT_DiRowDeleted(Me, New Ban_Ke_BV10_QT_DiRowChangeEvent(CType(e.Row,Ban_Ke_BV10_QT_DiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ban_Ke_BV10_QT_DiRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_BV10_QT_DiRowDeleting(Me, New Ban_Ke_BV10_QT_DiRowChangeEvent(CType(e.Row,Ban_Ke_BV10_QT_DiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBan_Ke_BV10_QT_DiRow(ByVal row As Ban_Ke_BV10_QT_DiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_BV10_QT_DiRow
        Inherits DataRow
        
        Private tableBan_Ke_BV10_QT_Di As Ban_Ke_BV10_QT_DiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBan_Ke_BV10_QT_Di = CType(Me.Table,Ban_Ke_BV10_QT_DiDataTable)
        End Sub
        
        Public Property SoChuyenThu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_BV10_QT_Di.SoChuyenThuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_BV10_QT_Di.SoChuyenThuColumn) = value
            End Set
        End Property
        
        Public Property Ma_Bc_Khai_Thac As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_BV10_QT_Di.Ma_Bc_Khai_ThacColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_BV10_QT_Di.Ma_Bc_Khai_ThacColumn) = value
            End Set
        End Property
        
        Public Property Duongthu As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_BV10_QT_Di.DuongthuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_BV10_QT_Di.DuongthuColumn) = value
            End Set
        End Property
        
        Public Property Tui_So As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_BV10_QT_Di.Tui_SoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_BV10_QT_Di.Tui_SoColumn) = value
            End Set
        End Property
        
        Public Property Tong_So_BP As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_BV10_QT_Di.Tong_So_BPColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_BV10_QT_Di.Tong_So_BPColumn) = value
            End Set
        End Property
        
        Public Property KhoiLuong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_BV10_QT_Di.KhoiLuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_BV10_QT_Di.KhoiLuongColumn) = value
            End Set
        End Property
        
        Public Property Tui_F As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_BV10_QT_Di.Tui_FColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_BV10_QT_Di.Tui_FColumn) = value
            End Set
        End Property
        
        Public Property TenBCgui As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_BV10_QT_Di.TenBCguiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_BV10_QT_Di.TenBCguiColumn) = value
            End Set
        End Property
        
        Public Property TenBCnhan As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_BV10_QT_Di.TenBCnhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_BV10_QT_Di.TenBCnhanColumn) = value
            End Set
        End Property
        
        Public Function IsSoChuyenThuNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_BV10_QT_Di.SoChuyenThuColumn)
        End Function
        
        Public Sub SetSoChuyenThuNull()
            Me(Me.tableBan_Ke_BV10_QT_Di.SoChuyenThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_Bc_Khai_ThacNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_BV10_QT_Di.Ma_Bc_Khai_ThacColumn)
        End Function
        
        Public Sub SetMa_Bc_Khai_ThacNull()
            Me(Me.tableBan_Ke_BV10_QT_Di.Ma_Bc_Khai_ThacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDuongthuNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_BV10_QT_Di.DuongthuColumn)
        End Function
        
        Public Sub SetDuongthuNull()
            Me(Me.tableBan_Ke_BV10_QT_Di.DuongthuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_SoNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_BV10_QT_Di.Tui_SoColumn)
        End Function
        
        Public Sub SetTui_SoNull()
            Me(Me.tableBan_Ke_BV10_QT_Di.Tui_SoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_So_BPNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_BV10_QT_Di.Tong_So_BPColumn)
        End Function
        
        Public Sub SetTong_So_BPNull()
            Me(Me.tableBan_Ke_BV10_QT_Di.Tong_So_BPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoiLuongNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_BV10_QT_Di.KhoiLuongColumn)
        End Function
        
        Public Sub SetKhoiLuongNull()
            Me(Me.tableBan_Ke_BV10_QT_Di.KhoiLuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_FNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_BV10_QT_Di.Tui_FColumn)
        End Function
        
        Public Sub SetTui_FNull()
            Me(Me.tableBan_Ke_BV10_QT_Di.Tui_FColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTenBCguiNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_BV10_QT_Di.TenBCguiColumn)
        End Function
        
        Public Sub SetTenBCguiNull()
            Me(Me.tableBan_Ke_BV10_QT_Di.TenBCguiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTenBCnhanNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_BV10_QT_Di.TenBCnhanColumn)
        End Function
        
        Public Sub SetTenBCnhanNull()
            Me(Me.tableBan_Ke_BV10_QT_Di.TenBCnhanColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_BV10_QT_DiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Ban_Ke_BV10_QT_DiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Ban_Ke_BV10_QT_DiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Ban_Ke_BV10_QT_DiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDuong_Thu As DataColumn
        
        Private columnSo_Chuyen_Thu As DataColumn
        
        Private columnLoai_Chuyen_Thu As DataColumn
        
        Private columnTui_So As DataColumn
        
        Private columnNgay_Dong As DataColumn
        
        Private columnMa_E1 As DataColumn
        
        Private columnMa_C1 As DataColumn
        
        Private columnKhoi_Luong As DataColumn
        
        Private columnPhan_Loai As DataColumn
        
        Private columnNguoi_Nhan As DataColumn
        
        Private columnDia_Chi_Nhan As DataColumn
        
        Private columnGio_Dong As DataColumn
        
        Friend Sub New()
            MyBase.New("E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Duong_ThuColumn As DataColumn
            Get
                Return Me.columnDuong_Thu
            End Get
        End Property
        
        Friend ReadOnly Property So_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnSo_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Loai_Chuyen_ThuColumn As DataColumn
            Get
                Return Me.columnLoai_Chuyen_Thu
            End Get
        End Property
        
        Friend ReadOnly Property Tui_SoColumn As DataColumn
            Get
                Return Me.columnTui_So
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_DongColumn As DataColumn
            Get
                Return Me.columnNgay_Dong
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property Ma_C1Column As DataColumn
            Get
                Return Me.columnMa_C1
            End Get
        End Property
        
        Friend ReadOnly Property Khoi_LuongColumn As DataColumn
            Get
                Return Me.columnKhoi_Luong
            End Get
        End Property
        
        Friend ReadOnly Property Phan_LoaiColumn As DataColumn
            Get
                Return Me.columnPhan_Loai
            End Get
        End Property
        
        Friend ReadOnly Property Nguoi_NhanColumn As DataColumn
            Get
                Return Me.columnNguoi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Dia_Chi_NhanColumn As DataColumn
            Get
                Return Me.columnDia_Chi_Nhan
            End Get
        End Property
        
        Friend ReadOnly Property Gio_DongColumn As DataColumn
            Get
                Return Me.columnGio_Dong
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow
            Get
                Return CType(Me.Rows(index),E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow)
            End Get
        End Property
        
        Public Event E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChanged As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangeEventHandler
        
        Public Event E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChanging As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangeEventHandler
        
        Public Event E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowDeleted As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangeEventHandler
        
        Public Event E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowDeleting As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangeEventHandler
        
        Public Overloads Sub AddE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow(ByVal row As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow(ByVal Duong_Thu As String, ByVal So_Chuyen_Thu As Integer, ByVal Loai_Chuyen_Thu As String, ByVal Tui_So As Integer, ByVal Ngay_Dong As Date, ByVal Ma_E1 As String, ByVal Ma_C1 As String, ByVal Khoi_Luong As Integer, ByVal Phan_Loai As String, ByVal Nguoi_Nhan As String, ByVal Dia_Chi_Nhan As String, ByVal Gio_Dong As String) As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow
            Dim rowE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow = CType(Me.NewRow,E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow)
            rowE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow.ItemArray = New Object() {Duong_Thu, So_Chuyen_Thu, Loai_Chuyen_Thu, Tui_So, Ngay_Dong, Ma_E1, Ma_C1, Khoi_Luong, Phan_Loai, Nguoi_Nhan, Dia_Chi_Nhan, Gio_Dong}
            Me.Rows.Add(rowE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow)
            Return rowE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterDataTable = CType(MyBase.Clone,E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDuong_Thu = Me.Columns("Duong_Thu")
            Me.columnSo_Chuyen_Thu = Me.Columns("So_Chuyen_Thu")
            Me.columnLoai_Chuyen_Thu = Me.Columns("Loai_Chuyen_Thu")
            Me.columnTui_So = Me.Columns("Tui_So")
            Me.columnNgay_Dong = Me.Columns("Ngay_Dong")
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnMa_C1 = Me.Columns("Ma_C1")
            Me.columnKhoi_Luong = Me.Columns("Khoi_Luong")
            Me.columnPhan_Loai = Me.Columns("Phan_Loai")
            Me.columnNguoi_Nhan = Me.Columns("Nguoi_Nhan")
            Me.columnDia_Chi_Nhan = Me.Columns("Dia_Chi_Nhan")
            Me.columnGio_Dong = Me.Columns("Gio_Dong")
        End Sub
        
        Private Sub InitClass()
            Me.columnDuong_Thu = New DataColumn("Duong_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDuong_Thu)
            Me.columnSo_Chuyen_Thu = New DataColumn("So_Chuyen_Thu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Chuyen_Thu)
            Me.columnLoai_Chuyen_Thu = New DataColumn("Loai_Chuyen_Thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoai_Chuyen_Thu)
            Me.columnTui_So = New DataColumn("Tui_So", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTui_So)
            Me.columnNgay_Dong = New DataColumn("Ngay_Dong", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Dong)
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnMa_C1 = New DataColumn("Ma_C1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_C1)
            Me.columnKhoi_Luong = New DataColumn("Khoi_Luong", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKhoi_Luong)
            Me.columnPhan_Loai = New DataColumn("Phan_Loai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhan_Loai)
            Me.columnNguoi_Nhan = New DataColumn("Nguoi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoi_Nhan)
            Me.columnDia_Chi_Nhan = New DataColumn("Dia_Chi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia_Chi_Nhan)
            Me.columnGio_Dong = New DataColumn("Gio_Dong", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGio_Dong)
        End Sub
        
        Public Function NewE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow() As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow
            Return CType(Me.NewRow,E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangedEvent) Is Nothing) Then
                RaiseEvent E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChanged(Me, New E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangeEvent(CType(e.Row,E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangingEvent) Is Nothing) Then
                RaiseEvent E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChanging(Me, New E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangeEvent(CType(e.Row,E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowDeletedEvent) Is Nothing) Then
                RaiseEvent E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowDeleted(Me, New E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangeEvent(CType(e.Row,E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowDeletingEvent) Is Nothing) Then
                RaiseEvent E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowDeleting(Me, New E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangeEvent(CType(e.Row,E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow(ByVal row As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow
        Inherits DataRow
        
        Private tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center = CType(Me.Table,E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterDataTable)
        End Sub
        
        Public Property Duong_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Duong_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Duong_ThuColumn) = value
            End Set
        End Property
        
        Public Property So_Chuyen_Thu As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.So_Chuyen_ThuColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.So_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Loai_Chuyen_Thu As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Loai_Chuyen_ThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Loai_Chuyen_ThuColumn) = value
            End Set
        End Property
        
        Public Property Tui_So As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Tui_SoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Tui_SoColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Dong As Date
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Ngay_DongColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Ngay_DongColumn) = value
            End Set
        End Property
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property Ma_C1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Ma_C1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Ma_C1Column) = value
            End Set
        End Property
        
        Public Property Khoi_Luong As Integer
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Khoi_LuongColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Khoi_LuongColumn) = value
            End Set
        End Property
        
        Public Property Phan_Loai As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Phan_LoaiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Phan_LoaiColumn) = value
            End Set
        End Property
        
        Public Property Nguoi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Nguoi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Nguoi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Dia_Chi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Dia_Chi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Dia_Chi_NhanColumn) = value
            End Set
        End Property
        
        Public Property Gio_Dong As String
            Get
                Try 
                    Return CType(Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Gio_DongColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Gio_DongColumn) = value
            End Set
        End Property
        
        Public Function IsDuong_ThuNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Duong_ThuColumn)
        End Function
        
        Public Sub SetDuong_ThuNull()
            Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Duong_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.So_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetSo_Chuyen_ThuNull()
            Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.So_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoai_Chuyen_ThuNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Loai_Chuyen_ThuColumn)
        End Function
        
        Public Sub SetLoai_Chuyen_ThuNull()
            Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Loai_Chuyen_ThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTui_SoNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Tui_SoColumn)
        End Function
        
        Public Sub SetTui_SoNull()
            Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Tui_SoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_DongNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Ngay_DongColumn)
        End Function
        
        Public Sub SetNgay_DongNull()
            Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Ngay_DongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_C1Null() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Ma_C1Column)
        End Function
        
        Public Sub SetMa_C1Null()
            Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Ma_C1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsKhoi_LuongNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Khoi_LuongColumn)
        End Function
        
        Public Sub SetKhoi_LuongNull()
            Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Khoi_LuongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhan_LoaiNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Phan_LoaiColumn)
        End Function
        
        Public Sub SetPhan_LoaiNull()
            Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Phan_LoaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Nguoi_NhanColumn)
        End Function
        
        Public Sub SetNguoi_NhanNull()
            Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Nguoi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDia_Chi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Dia_Chi_NhanColumn)
        End Function
        
        Public Sub SetDia_Chi_NhanNull()
            Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Dia_Chi_NhanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGio_DongNull() As Boolean
            Return Me.IsNull(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Gio_DongColumn)
        End Function
        
        Public Sub SetGio_DongNull()
            Me(Me.tableE1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_Center.Gio_DongColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E1_Di_Lay_Danh_Sach_Dong_Di_Tinh_Gui_Call_CenterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnE1_1 As DataColumn
        
        Private columnE1_2 As DataColumn
        
        Private columnE1_3 As DataColumn
        
        Private columnE1_4 As DataColumn
        
        Private columnE1_5 As DataColumn
        
        Private columnE11 As DataColumn
        
        Private columnE12 As DataColumn
        
        Private columnE13 As DataColumn
        
        Private columnE14 As DataColumn
        
        Private columnE15 As DataColumn
        
        Friend Sub New()
            MyBase.New("E1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property E1_1Column As DataColumn
            Get
                Return Me.columnE1_1
            End Get
        End Property
        
        Friend ReadOnly Property E1_2Column As DataColumn
            Get
                Return Me.columnE1_2
            End Get
        End Property
        
        Friend ReadOnly Property E1_3Column As DataColumn
            Get
                Return Me.columnE1_3
            End Get
        End Property
        
        Friend ReadOnly Property E1_4Column As DataColumn
            Get
                Return Me.columnE1_4
            End Get
        End Property
        
        Friend ReadOnly Property E1_5Column As DataColumn
            Get
                Return Me.columnE1_5
            End Get
        End Property
        
        Friend ReadOnly Property E11Column As DataColumn
            Get
                Return Me.columnE11
            End Get
        End Property
        
        Friend ReadOnly Property E12Column As DataColumn
            Get
                Return Me.columnE12
            End Get
        End Property
        
        Friend ReadOnly Property E13Column As DataColumn
            Get
                Return Me.columnE13
            End Get
        End Property
        
        Friend ReadOnly Property E14Column As DataColumn
            Get
                Return Me.columnE14
            End Get
        End Property
        
        Friend ReadOnly Property E15Column As DataColumn
            Get
                Return Me.columnE15
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As E1Row
            Get
                Return CType(Me.Rows(index),E1Row)
            End Get
        End Property
        
        Public Event E1RowChanged As E1RowChangeEventHandler
        
        Public Event E1RowChanging As E1RowChangeEventHandler
        
        Public Event E1RowDeleted As E1RowChangeEventHandler
        
        Public Event E1RowDeleting As E1RowChangeEventHandler
        
        Public Overloads Sub AddE1Row(ByVal row As E1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddE1Row(ByVal E1_1 As String, ByVal E1_2 As String, ByVal E1_3 As String, ByVal E1_4 As String, ByVal E1_5 As String, ByVal E11 As String, ByVal E12 As String, ByVal E13 As String, ByVal E14 As String, ByVal E15 As String) As E1Row
            Dim rowE1Row As E1Row = CType(Me.NewRow,E1Row)
            rowE1Row.ItemArray = New Object() {E1_1, E1_2, E1_3, E1_4, E1_5, E11, E12, E13, E14, E15}
            Me.Rows.Add(rowE1Row)
            Return rowE1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As E1DataTable = CType(MyBase.Clone,E1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New E1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnE1_1 = Me.Columns("E1_1")
            Me.columnE1_2 = Me.Columns("E1_2")
            Me.columnE1_3 = Me.Columns("E1_3")
            Me.columnE1_4 = Me.Columns("E1_4")
            Me.columnE1_5 = Me.Columns("E1_5")
            Me.columnE11 = Me.Columns("E11")
            Me.columnE12 = Me.Columns("E12")
            Me.columnE13 = Me.Columns("E13")
            Me.columnE14 = Me.Columns("E14")
            Me.columnE15 = Me.Columns("E15")
        End Sub
        
        Private Sub InitClass()
            Me.columnE1_1 = New DataColumn("E1_1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnE1_1)
            Me.columnE1_2 = New DataColumn("E1_2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnE1_2)
            Me.columnE1_3 = New DataColumn("E1_3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnE1_3)
            Me.columnE1_4 = New DataColumn("E1_4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnE1_4)
            Me.columnE1_5 = New DataColumn("E1_5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnE1_5)
            Me.columnE11 = New DataColumn("E11", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnE11)
            Me.columnE12 = New DataColumn("E12", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnE12)
            Me.columnE13 = New DataColumn("E13", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnE13)
            Me.columnE14 = New DataColumn("E14", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnE14)
            Me.columnE15 = New DataColumn("E15", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnE15)
        End Sub
        
        Public Function NewE1Row() As E1Row
            Return CType(Me.NewRow,E1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New E1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(E1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.E1RowChangedEvent) Is Nothing) Then
                RaiseEvent E1RowChanged(Me, New E1RowChangeEvent(CType(e.Row,E1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.E1RowChangingEvent) Is Nothing) Then
                RaiseEvent E1RowChanging(Me, New E1RowChangeEvent(CType(e.Row,E1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.E1RowDeletedEvent) Is Nothing) Then
                RaiseEvent E1RowDeleted(Me, New E1RowChangeEvent(CType(e.Row,E1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.E1RowDeletingEvent) Is Nothing) Then
                RaiseEvent E1RowDeleting(Me, New E1RowChangeEvent(CType(e.Row,E1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveE1Row(ByVal row As E1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1Row
        Inherits DataRow
        
        Private tableE1 As E1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableE1 = CType(Me.Table,E1DataTable)
        End Sub
        
        Public Property E1_1 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.E1_1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.E1_1Column) = value
            End Set
        End Property
        
        Public Property E1_2 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.E1_2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.E1_2Column) = value
            End Set
        End Property
        
        Public Property E1_3 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.E1_3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.E1_3Column) = value
            End Set
        End Property
        
        Public Property E1_4 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.E1_4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.E1_4Column) = value
            End Set
        End Property
        
        Public Property E1_5 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.E1_5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.E1_5Column) = value
            End Set
        End Property
        
        Public Property E11 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.E11Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.E11Column) = value
            End Set
        End Property
        
        Public Property E12 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.E12Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.E12Column) = value
            End Set
        End Property
        
        Public Property E13 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.E13Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.E13Column) = value
            End Set
        End Property
        
        Public Property E14 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.E14Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.E14Column) = value
            End Set
        End Property
        
        Public Property E15 As String
            Get
                Try 
                    Return CType(Me(Me.tableE1.E15Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableE1.E15Column) = value
            End Set
        End Property
        
        Public Function IsE1_1Null() As Boolean
            Return Me.IsNull(Me.tableE1.E1_1Column)
        End Function
        
        Public Sub SetE1_1Null()
            Me(Me.tableE1.E1_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsE1_2Null() As Boolean
            Return Me.IsNull(Me.tableE1.E1_2Column)
        End Function
        
        Public Sub SetE1_2Null()
            Me(Me.tableE1.E1_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsE1_3Null() As Boolean
            Return Me.IsNull(Me.tableE1.E1_3Column)
        End Function
        
        Public Sub SetE1_3Null()
            Me(Me.tableE1.E1_3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsE1_4Null() As Boolean
            Return Me.IsNull(Me.tableE1.E1_4Column)
        End Function
        
        Public Sub SetE1_4Null()
            Me(Me.tableE1.E1_4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsE1_5Null() As Boolean
            Return Me.IsNull(Me.tableE1.E1_5Column)
        End Function
        
        Public Sub SetE1_5Null()
            Me(Me.tableE1.E1_5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsE11Null() As Boolean
            Return Me.IsNull(Me.tableE1.E11Column)
        End Function
        
        Public Sub SetE11Null()
            Me(Me.tableE1.E11Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsE12Null() As Boolean
            Return Me.IsNull(Me.tableE1.E12Column)
        End Function
        
        Public Sub SetE12Null()
            Me(Me.tableE1.E12Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsE13Null() As Boolean
            Return Me.IsNull(Me.tableE1.E13Column)
        End Function
        
        Public Sub SetE13Null()
            Me(Me.tableE1.E13Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsE14Null() As Boolean
            Return Me.IsNull(Me.tableE1.E14Column)
        End Function
        
        Public Sub SetE14Null()
            Me(Me.tableE1.E14Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsE15Null() As Boolean
            Return Me.IsNull(Me.tableE1.E15Column)
        End Function
        
        Public Sub SetE15Null()
            Me(Me.tableE1.E15Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class E1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As E1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As E1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As E1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
