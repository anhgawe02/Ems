'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Quan_Ly_Thue_Le_Phi_HQ
    Inherits DataSet
    
    Private tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanDataTable
    
    Private tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan")) Is Nothing) Then
                Me.Tables.Add(New Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanDataTable(ds.Tables("Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan")))
            End If
            If (Not (ds.Tables("Ban_Ke_Chi_Tiet_Buu_Pham_Thu_Tien")) Is Nothing) Then
                Me.Tables.Add(New Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienDataTable(ds.Tables("Ban_Ke_Chi_Tiet_Buu_Pham_Thu_Tien")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanDataTable
        Get
            Return Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ban_Ke_Chi_Tiet_Buu_Pham_Thu_Tien As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienDataTable
        Get
            Return Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Quan_Ly_Thue_Le_Phi_HQ = CType(MyBase.Clone,Quan_Ly_Thue_Le_Phi_HQ)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan")) Is Nothing) Then
            Me.Tables.Add(New Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanDataTable(ds.Tables("Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan")))
        End If
        If (Not (ds.Tables("Ban_Ke_Chi_Tiet_Buu_Pham_Thu_Tien")) Is Nothing) Then
            Me.Tables.Add(New Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienDataTable(ds.Tables("Ban_Ke_Chi_Tiet_Buu_Pham_Thu_Tien")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan = CType(Me.Tables("Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan"),Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanDataTable)
        If (Not (Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan) Is Nothing) Then
            Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.InitVars
        End If
        Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien = CType(Me.Tables("Ban_Ke_Chi_Tiet_Buu_Pham_Thu_Tien"),Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienDataTable)
        If (Not (Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien) Is Nothing) Then
            Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Quan_Ly_Thue_Le_Phi_HQ"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Quan_Ly_Thue_Le_Phi_HQ.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan = New Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanDataTable
        Me.Tables.Add(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan)
        Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien = New Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienDataTable
        Me.Tables.Add(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien)
    End Sub
    
    Private Function ShouldSerializeBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangeEventHandler(ByVal sender As Object, ByVal e As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangeEvent)
    
    Public Delegate Sub Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangeEventHandler(ByVal sender As Object, ByVal e As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_Tinh As DataColumn
        
        Private columnTen_Tinh As DataColumn
        
        Private columnTo_HQ_02 As DataColumn
        
        Private columnLe_Phi_HQ As DataColumn
        
        Private columnLe_Phi_DV As DataColumn
        
        Private columnLe_Phi_TV As DataColumn
        
        Private columnLe_Phi_VH As DataColumn
        
        Private columnLe_Phi_YT As DataColumn
        
        Private columnLe_Phi_Khac As DataColumn
        
        Private columnTien_Bao_Bi As DataColumn
        
        Private columnTong_Tien As DataColumn
        
        Private columnTong_Thue As DataColumn
        
        Friend Sub New()
            MyBase.New("Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_TinhColumn As DataColumn
            Get
                Return Me.columnMa_Tinh
            End Get
        End Property
        
        Friend ReadOnly Property Ten_TinhColumn As DataColumn
            Get
                Return Me.columnTen_Tinh
            End Get
        End Property
        
        Friend ReadOnly Property To_HQ_02Column As DataColumn
            Get
                Return Me.columnTo_HQ_02
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_HQColumn As DataColumn
            Get
                Return Me.columnLe_Phi_HQ
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_DVColumn As DataColumn
            Get
                Return Me.columnLe_Phi_DV
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_TVColumn As DataColumn
            Get
                Return Me.columnLe_Phi_TV
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_VHColumn As DataColumn
            Get
                Return Me.columnLe_Phi_VH
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_YTColumn As DataColumn
            Get
                Return Me.columnLe_Phi_YT
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_KhacColumn As DataColumn
            Get
                Return Me.columnLe_Phi_Khac
            End Get
        End Property
        
        Friend ReadOnly Property Tien_Bao_BiColumn As DataColumn
            Get
                Return Me.columnTien_Bao_Bi
            End Get
        End Property
        
        Friend ReadOnly Property Tong_TienColumn As DataColumn
            Get
                Return Me.columnTong_Tien
            End Get
        End Property
        
        Friend ReadOnly Property Tong_ThueColumn As DataColumn
            Get
                Return Me.columnTong_Thue
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow
            Get
                Return CType(Me.Rows(index),Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow)
            End Get
        End Property
        
        Public Event Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChanged As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangeEventHandler
        
        Public Event Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChanging As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangeEventHandler
        
        Public Event Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowDeleted As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangeEventHandler
        
        Public Event Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowDeleting As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangeEventHandler
        
        Public Overloads Sub AddBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow(ByVal row As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow(ByVal Ma_Tinh As String, ByVal Ten_Tinh As String, ByVal To_HQ_02 As Integer, ByVal Le_Phi_HQ As Integer, ByVal Le_Phi_DV As Integer, ByVal Le_Phi_TV As Integer, ByVal Le_Phi_VH As Integer, ByVal Le_Phi_YT As Integer, ByVal Le_Phi_Khac As Integer, ByVal Tien_Bao_Bi As Integer, ByVal Tong_Tien As Integer, ByVal Tong_Thue As Integer) As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow
            Dim rowBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow = CType(Me.NewRow,Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow)
            rowBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow.ItemArray = New Object() {Ma_Tinh, Ten_Tinh, To_HQ_02, Le_Phi_HQ, Le_Phi_DV, Le_Phi_TV, Le_Phi_VH, Le_Phi_YT, Le_Phi_Khac, Tien_Bao_Bi, Tong_Tien, Tong_Thue}
            Me.Rows.Add(rowBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow)
            Return rowBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanDataTable = CType(MyBase.Clone,Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_Tinh = Me.Columns("Ma_Tinh")
            Me.columnTen_Tinh = Me.Columns("Ten_Tinh")
            Me.columnTo_HQ_02 = Me.Columns("To_HQ_02")
            Me.columnLe_Phi_HQ = Me.Columns("Le_Phi_HQ")
            Me.columnLe_Phi_DV = Me.Columns("Le_Phi_DV")
            Me.columnLe_Phi_TV = Me.Columns("Le_Phi_TV")
            Me.columnLe_Phi_VH = Me.Columns("Le_Phi_VH")
            Me.columnLe_Phi_YT = Me.Columns("Le_Phi_YT")
            Me.columnLe_Phi_Khac = Me.Columns("Le_Phi_Khac")
            Me.columnTien_Bao_Bi = Me.Columns("Tien_Bao_Bi")
            Me.columnTong_Tien = Me.Columns("Tong_Tien")
            Me.columnTong_Thue = Me.Columns("Tong_Thue")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_Tinh = New DataColumn("Ma_Tinh", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Tinh)
            Me.columnTen_Tinh = New DataColumn("Ten_Tinh", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Tinh)
            Me.columnTo_HQ_02 = New DataColumn("To_HQ_02", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTo_HQ_02)
            Me.columnLe_Phi_HQ = New DataColumn("Le_Phi_HQ", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_HQ)
            Me.columnLe_Phi_DV = New DataColumn("Le_Phi_DV", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_DV)
            Me.columnLe_Phi_TV = New DataColumn("Le_Phi_TV", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_TV)
            Me.columnLe_Phi_VH = New DataColumn("Le_Phi_VH", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_VH)
            Me.columnLe_Phi_YT = New DataColumn("Le_Phi_YT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_YT)
            Me.columnLe_Phi_Khac = New DataColumn("Le_Phi_Khac", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_Khac)
            Me.columnTien_Bao_Bi = New DataColumn("Tien_Bao_Bi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTien_Bao_Bi)
            Me.columnTong_Tien = New DataColumn("Tong_Tien", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Tien)
            Me.columnTong_Thue = New DataColumn("Tong_Thue", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Thue)
        End Sub
        
        Public Function NewBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow() As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow
            Return CType(Me.NewRow,Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChanged(Me, New Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangeEvent(CType(e.Row,Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChanging(Me, New Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangeEvent(CType(e.Row,Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowDeleted(Me, New Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangeEvent(CType(e.Row,Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowDeleting(Me, New Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangeEvent(CType(e.Row,Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow(ByVal row As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow
        Inherits DataRow
        
        Private tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan = CType(Me.Table,Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanDataTable)
        End Sub
        
        Public Property Ma_Tinh As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Ma_TinhColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Ma_TinhColumn) = value
            End Set
        End Property
        
        Public Property Ten_Tinh As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Ten_TinhColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Ten_TinhColumn) = value
            End Set
        End Property
        
        Public Property To_HQ_02 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.To_HQ_02Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.To_HQ_02Column) = value
            End Set
        End Property
        
        Public Property Le_Phi_HQ As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_HQColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_HQColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_DV As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_DVColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_DVColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_TV As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_TVColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_TVColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_VH As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_VHColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_VHColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_YT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_YTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_YTColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_Khac As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_KhacColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_KhacColumn) = value
            End Set
        End Property
        
        Public Property Tien_Bao_Bi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Tien_Bao_BiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Tien_Bao_BiColumn) = value
            End Set
        End Property
        
        Public Property Tong_Tien As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Tong_TienColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Tong_TienColumn) = value
            End Set
        End Property
        
        Public Property Tong_Thue As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Tong_ThueColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Tong_ThueColumn) = value
            End Set
        End Property
        
        Public Function IsMa_TinhNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Ma_TinhColumn)
        End Function
        
        Public Sub SetMa_TinhNull()
            Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Ma_TinhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_TinhNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Ten_TinhColumn)
        End Function
        
        Public Sub SetTen_TinhNull()
            Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Ten_TinhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTo_HQ_02Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.To_HQ_02Column)
        End Function
        
        Public Sub SetTo_HQ_02Null()
            Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.To_HQ_02Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_HQNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_HQColumn)
        End Function
        
        Public Sub SetLe_Phi_HQNull()
            Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_HQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_DVNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_DVColumn)
        End Function
        
        Public Sub SetLe_Phi_DVNull()
            Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_DVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_TVNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_TVColumn)
        End Function
        
        Public Sub SetLe_Phi_TVNull()
            Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_TVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_VHNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_VHColumn)
        End Function
        
        Public Sub SetLe_Phi_VHNull()
            Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_VHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_YTNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_YTColumn)
        End Function
        
        Public Sub SetLe_Phi_YTNull()
            Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_YTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_KhacNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_KhacColumn)
        End Function
        
        Public Sub SetLe_Phi_KhacNull()
            Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Le_Phi_KhacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTien_Bao_BiNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Tien_Bao_BiColumn)
        End Function
        
        Public Sub SetTien_Bao_BiNull()
            Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Tien_Bao_BiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_TienNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Tong_TienColumn)
        End Function
        
        Public Sub SetTong_TienNull()
            Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Tong_TienColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_ThueNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Tong_ThueColumn)
        End Function
        
        Public Sub SetTong_ThueNull()
            Me(Me.tableBan_Ke_Tong_Hop_Thue_Le_Phi_Hai_Quan.Tong_ThueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Ban_Ke_Tong_Hop_Thue_Le_Phi_Hai_QuanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMa_Tinh As DataColumn
        
        Private columnTen_Tinh As DataColumn
        
        Private columnNgay_Dong As DataColumn
        
        Private columnNgay_Thu_1 As DataColumn
        
        Private columnThu_Lan_1 As DataColumn
        
        Private columnNgay_Thu_2 As DataColumn
        
        Private columnThu_Lan_2 As DataColumn
        
        Private columnMa_E1 As DataColumn
        
        Private columnSo_TKHQ As DataColumn
        
        Private columnSo_Bien_Lai As DataColumn
        
        Private columnThue_NK As DataColumn
        
        Private columnThue_VAT As DataColumn
        
        Private columnThue_NK_VAT As DataColumn
        
        Private columnLe_Phi_HQ As DataColumn
        
        Private columnLe_Phi_Kiem_Dinh As DataColumn
        
        Private columnTong_Tien As DataColumn
        
        Private columnTen_Dia_Chi_Nhan As DataColumn
        
        Friend Sub New()
            MyBase.New("Ban_Ke_Chi_Tiet_Buu_Pham_Thu_Tien")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ma_TinhColumn As DataColumn
            Get
                Return Me.columnMa_Tinh
            End Get
        End Property
        
        Friend ReadOnly Property Ten_TinhColumn As DataColumn
            Get
                Return Me.columnTen_Tinh
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_DongColumn As DataColumn
            Get
                Return Me.columnNgay_Dong
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_Thu_1Column As DataColumn
            Get
                Return Me.columnNgay_Thu_1
            End Get
        End Property
        
        Friend ReadOnly Property Thu_Lan_1Column As DataColumn
            Get
                Return Me.columnThu_Lan_1
            End Get
        End Property
        
        Friend ReadOnly Property Ngay_Thu_2Column As DataColumn
            Get
                Return Me.columnNgay_Thu_2
            End Get
        End Property
        
        Friend ReadOnly Property Thu_Lan_2Column As DataColumn
            Get
                Return Me.columnThu_Lan_2
            End Get
        End Property
        
        Friend ReadOnly Property Ma_E1Column As DataColumn
            Get
                Return Me.columnMa_E1
            End Get
        End Property
        
        Friend ReadOnly Property So_TKHQColumn As DataColumn
            Get
                Return Me.columnSo_TKHQ
            End Get
        End Property
        
        Friend ReadOnly Property So_Bien_LaiColumn As DataColumn
            Get
                Return Me.columnSo_Bien_Lai
            End Get
        End Property
        
        Friend ReadOnly Property Thue_NKColumn As DataColumn
            Get
                Return Me.columnThue_NK
            End Get
        End Property
        
        Friend ReadOnly Property Thue_VATColumn As DataColumn
            Get
                Return Me.columnThue_VAT
            End Get
        End Property
        
        Friend ReadOnly Property Thue_NK_VATColumn As DataColumn
            Get
                Return Me.columnThue_NK_VAT
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_HQColumn As DataColumn
            Get
                Return Me.columnLe_Phi_HQ
            End Get
        End Property
        
        Friend ReadOnly Property Le_Phi_Kiem_DinhColumn As DataColumn
            Get
                Return Me.columnLe_Phi_Kiem_Dinh
            End Get
        End Property
        
        Friend ReadOnly Property Tong_TienColumn As DataColumn
            Get
                Return Me.columnTong_Tien
            End Get
        End Property
        
        Friend ReadOnly Property Ten_Dia_Chi_NhanColumn As DataColumn
            Get
                Return Me.columnTen_Dia_Chi_Nhan
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow
            Get
                Return CType(Me.Rows(index),Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow)
            End Get
        End Property
        
        Public Event Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChanged As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangeEventHandler
        
        Public Event Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChanging As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangeEventHandler
        
        Public Event Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowDeleted As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangeEventHandler
        
        Public Event Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowDeleting As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangeEventHandler
        
        Public Overloads Sub AddBan_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow(ByVal row As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBan_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow( _
                    ByVal Ma_Tinh As Integer,  _
                    ByVal Ten_Tinh As String,  _
                    ByVal Ngay_Dong As Date,  _
                    ByVal Ngay_Thu_1 As Date,  _
                    ByVal Thu_Lan_1 As Integer,  _
                    ByVal Ngay_Thu_2 As Date,  _
                    ByVal Thu_Lan_2 As Integer,  _
                    ByVal Ma_E1 As String,  _
                    ByVal So_TKHQ As String,  _
                    ByVal So_Bien_Lai As String,  _
                    ByVal Thue_NK As Integer,  _
                    ByVal Thue_VAT As Integer,  _
                    ByVal Thue_NK_VAT As Integer,  _
                    ByVal Le_Phi_HQ As Integer,  _
                    ByVal Le_Phi_Kiem_Dinh As Integer,  _
                    ByVal Tong_Tien As Integer,  _
                    ByVal Ten_Dia_Chi_Nhan As String) As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow
            Dim rowBan_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow = CType(Me.NewRow,Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow)
            rowBan_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow.ItemArray = New Object() {Ma_Tinh, Ten_Tinh, Ngay_Dong, Ngay_Thu_1, Thu_Lan_1, Ngay_Thu_2, Thu_Lan_2, Ma_E1, So_TKHQ, So_Bien_Lai, Thue_NK, Thue_VAT, Thue_NK_VAT, Le_Phi_HQ, Le_Phi_Kiem_Dinh, Tong_Tien, Ten_Dia_Chi_Nhan}
            Me.Rows.Add(rowBan_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow)
            Return rowBan_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienDataTable = CType(MyBase.Clone,Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMa_Tinh = Me.Columns("Ma_Tinh")
            Me.columnTen_Tinh = Me.Columns("Ten_Tinh")
            Me.columnNgay_Dong = Me.Columns("Ngay_Dong")
            Me.columnNgay_Thu_1 = Me.Columns("Ngay_Thu_1")
            Me.columnThu_Lan_1 = Me.Columns("Thu_Lan_1")
            Me.columnNgay_Thu_2 = Me.Columns("Ngay_Thu_2")
            Me.columnThu_Lan_2 = Me.Columns("Thu_Lan_2")
            Me.columnMa_E1 = Me.Columns("Ma_E1")
            Me.columnSo_TKHQ = Me.Columns("So_TKHQ")
            Me.columnSo_Bien_Lai = Me.Columns("So_Bien_Lai")
            Me.columnThue_NK = Me.Columns("Thue_NK")
            Me.columnThue_VAT = Me.Columns("Thue_VAT")
            Me.columnThue_NK_VAT = Me.Columns("Thue_NK_VAT")
            Me.columnLe_Phi_HQ = Me.Columns("Le_Phi_HQ")
            Me.columnLe_Phi_Kiem_Dinh = Me.Columns("Le_Phi_Kiem_Dinh")
            Me.columnTong_Tien = Me.Columns("Tong_Tien")
            Me.columnTen_Dia_Chi_Nhan = Me.Columns("Ten_Dia_Chi_Nhan")
        End Sub
        
        Private Sub InitClass()
            Me.columnMa_Tinh = New DataColumn("Ma_Tinh", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_Tinh)
            Me.columnTen_Tinh = New DataColumn("Ten_Tinh", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Tinh)
            Me.columnNgay_Dong = New DataColumn("Ngay_Dong", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Dong)
            Me.columnNgay_Thu_1 = New DataColumn("Ngay_Thu_1", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Thu_1)
            Me.columnThu_Lan_1 = New DataColumn("Thu_Lan_1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThu_Lan_1)
            Me.columnNgay_Thu_2 = New DataColumn("Ngay_Thu_2", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay_Thu_2)
            Me.columnThu_Lan_2 = New DataColumn("Thu_Lan_2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThu_Lan_2)
            Me.columnMa_E1 = New DataColumn("Ma_E1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMa_E1)
            Me.columnSo_TKHQ = New DataColumn("So_TKHQ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_TKHQ)
            Me.columnSo_Bien_Lai = New DataColumn("So_Bien_Lai", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSo_Bien_Lai)
            Me.columnThue_NK = New DataColumn("Thue_NK", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThue_NK)
            Me.columnThue_VAT = New DataColumn("Thue_VAT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThue_VAT)
            Me.columnThue_NK_VAT = New DataColumn("Thue_NK_VAT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThue_NK_VAT)
            Me.columnLe_Phi_HQ = New DataColumn("Le_Phi_HQ", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_HQ)
            Me.columnLe_Phi_Kiem_Dinh = New DataColumn("Le_Phi_Kiem_Dinh", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLe_Phi_Kiem_Dinh)
            Me.columnTong_Tien = New DataColumn("Tong_Tien", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTong_Tien)
            Me.columnTen_Dia_Chi_Nhan = New DataColumn("Ten_Dia_Chi_Nhan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTen_Dia_Chi_Nhan)
        End Sub
        
        Public Function NewBan_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow() As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow
            Return CType(Me.NewRow,Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChanged(Me, New Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangeEvent(CType(e.Row,Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChanging(Me, New Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangeEvent(CType(e.Row,Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowDeleted(Me, New Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangeEvent(CType(e.Row,Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowDeleting(Me, New Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangeEvent(CType(e.Row,Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBan_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow(ByVal row As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow
        Inherits DataRow
        
        Private tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien = CType(Me.Table,Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienDataTable)
        End Sub
        
        Public Property Ma_Tinh As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ma_TinhColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ma_TinhColumn) = value
            End Set
        End Property
        
        Public Property Ten_Tinh As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ten_TinhColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ten_TinhColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Dong As Date
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ngay_DongColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ngay_DongColumn) = value
            End Set
        End Property
        
        Public Property Ngay_Thu_1 As Date
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ngay_Thu_1Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ngay_Thu_1Column) = value
            End Set
        End Property
        
        Public Property Thu_Lan_1 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thu_Lan_1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thu_Lan_1Column) = value
            End Set
        End Property
        
        Public Property Ngay_Thu_2 As Date
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ngay_Thu_2Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ngay_Thu_2Column) = value
            End Set
        End Property
        
        Public Property Thu_Lan_2 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thu_Lan_2Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thu_Lan_2Column) = value
            End Set
        End Property
        
        Public Property Ma_E1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ma_E1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ma_E1Column) = value
            End Set
        End Property
        
        Public Property So_TKHQ As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.So_TKHQColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.So_TKHQColumn) = value
            End Set
        End Property
        
        Public Property So_Bien_Lai As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.So_Bien_LaiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.So_Bien_LaiColumn) = value
            End Set
        End Property
        
        Public Property Thue_NK As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thue_NKColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thue_NKColumn) = value
            End Set
        End Property
        
        Public Property Thue_VAT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thue_VATColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thue_VATColumn) = value
            End Set
        End Property
        
        Public Property Thue_NK_VAT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thue_NK_VATColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thue_NK_VATColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_HQ As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Le_Phi_HQColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Le_Phi_HQColumn) = value
            End Set
        End Property
        
        Public Property Le_Phi_Kiem_Dinh As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Le_Phi_Kiem_DinhColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Le_Phi_Kiem_DinhColumn) = value
            End Set
        End Property
        
        Public Property Tong_Tien As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Tong_TienColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Tong_TienColumn) = value
            End Set
        End Property
        
        Public Property Ten_Dia_Chi_Nhan As String
            Get
                Try 
                    Return CType(Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ten_Dia_Chi_NhanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ten_Dia_Chi_NhanColumn) = value
            End Set
        End Property
        
        Public Function IsMa_TinhNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ma_TinhColumn)
        End Function
        
        Public Sub SetMa_TinhNull()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ma_TinhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_TinhNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ten_TinhColumn)
        End Function
        
        Public Sub SetTen_TinhNull()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ten_TinhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_DongNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ngay_DongColumn)
        End Function
        
        Public Sub SetNgay_DongNull()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ngay_DongColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_Thu_1Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ngay_Thu_1Column)
        End Function
        
        Public Sub SetNgay_Thu_1Null()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ngay_Thu_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsThu_Lan_1Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thu_Lan_1Column)
        End Function
        
        Public Sub SetThu_Lan_1Null()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thu_Lan_1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgay_Thu_2Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ngay_Thu_2Column)
        End Function
        
        Public Sub SetNgay_Thu_2Null()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ngay_Thu_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsThu_Lan_2Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thu_Lan_2Column)
        End Function
        
        Public Sub SetThu_Lan_2Null()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thu_Lan_2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMa_E1Null() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ma_E1Column)
        End Function
        
        Public Sub SetMa_E1Null()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ma_E1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_TKHQNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.So_TKHQColumn)
        End Function
        
        Public Sub SetSo_TKHQNull()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.So_TKHQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSo_Bien_LaiNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.So_Bien_LaiColumn)
        End Function
        
        Public Sub SetSo_Bien_LaiNull()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.So_Bien_LaiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThue_NKNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thue_NKColumn)
        End Function
        
        Public Sub SetThue_NKNull()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thue_NKColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThue_VATNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thue_VATColumn)
        End Function
        
        Public Sub SetThue_VATNull()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thue_VATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThue_NK_VATNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thue_NK_VATColumn)
        End Function
        
        Public Sub SetThue_NK_VATNull()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Thue_NK_VATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_HQNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Le_Phi_HQColumn)
        End Function
        
        Public Sub SetLe_Phi_HQNull()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Le_Phi_HQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLe_Phi_Kiem_DinhNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Le_Phi_Kiem_DinhColumn)
        End Function
        
        Public Sub SetLe_Phi_Kiem_DinhNull()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Le_Phi_Kiem_DinhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTong_TienNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Tong_TienColumn)
        End Function
        
        Public Sub SetTong_TienNull()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Tong_TienColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTen_Dia_Chi_NhanNull() As Boolean
            Return Me.IsNull(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ten_Dia_Chi_NhanColumn)
        End Function
        
        Public Sub SetTen_Dia_Chi_NhanNull()
            Me(Me.tableBan_Ke_Chi_Tiet_Buu_Pham_Thu_Tien.Ten_Dia_Chi_NhanColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Ban_Ke_Chi_Tiet_Buu_Pham_Thu_TienRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
